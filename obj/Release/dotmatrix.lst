                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module dotmatrix
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _display_explosion_pattern
                                     12 	.globl _spi_init
                                     13 	.globl _get_display
                                     14 	.globl _get_unit
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _F1
                                     22 	.globl _P
                                     23 	.globl _PS
                                     24 	.globl _PT1
                                     25 	.globl _PX1
                                     26 	.globl _PT0
                                     27 	.globl _PX0
                                     28 	.globl _RD
                                     29 	.globl _WR
                                     30 	.globl _T1
                                     31 	.globl _T0
                                     32 	.globl _INT1
                                     33 	.globl _INT0
                                     34 	.globl _TXD
                                     35 	.globl _RXD
                                     36 	.globl _P3_7
                                     37 	.globl _P3_6
                                     38 	.globl _P3_5
                                     39 	.globl _P3_4
                                     40 	.globl _P3_3
                                     41 	.globl _P3_2
                                     42 	.globl _P3_1
                                     43 	.globl _P3_0
                                     44 	.globl _EA
                                     45 	.globl _ES
                                     46 	.globl _ET1
                                     47 	.globl _EX1
                                     48 	.globl _ET0
                                     49 	.globl _EX0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _SM0
                                     59 	.globl _SM1
                                     60 	.globl _SM2
                                     61 	.globl _REN
                                     62 	.globl _TB8
                                     63 	.globl _RB8
                                     64 	.globl _TI
                                     65 	.globl _RI
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _TF1
                                     75 	.globl _TR1
                                     76 	.globl _TF0
                                     77 	.globl _TR0
                                     78 	.globl _IE1
                                     79 	.globl _IT1
                                     80 	.globl _IE0
                                     81 	.globl _IT0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _P5_7
                                     91 	.globl _P5_6
                                     92 	.globl _P5_5
                                     93 	.globl _P5_4
                                     94 	.globl _P5_3
                                     95 	.globl _P5_2
                                     96 	.globl _P5_1
                                     97 	.globl _P5_0
                                     98 	.globl _P4_7
                                     99 	.globl _P4_6
                                    100 	.globl _P4_5
                                    101 	.globl _P4_4
                                    102 	.globl _P4_3
                                    103 	.globl _P4_2
                                    104 	.globl _P4_1
                                    105 	.globl _P4_0
                                    106 	.globl _PX0L
                                    107 	.globl _PT0L
                                    108 	.globl _PX1L
                                    109 	.globl _PT1L
                                    110 	.globl _PSL
                                    111 	.globl _PT2L
                                    112 	.globl _PPCL
                                    113 	.globl _EC
                                    114 	.globl _CCF0
                                    115 	.globl _CCF1
                                    116 	.globl _CCF2
                                    117 	.globl _CCF3
                                    118 	.globl _CCF4
                                    119 	.globl _CR
                                    120 	.globl _CF
                                    121 	.globl _TF2
                                    122 	.globl _EXF2
                                    123 	.globl _RCLK
                                    124 	.globl _TCLK
                                    125 	.globl _EXEN2
                                    126 	.globl _TR2
                                    127 	.globl _C_T2
                                    128 	.globl _CP_RL2
                                    129 	.globl _T2CON_7
                                    130 	.globl _T2CON_6
                                    131 	.globl _T2CON_5
                                    132 	.globl _T2CON_4
                                    133 	.globl _T2CON_3
                                    134 	.globl _T2CON_2
                                    135 	.globl _T2CON_1
                                    136 	.globl _T2CON_0
                                    137 	.globl _PT2
                                    138 	.globl _ET2
                                    139 	.globl _B
                                    140 	.globl _ACC
                                    141 	.globl _PSW
                                    142 	.globl _IP
                                    143 	.globl _P3
                                    144 	.globl _IE
                                    145 	.globl _P2
                                    146 	.globl _SBUF
                                    147 	.globl _SCON
                                    148 	.globl _P1
                                    149 	.globl _TH1
                                    150 	.globl _TH0
                                    151 	.globl _TL1
                                    152 	.globl _TL0
                                    153 	.globl _TMOD
                                    154 	.globl _TCON
                                    155 	.globl _PCON
                                    156 	.globl _DPH
                                    157 	.globl _DPL
                                    158 	.globl _SP
                                    159 	.globl _P0
                                    160 	.globl _EECON
                                    161 	.globl _KBF
                                    162 	.globl _KBE
                                    163 	.globl _KBLS
                                    164 	.globl _BRL
                                    165 	.globl _BDRCON
                                    166 	.globl _T2MOD
                                    167 	.globl _SPDAT
                                    168 	.globl _SPSTA
                                    169 	.globl _SPCON
                                    170 	.globl _SADEN
                                    171 	.globl _SADDR
                                    172 	.globl _WDTPRG
                                    173 	.globl _WDTRST
                                    174 	.globl _P5
                                    175 	.globl _P4
                                    176 	.globl _IPH1
                                    177 	.globl _IPL1
                                    178 	.globl _IPH0
                                    179 	.globl _IPL0
                                    180 	.globl _IEN1
                                    181 	.globl _IEN0
                                    182 	.globl _CMOD
                                    183 	.globl _CL
                                    184 	.globl _CH
                                    185 	.globl _CCON
                                    186 	.globl _CCAPM4
                                    187 	.globl _CCAPM3
                                    188 	.globl _CCAPM2
                                    189 	.globl _CCAPM1
                                    190 	.globl _CCAPM0
                                    191 	.globl _CCAP4L
                                    192 	.globl _CCAP3L
                                    193 	.globl _CCAP2L
                                    194 	.globl _CCAP1L
                                    195 	.globl _CCAP0L
                                    196 	.globl _CCAP4H
                                    197 	.globl _CCAP3H
                                    198 	.globl _CCAP2H
                                    199 	.globl _CCAP1H
                                    200 	.globl _CCAP0H
                                    201 	.globl _CKCON1
                                    202 	.globl _CKCON0
                                    203 	.globl _CKRL
                                    204 	.globl _AUXR1
                                    205 	.globl _AUXR
                                    206 	.globl _TH2
                                    207 	.globl _TL2
                                    208 	.globl _RCAP2H
                                    209 	.globl _RCAP2L
                                    210 	.globl _T2CON
                                    211 	.globl _player_points
                                    212 	.globl _current_row_location_of_player2
                                    213 	.globl _current_row_location_of_player1
                                    214 	.globl _explosion_large
                                    215 	.globl _explosion_small
                                    216 	.globl _letter_N
                                    217 	.globl _letter_W
                                    218 	.globl _number_2
                                    219 	.globl _number_1
                                    220 	.globl _letter_P
                                    221 	.globl _letter_R
                                    222 	.globl _letter_V
                                    223 	.globl _letter_O
                                    224 	.globl _letter_E
                                    225 	.globl _letter_M
                                    226 	.globl _letter_A
                                    227 	.globl _letter_G
                                    228 	.globl _display_character_PARM_3
                                    229 	.globl _display_character_PARM_2
                                    230 	.globl _change_ball_PARM_2
                                    231 	.globl _dotmatrix_send_PARM_4
                                    232 	.globl _dotmatrix_send_PARM_3
                                    233 	.globl _dotmatrix_send_PARM_2
                                    234 	.globl _getGameState
                                    235 	.globl _setGameState
                                    236 	.globl _dotmatrix_send
                                    237 	.globl _move_p1controller_up
                                    238 	.globl _move_p1controller_down
                                    239 	.globl _move_p2controller_down
                                    240 	.globl _move_p2controller_up
                                    241 	.globl _initialize_controller
                                    242 	.globl _erase_ball
                                    243 	.globl _draw_ball
                                    244 	.globl _ball_y
                                    245 	.globl _ball_x
                                    246 	.globl _change_ball
                                    247 	.globl _increment
                                    248 	.globl _display_character
                                    249 	.globl _clear_display
                                    250 	.globl _display_explosion
                                    251 	.globl _score_to_binary
                                    252 	.globl _send_score
                                    253 	.globl _shift_data
                                    254 ;--------------------------------------------------------
                                    255 ; special function registers
                                    256 ;--------------------------------------------------------
                                    257 	.area RSEG    (ABS,DATA)
      000000                        258 	.org 0x0000
                           0000C8   259 _T2CON	=	0x00c8
                           0000CA   260 _RCAP2L	=	0x00ca
                           0000CB   261 _RCAP2H	=	0x00cb
                           0000CC   262 _TL2	=	0x00cc
                           0000CD   263 _TH2	=	0x00cd
                           00008E   264 _AUXR	=	0x008e
                           0000A2   265 _AUXR1	=	0x00a2
                           000097   266 _CKRL	=	0x0097
                           00008F   267 _CKCON0	=	0x008f
                           0000AF   268 _CKCON1	=	0x00af
                           0000FA   269 _CCAP0H	=	0x00fa
                           0000FB   270 _CCAP1H	=	0x00fb
                           0000FC   271 _CCAP2H	=	0x00fc
                           0000FD   272 _CCAP3H	=	0x00fd
                           0000FE   273 _CCAP4H	=	0x00fe
                           0000EA   274 _CCAP0L	=	0x00ea
                           0000EB   275 _CCAP1L	=	0x00eb
                           0000EC   276 _CCAP2L	=	0x00ec
                           0000ED   277 _CCAP3L	=	0x00ed
                           0000EE   278 _CCAP4L	=	0x00ee
                           0000DA   279 _CCAPM0	=	0x00da
                           0000DB   280 _CCAPM1	=	0x00db
                           0000DC   281 _CCAPM2	=	0x00dc
                           0000DD   282 _CCAPM3	=	0x00dd
                           0000DE   283 _CCAPM4	=	0x00de
                           0000D8   284 _CCON	=	0x00d8
                           0000F9   285 _CH	=	0x00f9
                           0000E9   286 _CL	=	0x00e9
                           0000D9   287 _CMOD	=	0x00d9
                           0000A8   288 _IEN0	=	0x00a8
                           0000B1   289 _IEN1	=	0x00b1
                           0000B8   290 _IPL0	=	0x00b8
                           0000B7   291 _IPH0	=	0x00b7
                           0000B2   292 _IPL1	=	0x00b2
                           0000B3   293 _IPH1	=	0x00b3
                           0000C0   294 _P4	=	0x00c0
                           0000E8   295 _P5	=	0x00e8
                           0000A6   296 _WDTRST	=	0x00a6
                           0000A7   297 _WDTPRG	=	0x00a7
                           0000A9   298 _SADDR	=	0x00a9
                           0000B9   299 _SADEN	=	0x00b9
                           0000C3   300 _SPCON	=	0x00c3
                           0000C4   301 _SPSTA	=	0x00c4
                           0000C5   302 _SPDAT	=	0x00c5
                           0000C9   303 _T2MOD	=	0x00c9
                           00009B   304 _BDRCON	=	0x009b
                           00009A   305 _BRL	=	0x009a
                           00009C   306 _KBLS	=	0x009c
                           00009D   307 _KBE	=	0x009d
                           00009E   308 _KBF	=	0x009e
                           0000D2   309 _EECON	=	0x00d2
                           000080   310 _P0	=	0x0080
                           000081   311 _SP	=	0x0081
                           000082   312 _DPL	=	0x0082
                           000083   313 _DPH	=	0x0083
                           000087   314 _PCON	=	0x0087
                           000088   315 _TCON	=	0x0088
                           000089   316 _TMOD	=	0x0089
                           00008A   317 _TL0	=	0x008a
                           00008B   318 _TL1	=	0x008b
                           00008C   319 _TH0	=	0x008c
                           00008D   320 _TH1	=	0x008d
                           000090   321 _P1	=	0x0090
                           000098   322 _SCON	=	0x0098
                           000099   323 _SBUF	=	0x0099
                           0000A0   324 _P2	=	0x00a0
                           0000A8   325 _IE	=	0x00a8
                           0000B0   326 _P3	=	0x00b0
                           0000B8   327 _IP	=	0x00b8
                           0000D0   328 _PSW	=	0x00d0
                           0000E0   329 _ACC	=	0x00e0
                           0000F0   330 _B	=	0x00f0
                                    331 ;--------------------------------------------------------
                                    332 ; special function bits
                                    333 ;--------------------------------------------------------
                                    334 	.area RSEG    (ABS,DATA)
      000000                        335 	.org 0x0000
                           0000AD   336 _ET2	=	0x00ad
                           0000BD   337 _PT2	=	0x00bd
                           0000C8   338 _T2CON_0	=	0x00c8
                           0000C9   339 _T2CON_1	=	0x00c9
                           0000CA   340 _T2CON_2	=	0x00ca
                           0000CB   341 _T2CON_3	=	0x00cb
                           0000CC   342 _T2CON_4	=	0x00cc
                           0000CD   343 _T2CON_5	=	0x00cd
                           0000CE   344 _T2CON_6	=	0x00ce
                           0000CF   345 _T2CON_7	=	0x00cf
                           0000C8   346 _CP_RL2	=	0x00c8
                           0000C9   347 _C_T2	=	0x00c9
                           0000CA   348 _TR2	=	0x00ca
                           0000CB   349 _EXEN2	=	0x00cb
                           0000CC   350 _TCLK	=	0x00cc
                           0000CD   351 _RCLK	=	0x00cd
                           0000CE   352 _EXF2	=	0x00ce
                           0000CF   353 _TF2	=	0x00cf
                           0000DF   354 _CF	=	0x00df
                           0000DE   355 _CR	=	0x00de
                           0000DC   356 _CCF4	=	0x00dc
                           0000DB   357 _CCF3	=	0x00db
                           0000DA   358 _CCF2	=	0x00da
                           0000D9   359 _CCF1	=	0x00d9
                           0000D8   360 _CCF0	=	0x00d8
                           0000AE   361 _EC	=	0x00ae
                           0000BE   362 _PPCL	=	0x00be
                           0000BD   363 _PT2L	=	0x00bd
                           0000BC   364 _PSL	=	0x00bc
                           0000BB   365 _PT1L	=	0x00bb
                           0000BA   366 _PX1L	=	0x00ba
                           0000B9   367 _PT0L	=	0x00b9
                           0000B8   368 _PX0L	=	0x00b8
                           0000C0   369 _P4_0	=	0x00c0
                           0000C1   370 _P4_1	=	0x00c1
                           0000C2   371 _P4_2	=	0x00c2
                           0000C3   372 _P4_3	=	0x00c3
                           0000C4   373 _P4_4	=	0x00c4
                           0000C5   374 _P4_5	=	0x00c5
                           0000C6   375 _P4_6	=	0x00c6
                           0000C7   376 _P4_7	=	0x00c7
                           0000E8   377 _P5_0	=	0x00e8
                           0000E9   378 _P5_1	=	0x00e9
                           0000EA   379 _P5_2	=	0x00ea
                           0000EB   380 _P5_3	=	0x00eb
                           0000EC   381 _P5_4	=	0x00ec
                           0000ED   382 _P5_5	=	0x00ed
                           0000EE   383 _P5_6	=	0x00ee
                           0000EF   384 _P5_7	=	0x00ef
                           000080   385 _P0_0	=	0x0080
                           000081   386 _P0_1	=	0x0081
                           000082   387 _P0_2	=	0x0082
                           000083   388 _P0_3	=	0x0083
                           000084   389 _P0_4	=	0x0084
                           000085   390 _P0_5	=	0x0085
                           000086   391 _P0_6	=	0x0086
                           000087   392 _P0_7	=	0x0087
                           000088   393 _IT0	=	0x0088
                           000089   394 _IE0	=	0x0089
                           00008A   395 _IT1	=	0x008a
                           00008B   396 _IE1	=	0x008b
                           00008C   397 _TR0	=	0x008c
                           00008D   398 _TF0	=	0x008d
                           00008E   399 _TR1	=	0x008e
                           00008F   400 _TF1	=	0x008f
                           000090   401 _P1_0	=	0x0090
                           000091   402 _P1_1	=	0x0091
                           000092   403 _P1_2	=	0x0092
                           000093   404 _P1_3	=	0x0093
                           000094   405 _P1_4	=	0x0094
                           000095   406 _P1_5	=	0x0095
                           000096   407 _P1_6	=	0x0096
                           000097   408 _P1_7	=	0x0097
                           000098   409 _RI	=	0x0098
                           000099   410 _TI	=	0x0099
                           00009A   411 _RB8	=	0x009a
                           00009B   412 _TB8	=	0x009b
                           00009C   413 _REN	=	0x009c
                           00009D   414 _SM2	=	0x009d
                           00009E   415 _SM1	=	0x009e
                           00009F   416 _SM0	=	0x009f
                           0000A0   417 _P2_0	=	0x00a0
                           0000A1   418 _P2_1	=	0x00a1
                           0000A2   419 _P2_2	=	0x00a2
                           0000A3   420 _P2_3	=	0x00a3
                           0000A4   421 _P2_4	=	0x00a4
                           0000A5   422 _P2_5	=	0x00a5
                           0000A6   423 _P2_6	=	0x00a6
                           0000A7   424 _P2_7	=	0x00a7
                           0000A8   425 _EX0	=	0x00a8
                           0000A9   426 _ET0	=	0x00a9
                           0000AA   427 _EX1	=	0x00aa
                           0000AB   428 _ET1	=	0x00ab
                           0000AC   429 _ES	=	0x00ac
                           0000AF   430 _EA	=	0x00af
                           0000B0   431 _P3_0	=	0x00b0
                           0000B1   432 _P3_1	=	0x00b1
                           0000B2   433 _P3_2	=	0x00b2
                           0000B3   434 _P3_3	=	0x00b3
                           0000B4   435 _P3_4	=	0x00b4
                           0000B5   436 _P3_5	=	0x00b5
                           0000B6   437 _P3_6	=	0x00b6
                           0000B7   438 _P3_7	=	0x00b7
                           0000B0   439 _RXD	=	0x00b0
                           0000B1   440 _TXD	=	0x00b1
                           0000B2   441 _INT0	=	0x00b2
                           0000B3   442 _INT1	=	0x00b3
                           0000B4   443 _T0	=	0x00b4
                           0000B5   444 _T1	=	0x00b5
                           0000B6   445 _WR	=	0x00b6
                           0000B7   446 _RD	=	0x00b7
                           0000B8   447 _PX0	=	0x00b8
                           0000B9   448 _PT0	=	0x00b9
                           0000BA   449 _PX1	=	0x00ba
                           0000BB   450 _PT1	=	0x00bb
                           0000BC   451 _PS	=	0x00bc
                           0000D0   452 _P	=	0x00d0
                           0000D1   453 _F1	=	0x00d1
                           0000D2   454 _OV	=	0x00d2
                           0000D3   455 _RS0	=	0x00d3
                           0000D4   456 _RS1	=	0x00d4
                           0000D5   457 _F0	=	0x00d5
                           0000D6   458 _AC	=	0x00d6
                           0000D7   459 _CY	=	0x00d7
                                    460 ;--------------------------------------------------------
                                    461 ; overlayable register banks
                                    462 ;--------------------------------------------------------
                                    463 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        464 	.ds 8
                                    465 ;--------------------------------------------------------
                                    466 ; internal ram data
                                    467 ;--------------------------------------------------------
                                    468 	.area DSEG    (DATA)
      000000                        469 _dotmatrix_send_sloc0_1_0:
      000000                        470 	.ds 2
      000002                        471 _display_explosion_pattern_sloc0_1_0:
      000002                        472 	.ds 2
      000004                        473 _display_explosion_pattern_sloc1_1_0:
      000004                        474 	.ds 2
      000006                        475 _display_explosion_pattern_sloc2_1_0:
      000006                        476 	.ds 3
      000009                        477 _display_character_sloc0_1_0:
      000009                        478 	.ds 1
      00000A                        479 _display_character_sloc1_1_0:
      00000A                        480 	.ds 1
      00000B                        481 _display_character_sloc2_1_0:
      00000B                        482 	.ds 1
                                    483 ;--------------------------------------------------------
                                    484 ; overlayable items in internal ram 
                                    485 ;--------------------------------------------------------
                                    486 ;--------------------------------------------------------
                                    487 ; indirectly addressable internal ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area ISEG    (DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; absolute internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area IABS    (ABS,DATA)
                                    494 	.area IABS    (ABS,DATA)
                                    495 ;--------------------------------------------------------
                                    496 ; bit data
                                    497 ;--------------------------------------------------------
                                    498 	.area BSEG    (BIT)
                                    499 ;--------------------------------------------------------
                                    500 ; paged external ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area PSEG    (PAG,XDATA)
                                    503 ;--------------------------------------------------------
                                    504 ; external ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area XSEG    (XDATA)
      000000                        507 _setGameState_state_65536_25:
      000000                        508 	.ds 1
      000001                        509 _get_unit_y_65536_27:
      000001                        510 	.ds 1
      000002                        511 _get_display_x_65536_29:
      000002                        512 	.ds 1
      000003                        513 _dotmatrix_send_PARM_2:
      000003                        514 	.ds 1
      000004                        515 _dotmatrix_send_PARM_3:
      000004                        516 	.ds 1
      000005                        517 _dotmatrix_send_PARM_4:
      000005                        518 	.ds 1
      000006                        519 _dotmatrix_send_address_65536_33:
      000006                        520 	.ds 1
      000007                        521 _dotmatrix_send_whole_data_262144_39:
      000007                        522 	.ds 2
      000009                        523 _move_p1controller_down_start_pos_d1_65536_53:
      000009                        524 	.ds 1
      00000A                        525 _move_p1controller_down_start_pos_d2_65536_53:
      00000A                        526 	.ds 1
      00000B                        527 _move_p2controller_down_start_pos_d1_65536_62:
      00000B                        528 	.ds 1
      00000C                        529 _move_p2controller_down_start_pos_d2_65536_62:
      00000C                        530 	.ds 1
      00000D                        531 _erase_ball_data_to_send_65537_89:
      00000D                        532 	.ds 1
      00000E                        533 _draw_ball_data_to_send_65538_94:
      00000E                        534 	.ds 1
      00000F                        535 _change_ball_PARM_2:
      00000F                        536 	.ds 1
      000010                        537 _change_ball_x_65536_101:
      000010                        538 	.ds 1
      000011                        539 _display_explosion_pattern_pattern_65536_115:
      000011                        540 	.ds 3
      000014                        541 _display_character_PARM_2:
      000014                        542 	.ds 1
      000015                        543 _display_character_PARM_3:
      000015                        544 	.ds 1
      000016                        545 _display_character_character_65536_121:
      000016                        546 	.ds 3
      000019                        547 _display_explosion_player_65536_134:
      000019                        548 	.ds 1
      00001A                        549 _score_to_binary_score_65536_145:
      00001A                        550 	.ds 1
      00001B                        551 _score_to_binary_binary_representation_65536_146:
      00001B                        552 	.ds 1
      00001C                        553 _shift_data_data_65536_150:
      00001C                        554 	.ds 1
      00001D                        555 _shift_data_whole_data_65537_152:
      00001D                        556 	.ds 1
                                    557 ;--------------------------------------------------------
                                    558 ; absolute external ram data
                                    559 ;--------------------------------------------------------
                                    560 	.area XABS    (ABS,XDATA)
                                    561 ;--------------------------------------------------------
                                    562 ; external initialized ram data
                                    563 ;--------------------------------------------------------
                                    564 	.area XISEG   (XDATA)
      000000                        565 _game_status:
      000000                        566 	.ds 1
      000001                        567 _letter_G::
      000001                        568 	.ds 8
      000009                        569 _letter_A::
      000009                        570 	.ds 8
      000011                        571 _letter_M::
      000011                        572 	.ds 8
      000019                        573 _letter_E::
      000019                        574 	.ds 8
      000021                        575 _letter_O::
      000021                        576 	.ds 8
      000029                        577 _letter_V::
      000029                        578 	.ds 8
      000031                        579 _letter_R::
      000031                        580 	.ds 8
      000039                        581 _letter_P::
      000039                        582 	.ds 8
      000041                        583 _number_1::
      000041                        584 	.ds 8
      000049                        585 _number_2::
      000049                        586 	.ds 8
      000051                        587 _letter_W::
      000051                        588 	.ds 8
      000059                        589 _letter_N::
      000059                        590 	.ds 8
      000061                        591 _explosion_small::
      000061                        592 	.ds 16
      000071                        593 _explosion_large::
      000071                        594 	.ds 16
      000081                        595 _current_row_location_of_player1::
      000081                        596 	.ds 1
      000082                        597 _current_row_location_of_player2::
      000082                        598 	.ds 1
      000083                        599 _b_y:
      000083                        600 	.ds 1
      000084                        601 _b_x:
      000084                        602 	.ds 1
      000085                        603 _direction_x:
      000085                        604 	.ds 1
      000086                        605 _direction_y:
      000086                        606 	.ds 1
      000087                        607 _player_points::
      000087                        608 	.ds 2
                                    609 	.area HOME    (CODE)
                                    610 	.area GSINIT0 (CODE)
                                    611 	.area GSINIT1 (CODE)
                                    612 	.area GSINIT2 (CODE)
                                    613 	.area GSINIT3 (CODE)
                                    614 	.area GSINIT4 (CODE)
                                    615 	.area GSINIT5 (CODE)
                                    616 	.area GSINIT  (CODE)
                                    617 	.area GSFINAL (CODE)
                                    618 	.area CSEG    (CODE)
                                    619 ;--------------------------------------------------------
                                    620 ; global & static initialisations
                                    621 ;--------------------------------------------------------
                                    622 	.area HOME    (CODE)
                                    623 	.area GSINIT  (CODE)
                                    624 	.area GSFINAL (CODE)
                                    625 	.area GSINIT  (CODE)
                                    626 ;--------------------------------------------------------
                                    627 ; Home
                                    628 ;--------------------------------------------------------
                                    629 	.area HOME    (CODE)
                                    630 	.area HOME    (CODE)
                                    631 ;--------------------------------------------------------
                                    632 ; code
                                    633 ;--------------------------------------------------------
                                    634 	.area CSEG    (CODE)
                                    635 ;------------------------------------------------------------
                                    636 ;Allocation info for local variables in function 'getGameState'
                                    637 ;------------------------------------------------------------
                                    638 ;	dotmatrix.c:26: game_state_t getGameState()
                                    639 ;	-----------------------------------------
                                    640 ;	 function getGameState
                                    641 ;	-----------------------------------------
      000000                        642 _getGameState:
                           000007   643 	ar7 = 0x07
                           000006   644 	ar6 = 0x06
                           000005   645 	ar5 = 0x05
                           000004   646 	ar4 = 0x04
                           000003   647 	ar3 = 0x03
                           000002   648 	ar2 = 0x02
                           000001   649 	ar1 = 0x01
                           000000   650 	ar0 = 0x00
                                    651 ;	dotmatrix.c:28: return game_status;
      000000 90r00r00         [24]  652 	mov	dptr,#_game_status
      000003 E0               [24]  653 	movx	a,@dptr
                                    654 ;	dotmatrix.c:29: }
      000004 F5 82            [12]  655 	mov	dpl,a
      000006 22               [24]  656 	ret
                                    657 ;------------------------------------------------------------
                                    658 ;Allocation info for local variables in function 'setGameState'
                                    659 ;------------------------------------------------------------
                                    660 ;state                     Allocated with name '_setGameState_state_65536_25'
                                    661 ;------------------------------------------------------------
                                    662 ;	dotmatrix.c:31: void setGameState(game_state_t state)
                                    663 ;	-----------------------------------------
                                    664 ;	 function setGameState
                                    665 ;	-----------------------------------------
      000007                        666 _setGameState:
      000007 E5 82            [12]  667 	mov	a,dpl
      000009 90r00r00         [24]  668 	mov	dptr,#_setGameState_state_65536_25
      00000C F0               [24]  669 	movx	@dptr,a
                                    670 ;	dotmatrix.c:33: game_status = state;
      00000D E0               [24]  671 	movx	a,@dptr
      00000E 90r00r00         [24]  672 	mov	dptr,#_game_status
      000011 F0               [24]  673 	movx	@dptr,a
                                    674 ;	dotmatrix.c:34: }
      000012 22               [24]  675 	ret
                                    676 ;------------------------------------------------------------
                                    677 ;Allocation info for local variables in function 'get_unit'
                                    678 ;------------------------------------------------------------
                                    679 ;y                         Allocated with name '_get_unit_y_65536_27'
                                    680 ;------------------------------------------------------------
                                    681 ;	dotmatrix.c:71: uint8_t get_unit(uint8_t y)
                                    682 ;	-----------------------------------------
                                    683 ;	 function get_unit
                                    684 ;	-----------------------------------------
      000013                        685 _get_unit:
      000013 E5 82            [12]  686 	mov	a,dpl
      000015 90r00r01         [24]  687 	mov	dptr,#_get_unit_y_65536_27
      000018 F0               [24]  688 	movx	@dptr,a
                                    689 ;	dotmatrix.c:73: return ((y - 1) >> 3) + 1;
      000019 E0               [24]  690 	movx	a,@dptr
      00001A FF               [12]  691 	mov	r7,a
      00001B 7E 00            [12]  692 	mov	r6,#0x00
      00001D 1F               [12]  693 	dec	r7
      00001E BF FF 01         [24]  694 	cjne	r7,#0xff,00103$
      000021 1E               [12]  695 	dec	r6
      000022                        696 00103$:
      000022 EE               [12]  697 	mov	a,r6
      000023 C4               [12]  698 	swap	a
      000024 23               [12]  699 	rl	a
      000025 CF               [12]  700 	xch	a,r7
      000026 C4               [12]  701 	swap	a
      000027 23               [12]  702 	rl	a
      000028 54 1F            [12]  703 	anl	a,#0x1f
      00002A 6F               [12]  704 	xrl	a,r7
      00002B CF               [12]  705 	xch	a,r7
      00002C 54 1F            [12]  706 	anl	a,#0x1f
      00002E CF               [12]  707 	xch	a,r7
      00002F 6F               [12]  708 	xrl	a,r7
      000030 CF               [12]  709 	xch	a,r7
      000031 30 E4 02         [24]  710 	jnb	acc.4,00104$
      000034 44 E0            [12]  711 	orl	a,#0xe0
      000036                        712 00104$:
      000036 0F               [12]  713 	inc	r7
      000037 8F 82            [24]  714 	mov	dpl,r7
                                    715 ;	dotmatrix.c:74: }
      000039 22               [24]  716 	ret
                                    717 ;------------------------------------------------------------
                                    718 ;Allocation info for local variables in function 'get_display'
                                    719 ;------------------------------------------------------------
                                    720 ;x                         Allocated with name '_get_display_x_65536_29'
                                    721 ;------------------------------------------------------------
                                    722 ;	dotmatrix.c:76: display_t get_display(uint8_t x)
                                    723 ;	-----------------------------------------
                                    724 ;	 function get_display
                                    725 ;	-----------------------------------------
      00003A                        726 _get_display:
      00003A E5 82            [12]  727 	mov	a,dpl
      00003C 90r00r02         [24]  728 	mov	dptr,#_get_display_x_65536_29
      00003F F0               [24]  729 	movx	@dptr,a
                                    730 ;	dotmatrix.c:78: return (x > EIGHT) ? DISPLAY2 : DISPLAY1;
      000040 E0               [24]  731 	movx	a,@dptr
      000041 24 F7            [12]  732 	add	a,#0xff - 0x08
      000043 50 06            [24]  733 	jnc	00103$
      000045 7E 01            [12]  734 	mov	r6,#0x01
      000047 7F 00            [12]  735 	mov	r7,#0x00
      000049 80 04            [24]  736 	sjmp	00104$
      00004B                        737 00103$:
      00004B 7E 00            [12]  738 	mov	r6,#0x00
      00004D 7F 00            [12]  739 	mov	r7,#0x00
      00004F                        740 00104$:
      00004F 8E 82            [24]  741 	mov	dpl,r6
                                    742 ;	dotmatrix.c:79: }
      000051 22               [24]  743 	ret
                                    744 ;------------------------------------------------------------
                                    745 ;Allocation info for local variables in function 'spi_init'
                                    746 ;------------------------------------------------------------
                                    747 ;	dotmatrix.c:81: void spi_init(void)
                                    748 ;	-----------------------------------------
                                    749 ;	 function spi_init
                                    750 ;	-----------------------------------------
      000052                        751 _spi_init:
                                    752 ;	dotmatrix.c:84: SS_HIGH;
                                    753 ;	assignBit
      000052 D2 91            [12]  754 	setb	_P1_1
                                    755 ;	dotmatrix.c:85: SS2_HIGH;
                                    756 ;	assignBit
      000054 D2 90            [12]  757 	setb	_P1_0
                                    758 ;	dotmatrix.c:86: LATCH_LOW;
                                    759 ;	assignBit
      000056 C2 80            [12]  760 	clr	_P0_0
                                    761 ;	dotmatrix.c:88: SPI_SCL_LOW;
                                    762 ;	assignBit
      000058 C2 96            [12]  763 	clr	_P1_6
                                    764 ;	dotmatrix.c:89: MOSI_LOW;
                                    765 ;	assignBit
      00005A C2 97            [12]  766 	clr	_P1_7
                                    767 ;	dotmatrix.c:90: }
      00005C 22               [24]  768 	ret
                                    769 ;------------------------------------------------------------
                                    770 ;Allocation info for local variables in function 'dotmatrix_send'
                                    771 ;------------------------------------------------------------
                                    772 ;sloc0                     Allocated with name '_dotmatrix_send_sloc0_1_0'
                                    773 ;data                      Allocated with name '_dotmatrix_send_PARM_2'
                                    774 ;slave                     Allocated with name '_dotmatrix_send_PARM_3'
                                    775 ;display_unit              Allocated with name '_dotmatrix_send_PARM_4'
                                    776 ;address                   Allocated with name '_dotmatrix_send_address_65536_33'
                                    777 ;j                         Allocated with name '_dotmatrix_send_j_131072_37'
                                    778 ;whole_data                Allocated with name '_dotmatrix_send_whole_data_262144_39'
                                    779 ;i                         Allocated with name '_dotmatrix_send_i_327680_40'
                                    780 ;i                         Allocated with name '_dotmatrix_send_i_327680_43'
                                    781 ;------------------------------------------------------------
                                    782 ;	dotmatrix.c:92: void dotmatrix_send(uint8_t address, uint8_t data, display_t slave, uint8_t display_unit)
                                    783 ;	-----------------------------------------
                                    784 ;	 function dotmatrix_send
                                    785 ;	-----------------------------------------
      00005D                        786 _dotmatrix_send:
      00005D E5 82            [12]  787 	mov	a,dpl
      00005F 90r00r06         [24]  788 	mov	dptr,#_dotmatrix_send_address_65536_33
      000062 F0               [24]  789 	movx	@dptr,a
                                    790 ;	dotmatrix.c:94: spi_init();
      000063 12r00r52         [24]  791 	lcall	_spi_init
                                    792 ;	dotmatrix.c:96: if (slave == DISPLAY1)
      000066 90r00r04         [24]  793 	mov	dptr,#_dotmatrix_send_PARM_3
      000069 E0               [24]  794 	movx	a,@dptr
      00006A FF               [12]  795 	mov	r7,a
      00006B E0               [24]  796 	movx	a,@dptr
      00006C 70 04            [24]  797 	jnz	00104$
                                    798 ;	dotmatrix.c:98: SS_LOW; // selecting Display1
                                    799 ;	assignBit
      00006E C2 91            [12]  800 	clr	_P1_1
      000070 80 05            [24]  801 	sjmp	00135$
      000072                        802 00104$:
                                    803 ;	dotmatrix.c:100: else if (slave == DISPLAY2)
      000072 BF 01 02         [24]  804 	cjne	r7,#0x01,00135$
                                    805 ;	dotmatrix.c:102: SS2_LOW; // selecting Display2
                                    806 ;	assignBit
      000075 C2 90            [12]  807 	clr	_P1_0
                                    808 ;	dotmatrix.c:105: for (int j = 1; j <= 4; j++)
      000077                        809 00135$:
      000077 90r00r06         [24]  810 	mov	dptr,#_dotmatrix_send_address_65536_33
      00007A E0               [24]  811 	movx	a,@dptr
      00007B FF               [12]  812 	mov	r7,a
      00007C 90r00r03         [24]  813 	mov	dptr,#_dotmatrix_send_PARM_2
      00007F E0               [24]  814 	movx	a,@dptr
      000080 FE               [12]  815 	mov	r6,a
      000081 90r00r05         [24]  816 	mov	dptr,#_dotmatrix_send_PARM_4
      000084 E0               [24]  817 	movx	a,@dptr
      000085 FD               [12]  818 	mov	r5,a
      000086 7B 01            [12]  819 	mov	r3,#0x01
      000088 7C 00            [12]  820 	mov	r4,#0x00
      00008A                        821 00122$:
      00008A C3               [12]  822 	clr	c
      00008B 74 04            [12]  823 	mov	a,#0x04
      00008D 9B               [12]  824 	subb	a,r3
      00008E 74 80            [12]  825 	mov	a,#(0x00 ^ 0x80)
      000090 8C F0            [24]  826 	mov	b,r4
      000092 63 F0 80         [24]  827 	xrl	b,#0x80
      000095 95 F0            [12]  828 	subb	a,b
      000097 50 03            [24]  829 	jnc	00172$
      000099 02r01r29         [24]  830 	ljmp	00114$
      00009C                        831 00172$:
                                    832 ;	dotmatrix.c:107: if (j == display_unit)
      00009C 8D 01            [24]  833 	mov	ar1,r5
      00009E 7A 00            [12]  834 	mov	r2,#0x00
      0000A0 EB               [12]  835 	mov	a,r3
      0000A1 B5 01 61         [24]  836 	cjne	a,ar1,00134$
      0000A4 EC               [12]  837 	mov	a,r4
      0000A5 B5 02 5D         [24]  838 	cjne	a,ar2,00134$
                                    839 ;	dotmatrix.c:109: uint16_t whole_data = (uint16_t)(((uint16_t)(address << EIGHT)) | data);
      0000A8 C0 05            [24]  840 	push	ar5
      0000AA 8F 01            [24]  841 	mov	ar1,r7
      0000AC 89 02            [24]  842 	mov	ar2,r1
      0000AE 79 00            [12]  843 	mov	r1,#0x00
      0000B0 8E 00            [24]  844 	mov	ar0,r6
      0000B2 7D 00            [12]  845 	mov	r5,#0x00
      0000B4 90r00r07         [24]  846 	mov	dptr,#_dotmatrix_send_whole_data_262144_39
      0000B7 E8               [12]  847 	mov	a,r0
      0000B8 49               [12]  848 	orl	a,r1
      0000B9 F0               [24]  849 	movx	@dptr,a
      0000BA ED               [12]  850 	mov	a,r5
      0000BB 4A               [12]  851 	orl	a,r2
      0000BC A3               [24]  852 	inc	dptr
      0000BD F0               [24]  853 	movx	@dptr,a
                                    854 ;	dotmatrix.c:111: for (int i = 0; i < SIXTEEN; i++)
      0000BE E4               [12]  855 	clr	a
      0000BF F5*00            [12]  856 	mov	_dotmatrix_send_sloc0_1_0,a
      0000C1 F5*01            [12]  857 	mov	(_dotmatrix_send_sloc0_1_0 + 1),a
                                    858 ;	dotmatrix.c:139: SS2_HIGH;
      0000C3 D0 05            [24]  859 	pop	ar5
                                    860 ;	dotmatrix.c:111: for (int i = 0; i < SIXTEEN; i++)
      0000C5                        861 00116$:
      0000C5 C3               [12]  862 	clr	c
      0000C6 E5*00            [12]  863 	mov	a,_dotmatrix_send_sloc0_1_0
      0000C8 94 10            [12]  864 	subb	a,#0x10
      0000CA E5*01            [12]  865 	mov	a,(_dotmatrix_send_sloc0_1_0 + 1)
      0000CC 64 80            [12]  866 	xrl	a,#0x80
      0000CE 94 80            [12]  867 	subb	a,#0x80
      0000D0 50 4F            [24]  868 	jnc	00123$
                                    869 ;	dotmatrix.c:113: if (whole_data & 0x8000)
      0000D2 90r00r07         [24]  870 	mov	dptr,#_dotmatrix_send_whole_data_262144_39
      0000D5 E0               [24]  871 	movx	a,@dptr
      0000D6 A3               [24]  872 	inc	dptr
      0000D7 E0               [24]  873 	movx	a,@dptr
      0000D8 30 E7 04         [24]  874 	jnb	acc.7,00107$
                                    875 ;	dotmatrix.c:114: MOSI_HIGH;
                                    876 ;	assignBit
      0000DB D2 97            [12]  877 	setb	_P1_7
      0000DD 80 02            [24]  878 	sjmp	00108$
      0000DF                        879 00107$:
                                    880 ;	dotmatrix.c:116: MOSI_LOW;
                                    881 ;	assignBit
      0000DF C2 97            [12]  882 	clr	_P1_7
      0000E1                        883 00108$:
                                    884 ;	dotmatrix.c:118: SPI_SCL_HIGH;
                                    885 ;	assignBit
      0000E1 D2 96            [12]  886 	setb	_P1_6
                                    887 ;	dotmatrix.c:119: SPI_SCL_LOW;
                                    888 ;	assignBit
      0000E3 C2 96            [12]  889 	clr	_P1_6
                                    890 ;	dotmatrix.c:121: whole_data <<= 1; // shifting one bit
      0000E5 90r00r07         [24]  891 	mov	dptr,#_dotmatrix_send_whole_data_262144_39
      0000E8 E0               [24]  892 	movx	a,@dptr
      0000E9 F9               [12]  893 	mov	r1,a
      0000EA A3               [24]  894 	inc	dptr
      0000EB E0               [24]  895 	movx	a,@dptr
      0000EC FA               [12]  896 	mov	r2,a
      0000ED E9               [12]  897 	mov	a,r1
      0000EE 29               [12]  898 	add	a,r1
      0000EF F9               [12]  899 	mov	r1,a
      0000F0 EA               [12]  900 	mov	a,r2
      0000F1 33               [12]  901 	rlc	a
      0000F2 FA               [12]  902 	mov	r2,a
      0000F3 90r00r07         [24]  903 	mov	dptr,#_dotmatrix_send_whole_data_262144_39
      0000F6 E9               [12]  904 	mov	a,r1
      0000F7 F0               [24]  905 	movx	@dptr,a
      0000F8 EA               [12]  906 	mov	a,r2
      0000F9 A3               [24]  907 	inc	dptr
      0000FA F0               [24]  908 	movx	@dptr,a
                                    909 ;	dotmatrix.c:111: for (int i = 0; i < SIXTEEN; i++)
      0000FB 05*00            [12]  910 	inc	_dotmatrix_send_sloc0_1_0
      0000FD E4               [12]  911 	clr	a
                                    912 ;	dotmatrix.c:127: for (int i = 0; i < SIXTEEN; i++)
      0000FE B5*00 C4         [24]  913 	cjne	a,_dotmatrix_send_sloc0_1_0,00116$
      000101 05*01            [12]  914 	inc	(_dotmatrix_send_sloc0_1_0 + 1)
      000103 80 C0            [24]  915 	sjmp	00116$
      000105                        916 00134$:
      000105 79 00            [12]  917 	mov	r1,#0x00
      000107 7A 00            [12]  918 	mov	r2,#0x00
      000109                        919 00119$:
      000109 C3               [12]  920 	clr	c
      00010A E9               [12]  921 	mov	a,r1
      00010B 94 10            [12]  922 	subb	a,#0x10
      00010D EA               [12]  923 	mov	a,r2
      00010E 64 80            [12]  924 	xrl	a,#0x80
      000110 94 80            [12]  925 	subb	a,#0x80
      000112 50 0D            [24]  926 	jnc	00123$
                                    927 ;	dotmatrix.c:130: MOSI_LOW;
                                    928 ;	assignBit
      000114 C2 97            [12]  929 	clr	_P1_7
                                    930 ;	dotmatrix.c:132: SPI_SCL_HIGH;
                                    931 ;	assignBit
      000116 D2 96            [12]  932 	setb	_P1_6
                                    933 ;	dotmatrix.c:133: SPI_SCL_LOW;
                                    934 ;	assignBit
      000118 C2 96            [12]  935 	clr	_P1_6
                                    936 ;	dotmatrix.c:127: for (int i = 0; i < SIXTEEN; i++)
      00011A 09               [12]  937 	inc	r1
      00011B B9 00 EB         [24]  938 	cjne	r1,#0x00,00119$
      00011E 0A               [12]  939 	inc	r2
      00011F 80 E8            [24]  940 	sjmp	00119$
      000121                        941 00123$:
                                    942 ;	dotmatrix.c:105: for (int j = 1; j <= 4; j++)
      000121 0B               [12]  943 	inc	r3
      000122 BB 00 01         [24]  944 	cjne	r3,#0x00,00180$
      000125 0C               [12]  945 	inc	r4
      000126                        946 00180$:
      000126 02r00r8A         [24]  947 	ljmp	00122$
      000129                        948 00114$:
                                    949 ;	dotmatrix.c:138: SS_HIGH;
                                    950 ;	assignBit
      000129 D2 91            [12]  951 	setb	_P1_1
                                    952 ;	dotmatrix.c:139: SS2_HIGH;
                                    953 ;	assignBit
      00012B D2 90            [12]  954 	setb	_P1_0
                                    955 ;	dotmatrix.c:140: }
      00012D 22               [24]  956 	ret
                                    957 ;------------------------------------------------------------
                                    958 ;Allocation info for local variables in function 'move_p1controller_up'
                                    959 ;------------------------------------------------------------
                                    960 ;how_much_pixel_in_d2      Allocated with name '_move_p1controller_up_how_much_pixel_in_d2_65536_45'
                                    961 ;how_much_pixel_in_d1      Allocated with name '_move_p1controller_up_how_much_pixel_in_d1_65536_45'
                                    962 ;start_pos_d1              Allocated with name '_move_p1controller_up_start_pos_d1_65536_45'
                                    963 ;temp_location_d2          Allocated with name '_move_p1controller_up_temp_location_d2_65536_45'
                                    964 ;i                         Allocated with name '_move_p1controller_up_i_196608_48'
                                    965 ;i                         Allocated with name '_move_p1controller_up_i_196608_50'
                                    966 ;------------------------------------------------------------
                                    967 ;	dotmatrix.c:142: void move_p1controller_up()
                                    968 ;	-----------------------------------------
                                    969 ;	 function move_p1controller_up
                                    970 ;	-----------------------------------------
      00012E                        971 _move_p1controller_up:
                                    972 ;	dotmatrix.c:146: if (current_row_location_of_player1 == 1)
      00012E 90r00r81         [24]  973 	mov	dptr,#_current_row_location_of_player1
      000131 E0               [24]  974 	movx	a,@dptr
      000132 FF               [12]  975 	mov	r7,a
      000133 BF 01 01         [24]  976 	cjne	r7,#0x01,00102$
                                    977 ;	dotmatrix.c:147: return;
      000136 22               [24]  978 	ret
      000137                        979 00102$:
                                    980 ;	dotmatrix.c:149: if (current_row_location_of_player1 >= 10)
      000137 90r00r81         [24]  981 	mov	dptr,#_current_row_location_of_player1
      00013A E0               [24]  982 	movx	a,@dptr
      00013B FF               [12]  983 	mov	r7,a
      00013C BF 0A 00         [24]  984 	cjne	r7,#0x0a,00162$
      00013F                        985 00162$:
      00013F 40 3F            [24]  986 	jc	00112$
                                    987 ;	dotmatrix.c:151: temp_location_d2 = current_row_location_of_player1 % MAX_LENGTH;
      000141 90r00r81         [24]  988 	mov	dptr,#_current_row_location_of_player1
      000144 E0               [24]  989 	movx	a,@dptr
      000145 FF               [12]  990 	mov	r7,a
      000146 53 07 07         [24]  991 	anl	ar7,#0x07
                                    992 ;	dotmatrix.c:152: dotmatrix_send(temp_location_d2 + 3, ZERO, DISPLAY2, PLAYER1_UNIT);
      000149 8F 06            [24]  993 	mov	ar6,r7
      00014B 0E               [12]  994 	inc	r6
      00014C 0E               [12]  995 	inc	r6
      00014D 0E               [12]  996 	inc	r6
      00014E 90r00r03         [24]  997 	mov	dptr,#_dotmatrix_send_PARM_2
      000151 E4               [12]  998 	clr	a
      000152 F0               [24]  999 	movx	@dptr,a
      000153 90r00r04         [24] 1000 	mov	dptr,#_dotmatrix_send_PARM_3
      000156 04               [12] 1001 	inc	a
      000157 F0               [24] 1002 	movx	@dptr,a
      000158 90r00r05         [24] 1003 	mov	dptr,#_dotmatrix_send_PARM_4
      00015B F0               [24] 1004 	movx	@dptr,a
      00015C 8E 82            [24] 1005 	mov	dpl,r6
      00015E C0 07            [24] 1006 	push	ar7
      000160 12r00r5D         [24] 1007 	lcall	_dotmatrix_send
      000163 D0 07            [24] 1008 	pop	ar7
                                   1009 ;	dotmatrix.c:154: temp_location_d2--;
      000165 1F               [12] 1010 	dec	r7
                                   1011 ;	dotmatrix.c:155: (current_row_location_of_player1) = (current_row_location_of_player1)-1;
      000166 90r00r81         [24] 1012 	mov	dptr,#_current_row_location_of_player1
      000169 E0               [24] 1013 	movx	a,@dptr
      00016A 14               [12] 1014 	dec	a
      00016B F0               [24] 1015 	movx	@dptr,a
                                   1016 ;	dotmatrix.c:157: dotmatrix_send(temp_location_d2, PLAYER1_ROW, DISPLAY2, PLAYER1_UNIT);
      00016C 90r00r03         [24] 1017 	mov	dptr,#_dotmatrix_send_PARM_2
      00016F 74 80            [12] 1018 	mov	a,#0x80
      000171 F0               [24] 1019 	movx	@dptr,a
      000172 90r00r04         [24] 1020 	mov	dptr,#_dotmatrix_send_PARM_3
      000175 23               [12] 1021 	rl	a
      000176 F0               [24] 1022 	movx	@dptr,a
      000177 90r00r05         [24] 1023 	mov	dptr,#_dotmatrix_send_PARM_4
      00017A F0               [24] 1024 	movx	@dptr,a
      00017B 8F 82            [24] 1025 	mov	dpl,r7
                                   1026 ;	dotmatrix.c:158: return;
      00017D 02r00r5D         [24] 1027 	ljmp	_dotmatrix_send
      000180                       1028 00112$:
                                   1029 ;	dotmatrix.c:160: else if (current_row_location_of_player1 <= 9 && current_row_location_of_player1 >= 6)
      000180 90r00r81         [24] 1030 	mov	dptr,#_current_row_location_of_player1
      000183 E0               [24] 1031 	movx	a,@dptr
      000184 FF               [12] 1032 	mov  r7,a
      000185 24 F6            [12] 1033 	add	a,#0xff - 0x09
      000187 50 03            [24] 1034 	jnc	00164$
      000189 02r02r7A         [24] 1035 	ljmp	00108$
      00018C                       1036 00164$:
      00018C 90r00r81         [24] 1037 	mov	dptr,#_current_row_location_of_player1
      00018F E0               [24] 1038 	movx	a,@dptr
      000190 FF               [12] 1039 	mov	r7,a
      000191 BF 06 00         [24] 1040 	cjne	r7,#0x06,00165$
      000194                       1041 00165$:
      000194 50 03            [24] 1042 	jnc	00166$
      000196 02r02r7A         [24] 1043 	ljmp	00108$
      000199                       1044 00166$:
                                   1045 ;	dotmatrix.c:162: how_much_pixel_in_d2 = (current_row_location_of_player1 + (PLAYER_LENGTH - 2)) - MAX_LENGTH;
      000199 90r00r81         [24] 1046 	mov	dptr,#_current_row_location_of_player1
      00019C E0               [24] 1047 	movx	a,@dptr
                                   1048 ;	dotmatrix.c:163: how_much_pixel_in_d1 = PLAYER_LENGTH - how_much_pixel_in_d2;
      00019D 24 FA            [12] 1049 	add	a,#0xfa
      00019F FF               [12] 1050 	mov	r7,a
      0001A0 FE               [12] 1051 	mov	r6,a
      0001A1 74 04            [12] 1052 	mov	a,#0x04
      0001A3 C3               [12] 1053 	clr	c
      0001A4 9E               [12] 1054 	subb	a,r6
      0001A5 FE               [12] 1055 	mov	r6,a
                                   1056 ;	dotmatrix.c:165: start_pos_d1 = current_row_location_of_player1 - 1;
      0001A6 E0               [24] 1057 	movx	a,@dptr
      0001A7 FD               [12] 1058 	mov	r5,a
      0001A8 1D               [12] 1059 	dec	r5
                                   1060 ;	dotmatrix.c:167: dotmatrix_send(((current_row_location_of_player1 + 3) % EIGHT), ZERO, DISPLAY2, PLAYER1_UNIT);
      0001A9 E0               [24] 1061 	movx	a,@dptr
      0001AA FC               [12] 1062 	mov	r4,a
      0001AB 7B 00            [12] 1063 	mov	r3,#0x00
      0001AD 74 03            [12] 1064 	mov	a,#0x03
      0001AF 2C               [12] 1065 	add	a,r4
      0001B0 FC               [12] 1066 	mov	r4,a
      0001B1 E4               [12] 1067 	clr	a
      0001B2 3B               [12] 1068 	addc	a,r3
      0001B3 FB               [12] 1069 	mov	r3,a
      0001B4 90r00r00         [24] 1070 	mov	dptr,#__modsint_PARM_2
      0001B7 74 08            [12] 1071 	mov	a,#0x08
      0001B9 F0               [24] 1072 	movx	@dptr,a
      0001BA E4               [12] 1073 	clr	a
      0001BB A3               [24] 1074 	inc	dptr
      0001BC F0               [24] 1075 	movx	@dptr,a
      0001BD 8C 82            [24] 1076 	mov	dpl,r4
      0001BF 8B 83            [24] 1077 	mov	dph,r3
      0001C1 C0 07            [24] 1078 	push	ar7
      0001C3 C0 06            [24] 1079 	push	ar6
      0001C5 C0 05            [24] 1080 	push	ar5
      0001C7 12r00r00         [24] 1081 	lcall	__modsint
      0001CA AB 82            [24] 1082 	mov	r3,dpl
      0001CC 90r00r03         [24] 1083 	mov	dptr,#_dotmatrix_send_PARM_2
      0001CF E4               [12] 1084 	clr	a
      0001D0 F0               [24] 1085 	movx	@dptr,a
      0001D1 90r00r04         [24] 1086 	mov	dptr,#_dotmatrix_send_PARM_3
      0001D4 04               [12] 1087 	inc	a
      0001D5 F0               [24] 1088 	movx	@dptr,a
      0001D6 90r00r05         [24] 1089 	mov	dptr,#_dotmatrix_send_PARM_4
      0001D9 F0               [24] 1090 	movx	@dptr,a
      0001DA 8B 82            [24] 1091 	mov	dpl,r3
      0001DC 12r00r5D         [24] 1092 	lcall	_dotmatrix_send
      0001DF D0 05            [24] 1093 	pop	ar5
      0001E1 D0 06            [24] 1094 	pop	ar6
      0001E3 D0 07            [24] 1095 	pop	ar7
                                   1096 ;	dotmatrix.c:168: current_row_location_of_player1--;
      0001E5 90r00r81         [24] 1097 	mov	dptr,#_current_row_location_of_player1
      0001E8 E0               [24] 1098 	movx	a,@dptr
      0001E9 14               [12] 1099 	dec	a
      0001EA F0               [24] 1100 	movx	@dptr,a
                                   1101 ;	dotmatrix.c:170: for (int i = 0; i < how_much_pixel_in_d1; i++)
      0001EB 7B 00            [12] 1102 	mov	r3,#0x00
      0001ED 7C 00            [12] 1103 	mov	r4,#0x00
      0001EF                       1104 00115$:
      0001EF 8E 01            [24] 1105 	mov	ar1,r6
      0001F1 7A 00            [12] 1106 	mov	r2,#0x00
      0001F3 C3               [12] 1107 	clr	c
      0001F4 EB               [12] 1108 	mov	a,r3
      0001F5 99               [12] 1109 	subb	a,r1
      0001F6 EC               [12] 1110 	mov	a,r4
      0001F7 64 80            [12] 1111 	xrl	a,#0x80
      0001F9 8A F0            [24] 1112 	mov	b,r2
      0001FB 63 F0 80         [24] 1113 	xrl	b,#0x80
      0001FE 95 F0            [12] 1114 	subb	a,b
      000200 50 37            [24] 1115 	jnc	00103$
                                   1116 ;	dotmatrix.c:172: dotmatrix_send(start_pos_d1 + i, PLAYER1_ROW, DISPLAY1, PLAYER1_UNIT);
      000202 8B 02            [24] 1117 	mov	ar2,r3
      000204 8D 01            [24] 1118 	mov	ar1,r5
      000206 EA               [12] 1119 	mov	a,r2
      000207 29               [12] 1120 	add	a,r1
      000208 FA               [12] 1121 	mov	r2,a
      000209 90r00r03         [24] 1122 	mov	dptr,#_dotmatrix_send_PARM_2
      00020C 74 80            [12] 1123 	mov	a,#0x80
      00020E F0               [24] 1124 	movx	@dptr,a
      00020F 90r00r04         [24] 1125 	mov	dptr,#_dotmatrix_send_PARM_3
      000212 E4               [12] 1126 	clr	a
      000213 F0               [24] 1127 	movx	@dptr,a
      000214 90r00r05         [24] 1128 	mov	dptr,#_dotmatrix_send_PARM_4
      000217 04               [12] 1129 	inc	a
      000218 F0               [24] 1130 	movx	@dptr,a
      000219 8A 82            [24] 1131 	mov	dpl,r2
      00021B C0 07            [24] 1132 	push	ar7
      00021D C0 06            [24] 1133 	push	ar6
      00021F C0 05            [24] 1134 	push	ar5
      000221 C0 04            [24] 1135 	push	ar4
      000223 C0 03            [24] 1136 	push	ar3
      000225 12r00r5D         [24] 1137 	lcall	_dotmatrix_send
      000228 D0 03            [24] 1138 	pop	ar3
      00022A D0 04            [24] 1139 	pop	ar4
      00022C D0 05            [24] 1140 	pop	ar5
      00022E D0 06            [24] 1141 	pop	ar6
      000230 D0 07            [24] 1142 	pop	ar7
                                   1143 ;	dotmatrix.c:170: for (int i = 0; i < how_much_pixel_in_d1; i++)
      000232 0B               [12] 1144 	inc	r3
      000233 BB 00 B9         [24] 1145 	cjne	r3,#0x00,00115$
      000236 0C               [12] 1146 	inc	r4
      000237 80 B6            [24] 1147 	sjmp	00115$
      000239                       1148 00103$:
                                   1149 ;	dotmatrix.c:175: for (int i = 0; i < (how_much_pixel_in_d2); i++)
      000239 7D 00            [12] 1150 	mov	r5,#0x00
      00023B 7E 00            [12] 1151 	mov	r6,#0x00
      00023D                       1152 00118$:
      00023D 8F 03            [24] 1153 	mov	ar3,r7
      00023F 7C 00            [12] 1154 	mov	r4,#0x00
      000241 C3               [12] 1155 	clr	c
      000242 ED               [12] 1156 	mov	a,r5
      000243 9B               [12] 1157 	subb	a,r3
      000244 EE               [12] 1158 	mov	a,r6
      000245 64 80            [12] 1159 	xrl	a,#0x80
      000247 8C F0            [24] 1160 	mov	b,r4
      000249 63 F0 80         [24] 1161 	xrl	b,#0x80
      00024C 95 F0            [12] 1162 	subb	a,b
      00024E 50 6B            [24] 1163 	jnc	00120$
                                   1164 ;	dotmatrix.c:177: dotmatrix_send(1 + i, PLAYER1_ROW, DISPLAY2, PLAYER1_UNIT);
      000250 8D 04            [24] 1165 	mov	ar4,r5
      000252 0C               [12] 1166 	inc	r4
      000253 90r00r03         [24] 1167 	mov	dptr,#_dotmatrix_send_PARM_2
      000256 74 80            [12] 1168 	mov	a,#0x80
      000258 F0               [24] 1169 	movx	@dptr,a
      000259 90r00r04         [24] 1170 	mov	dptr,#_dotmatrix_send_PARM_3
      00025C 23               [12] 1171 	rl	a
      00025D F0               [24] 1172 	movx	@dptr,a
      00025E 90r00r05         [24] 1173 	mov	dptr,#_dotmatrix_send_PARM_4
      000261 F0               [24] 1174 	movx	@dptr,a
      000262 8C 82            [24] 1175 	mov	dpl,r4
      000264 C0 07            [24] 1176 	push	ar7
      000266 C0 06            [24] 1177 	push	ar6
      000268 C0 05            [24] 1178 	push	ar5
      00026A 12r00r5D         [24] 1179 	lcall	_dotmatrix_send
      00026D D0 05            [24] 1180 	pop	ar5
      00026F D0 06            [24] 1181 	pop	ar6
      000271 D0 07            [24] 1182 	pop	ar7
                                   1183 ;	dotmatrix.c:175: for (int i = 0; i < (how_much_pixel_in_d2); i++)
      000273 0D               [12] 1184 	inc	r5
      000274 BD 00 C6         [24] 1185 	cjne	r5,#0x00,00118$
      000277 0E               [12] 1186 	inc	r6
      000278 80 C3            [24] 1187 	sjmp	00118$
      00027A                       1188 00108$:
                                   1189 ;	dotmatrix.c:180: else if (current_row_location_of_player1 <= 5)
      00027A 90r00r81         [24] 1190 	mov	dptr,#_current_row_location_of_player1
      00027D E0               [24] 1191 	movx	a,@dptr
      00027E FF               [12] 1192 	mov  r7,a
      00027F 24 FA            [12] 1193 	add	a,#0xff - 0x05
      000281 40 38            [24] 1194 	jc	00120$
                                   1195 ;	dotmatrix.c:182: dotmatrix_send(current_row_location_of_player1 + 3, ZERO, DISPLAY1, PLAYER1_UNIT);
      000283 90r00r81         [24] 1196 	mov	dptr,#_current_row_location_of_player1
      000286 E0               [24] 1197 	movx	a,@dptr
      000287 FF               [12] 1198 	mov	r7,a
      000288 0F               [12] 1199 	inc	r7
      000289 0F               [12] 1200 	inc	r7
      00028A 0F               [12] 1201 	inc	r7
      00028B 90r00r03         [24] 1202 	mov	dptr,#_dotmatrix_send_PARM_2
      00028E E4               [12] 1203 	clr	a
      00028F F0               [24] 1204 	movx	@dptr,a
      000290 90r00r04         [24] 1205 	mov	dptr,#_dotmatrix_send_PARM_3
      000293 F0               [24] 1206 	movx	@dptr,a
      000294 90r00r05         [24] 1207 	mov	dptr,#_dotmatrix_send_PARM_4
      000297 04               [12] 1208 	inc	a
      000298 F0               [24] 1209 	movx	@dptr,a
      000299 8F 82            [24] 1210 	mov	dpl,r7
      00029B 12r00r5D         [24] 1211 	lcall	_dotmatrix_send
                                   1212 ;	dotmatrix.c:183: (current_row_location_of_player1) = (current_row_location_of_player1)-1;
      00029E 90r00r81         [24] 1213 	mov	dptr,#_current_row_location_of_player1
      0002A1 E0               [24] 1214 	movx	a,@dptr
      0002A2 14               [12] 1215 	dec	a
      0002A3 F0               [24] 1216 	movx	@dptr,a
                                   1217 ;	dotmatrix.c:184: dotmatrix_send(current_row_location_of_player1, PLAYER1_ROW, DISPLAY1, PLAYER1_UNIT);
      0002A4 E0               [24] 1218 	movx	a,@dptr
      0002A5 FF               [12] 1219 	mov	r7,a
      0002A6 90r00r03         [24] 1220 	mov	dptr,#_dotmatrix_send_PARM_2
      0002A9 74 80            [12] 1221 	mov	a,#0x80
      0002AB F0               [24] 1222 	movx	@dptr,a
      0002AC 90r00r04         [24] 1223 	mov	dptr,#_dotmatrix_send_PARM_3
      0002AF E4               [12] 1224 	clr	a
      0002B0 F0               [24] 1225 	movx	@dptr,a
      0002B1 90r00r05         [24] 1226 	mov	dptr,#_dotmatrix_send_PARM_4
      0002B4 04               [12] 1227 	inc	a
      0002B5 F0               [24] 1228 	movx	@dptr,a
      0002B6 8F 82            [24] 1229 	mov	dpl,r7
                                   1230 ;	dotmatrix.c:186: }
      0002B8 02r00r5D         [24] 1231 	ljmp	_dotmatrix_send
      0002BB                       1232 00120$:
      0002BB 22               [24] 1233 	ret
                                   1234 ;------------------------------------------------------------
                                   1235 ;Allocation info for local variables in function 'move_p1controller_down'
                                   1236 ;------------------------------------------------------------
                                   1237 ;how_much_pixel_in_d2      Allocated with name '_move_p1controller_down_how_much_pixel_in_d2_65536_53'
                                   1238 ;how_much_pixel_in_d1      Allocated with name '_move_p1controller_down_how_much_pixel_in_d1_65536_53'
                                   1239 ;start_pos_d1              Allocated with name '_move_p1controller_down_start_pos_d1_65536_53'
                                   1240 ;start_pos_d2              Allocated with name '_move_p1controller_down_start_pos_d2_65536_53'
                                   1241 ;i                         Allocated with name '_move_p1controller_down_i_196608_57'
                                   1242 ;i                         Allocated with name '_move_p1controller_down_i_196608_59'
                                   1243 ;------------------------------------------------------------
                                   1244 ;	dotmatrix.c:188: void move_p1controller_down()
                                   1245 ;	-----------------------------------------
                                   1246 ;	 function move_p1controller_down
                                   1247 ;	-----------------------------------------
      0002BC                       1248 _move_p1controller_down:
                                   1249 ;	dotmatrix.c:193: if (current_row_location_of_player1 >= 5)
      0002BC 90r00r81         [24] 1250 	mov	dptr,#_current_row_location_of_player1
      0002BF E0               [24] 1251 	movx	a,@dptr
      0002C0 FF               [12] 1252 	mov	r7,a
      0002C1 BF 05 00         [24] 1253 	cjne	r7,#0x05,00173$
      0002C4                       1254 00173$:
      0002C4 50 03            [24] 1255 	jnc	00174$
      0002C6 02r04r28         [24] 1256 	ljmp	00111$
      0002C9                       1257 00174$:
                                   1258 ;	dotmatrix.c:195: if (current_row_location_of_player1 == 13)
      0002C9 90r00r81         [24] 1259 	mov	dptr,#_current_row_location_of_player1
      0002CC E0               [24] 1260 	movx	a,@dptr
      0002CD FF               [12] 1261 	mov	r7,a
      0002CE BF 0D 01         [24] 1262 	cjne	r7,#0x0d,00102$
                                   1263 ;	dotmatrix.c:196: return;
      0002D1 22               [24] 1264 	ret
      0002D2                       1265 00102$:
                                   1266 ;	dotmatrix.c:198: how_much_pixel_in_d2 = (current_row_location_of_player1 < 9) ? (current_row_location_of_player1 + (PLAYER_LENGTH)) - MAX_LENGTH : PLAYER_LENGTH;
      0002D2 90r00r81         [24] 1267 	mov	dptr,#_current_row_location_of_player1
      0002D5 E0               [24] 1268 	movx	a,@dptr
      0002D6 FF               [12] 1269 	mov	r7,a
      0002D7 BF 09 00         [24] 1270 	cjne	r7,#0x09,00177$
      0002DA                       1271 00177$:
      0002DA 50 0D            [24] 1272 	jnc	00121$
      0002DC 90r00r81         [24] 1273 	mov	dptr,#_current_row_location_of_player1
      0002DF E0               [24] 1274 	movx	a,@dptr
      0002E0 24 FC            [12] 1275 	add	a,#0xfc
      0002E2 FE               [12] 1276 	mov	r6,a
      0002E3 33               [12] 1277 	rlc	a
      0002E4 95 E0            [12] 1278 	subb	a,acc
      0002E6 FF               [12] 1279 	mov	r7,a
      0002E7 80 04            [24] 1280 	sjmp	00122$
      0002E9                       1281 00121$:
      0002E9 7E 04            [12] 1282 	mov	r6,#0x04
      0002EB 7F 00            [12] 1283 	mov	r7,#0x00
      0002ED                       1284 00122$:
                                   1285 ;	dotmatrix.c:200: how_much_pixel_in_d1 = PLAYER_LENGTH - how_much_pixel_in_d2;
      0002ED 8E 07            [24] 1286 	mov	ar7,r6
      0002EF 74 04            [12] 1287 	mov	a,#0x04
      0002F1 C3               [12] 1288 	clr	c
      0002F2 9F               [12] 1289 	subb	a,r7
      0002F3 FF               [12] 1290 	mov	r7,a
                                   1291 ;	dotmatrix.c:202: start_pos_d1 = (current_row_location_of_player1 <= EIGHT) ? current_row_location_of_player1 : EIGHT;
      0002F4 90r00r81         [24] 1292 	mov	dptr,#_current_row_location_of_player1
      0002F7 E0               [24] 1293 	movx	a,@dptr
      0002F8 24 F7            [12] 1294 	add	a,#0xff - 0x08
      0002FA 40 09            [24] 1295 	jc	00123$
      0002FC 90r00r81         [24] 1296 	mov	dptr,#_current_row_location_of_player1
      0002FF E0               [24] 1297 	movx	a,@dptr
      000300 FC               [12] 1298 	mov	r4,a
      000301 7D 00            [12] 1299 	mov	r5,#0x00
      000303 80 04            [24] 1300 	sjmp	00124$
      000305                       1301 00123$:
      000305 7C 08            [12] 1302 	mov	r4,#0x08
      000307 7D 00            [12] 1303 	mov	r5,#0x00
      000309                       1304 00124$:
      000309 90r00r09         [24] 1305 	mov	dptr,#_move_p1controller_down_start_pos_d1_65536_53
      00030C EC               [12] 1306 	mov	a,r4
      00030D F0               [24] 1307 	movx	@dptr,a
                                   1308 ;	dotmatrix.c:203: start_pos_d2 = (current_row_location_of_player1 > EIGHT) ? (current_row_location_of_player1 - MAX_LENGTH) : 1;
      00030E 90r00r81         [24] 1309 	mov	dptr,#_current_row_location_of_player1
      000311 E0               [24] 1310 	movx	a,@dptr
      000312 24 F7            [12] 1311 	add	a,#0xff - 0x08
      000314 50 0D            [24] 1312 	jnc	00125$
      000316 90r00r81         [24] 1313 	mov	dptr,#_current_row_location_of_player1
      000319 E0               [24] 1314 	movx	a,@dptr
      00031A 24 F8            [12] 1315 	add	a,#0xf8
      00031C FB               [12] 1316 	mov	r3,a
      00031D 33               [12] 1317 	rlc	a
      00031E 95 E0            [12] 1318 	subb	a,acc
      000320 FD               [12] 1319 	mov	r5,a
      000321 80 04            [24] 1320 	sjmp	00126$
      000323                       1321 00125$:
      000323 7B 01            [12] 1322 	mov	r3,#0x01
      000325 7D 00            [12] 1323 	mov	r5,#0x00
      000327                       1324 00126$:
      000327 90r00r0A         [24] 1325 	mov	dptr,#_move_p1controller_down_start_pos_d2_65536_53
      00032A EB               [12] 1326 	mov	a,r3
      00032B F0               [24] 1327 	movx	@dptr,a
                                   1328 ;	dotmatrix.c:205: if (current_row_location_of_player1 <= EIGHT)
      00032C 90r00r81         [24] 1329 	mov	dptr,#_current_row_location_of_player1
      00032F E0               [24] 1330 	movx	a,@dptr
      000330 24 F7            [12] 1331 	add	a,#0xff - 0x08
      000332 40 27            [24] 1332 	jc	00104$
                                   1333 ;	dotmatrix.c:207: dotmatrix_send(start_pos_d1, ZERO, DISPLAY1, PLAYER1_UNIT);
      000334 90r00r03         [24] 1334 	mov	dptr,#_dotmatrix_send_PARM_2
      000337 E4               [12] 1335 	clr	a
      000338 F0               [24] 1336 	movx	@dptr,a
      000339 90r00r04         [24] 1337 	mov	dptr,#_dotmatrix_send_PARM_3
      00033C F0               [24] 1338 	movx	@dptr,a
      00033D 90r00r05         [24] 1339 	mov	dptr,#_dotmatrix_send_PARM_4
      000340 04               [12] 1340 	inc	a
      000341 F0               [24] 1341 	movx	@dptr,a
      000342 8C 82            [24] 1342 	mov	dpl,r4
      000344 C0 07            [24] 1343 	push	ar7
      000346 C0 06            [24] 1344 	push	ar6
      000348 C0 04            [24] 1345 	push	ar4
      00034A 12r00r5D         [24] 1346 	lcall	_dotmatrix_send
      00034D D0 04            [24] 1347 	pop	ar4
      00034F D0 06            [24] 1348 	pop	ar6
      000351 D0 07            [24] 1349 	pop	ar7
                                   1350 ;	dotmatrix.c:208: start_pos_d1++;
      000353 90r00r09         [24] 1351 	mov	dptr,#_move_p1controller_down_start_pos_d1_65536_53
      000356 EC               [12] 1352 	mov	a,r4
      000357 04               [12] 1353 	inc	a
      000358 F0               [24] 1354 	movx	@dptr,a
      000359 80 25            [24] 1355 	sjmp	00105$
      00035B                       1356 00104$:
                                   1357 ;	dotmatrix.c:212: dotmatrix_send(start_pos_d2, ZERO, DISPLAY2, PLAYER1_UNIT);
      00035B 90r00r03         [24] 1358 	mov	dptr,#_dotmatrix_send_PARM_2
      00035E E4               [12] 1359 	clr	a
      00035F F0               [24] 1360 	movx	@dptr,a
      000360 90r00r04         [24] 1361 	mov	dptr,#_dotmatrix_send_PARM_3
      000363 04               [12] 1362 	inc	a
      000364 F0               [24] 1363 	movx	@dptr,a
      000365 90r00r05         [24] 1364 	mov	dptr,#_dotmatrix_send_PARM_4
      000368 F0               [24] 1365 	movx	@dptr,a
      000369 8B 82            [24] 1366 	mov	dpl,r3
      00036B C0 07            [24] 1367 	push	ar7
      00036D C0 06            [24] 1368 	push	ar6
      00036F C0 03            [24] 1369 	push	ar3
      000371 12r00r5D         [24] 1370 	lcall	_dotmatrix_send
      000374 D0 03            [24] 1371 	pop	ar3
      000376 D0 06            [24] 1372 	pop	ar6
      000378 D0 07            [24] 1373 	pop	ar7
                                   1374 ;	dotmatrix.c:213: start_pos_d2++;
      00037A 90r00r0A         [24] 1375 	mov	dptr,#_move_p1controller_down_start_pos_d2_65536_53
      00037D EB               [12] 1376 	mov	a,r3
      00037E 04               [12] 1377 	inc	a
      00037F F0               [24] 1378 	movx	@dptr,a
      000380                       1379 00105$:
                                   1380 ;	dotmatrix.c:216: current_row_location_of_player1 = current_row_location_of_player1 + 1;
      000380 90r00r81         [24] 1381 	mov	dptr,#_current_row_location_of_player1
      000383 E0               [24] 1382 	movx	a,@dptr
      000384 04               [12] 1383 	inc	a
      000385 F0               [24] 1384 	movx	@dptr,a
                                   1385 ;	dotmatrix.c:218: for (int i = 0; i < how_much_pixel_in_d1; i++)
      000386 90r00r09         [24] 1386 	mov	dptr,#_move_p1controller_down_start_pos_d1_65536_53
      000389 E0               [24] 1387 	movx	a,@dptr
      00038A FD               [12] 1388 	mov	r5,a
      00038B 7B 00            [12] 1389 	mov	r3,#0x00
      00038D 7C 00            [12] 1390 	mov	r4,#0x00
      00038F                       1391 00114$:
      00038F 8F 01            [24] 1392 	mov	ar1,r7
      000391 7A 00            [12] 1393 	mov	r2,#0x00
      000393 C3               [12] 1394 	clr	c
      000394 EB               [12] 1395 	mov	a,r3
      000395 99               [12] 1396 	subb	a,r1
      000396 EC               [12] 1397 	mov	a,r4
      000397 64 80            [12] 1398 	xrl	a,#0x80
      000399 8A F0            [24] 1399 	mov	b,r2
      00039B 63 F0 80         [24] 1400 	xrl	b,#0x80
      00039E 95 F0            [12] 1401 	subb	a,b
      0003A0 50 37            [24] 1402 	jnc	00106$
                                   1403 ;	dotmatrix.c:220: dotmatrix_send(start_pos_d1 + i, PLAYER1_ROW, DISPLAY1, PLAYER1_UNIT);
      0003A2 8B 02            [24] 1404 	mov	ar2,r3
      0003A4 8D 01            [24] 1405 	mov	ar1,r5
      0003A6 EA               [12] 1406 	mov	a,r2
      0003A7 29               [12] 1407 	add	a,r1
      0003A8 FA               [12] 1408 	mov	r2,a
      0003A9 90r00r03         [24] 1409 	mov	dptr,#_dotmatrix_send_PARM_2
      0003AC 74 80            [12] 1410 	mov	a,#0x80
      0003AE F0               [24] 1411 	movx	@dptr,a
      0003AF 90r00r04         [24] 1412 	mov	dptr,#_dotmatrix_send_PARM_3
      0003B2 E4               [12] 1413 	clr	a
      0003B3 F0               [24] 1414 	movx	@dptr,a
      0003B4 90r00r05         [24] 1415 	mov	dptr,#_dotmatrix_send_PARM_4
      0003B7 04               [12] 1416 	inc	a
      0003B8 F0               [24] 1417 	movx	@dptr,a
      0003B9 8A 82            [24] 1418 	mov	dpl,r2
      0003BB C0 07            [24] 1419 	push	ar7
      0003BD C0 06            [24] 1420 	push	ar6
      0003BF C0 05            [24] 1421 	push	ar5
      0003C1 C0 04            [24] 1422 	push	ar4
      0003C3 C0 03            [24] 1423 	push	ar3
      0003C5 12r00r5D         [24] 1424 	lcall	_dotmatrix_send
      0003C8 D0 03            [24] 1425 	pop	ar3
      0003CA D0 04            [24] 1426 	pop	ar4
      0003CC D0 05            [24] 1427 	pop	ar5
      0003CE D0 06            [24] 1428 	pop	ar6
      0003D0 D0 07            [24] 1429 	pop	ar7
                                   1430 ;	dotmatrix.c:218: for (int i = 0; i < how_much_pixel_in_d1; i++)
      0003D2 0B               [12] 1431 	inc	r3
      0003D3 BB 00 B9         [24] 1432 	cjne	r3,#0x00,00114$
      0003D6 0C               [12] 1433 	inc	r4
      0003D7 80 B6            [24] 1434 	sjmp	00114$
      0003D9                       1435 00106$:
                                   1436 ;	dotmatrix.c:223: for (int i = 0; i < how_much_pixel_in_d2; i++)
      0003D9 90r00r0A         [24] 1437 	mov	dptr,#_move_p1controller_down_start_pos_d2_65536_53
      0003DC E0               [24] 1438 	movx	a,@dptr
      0003DD FF               [12] 1439 	mov	r7,a
      0003DE 7C 00            [12] 1440 	mov	r4,#0x00
      0003E0 7D 00            [12] 1441 	mov	r5,#0x00
      0003E2                       1442 00117$:
      0003E2 8E 02            [24] 1443 	mov	ar2,r6
      0003E4 7B 00            [12] 1444 	mov	r3,#0x00
      0003E6 C3               [12] 1445 	clr	c
      0003E7 EC               [12] 1446 	mov	a,r4
      0003E8 9A               [12] 1447 	subb	a,r2
      0003E9 ED               [12] 1448 	mov	a,r5
      0003EA 64 80            [12] 1449 	xrl	a,#0x80
      0003EC 8B F0            [24] 1450 	mov	b,r3
      0003EE 63 F0 80         [24] 1451 	xrl	b,#0x80
      0003F1 95 F0            [12] 1452 	subb	a,b
      0003F3 40 01            [24] 1453 	jc	00184$
      0003F5 22               [24] 1454 	ret
      0003F6                       1455 00184$:
                                   1456 ;	dotmatrix.c:225: dotmatrix_send(start_pos_d2 + i, PLAYER1_ROW, DISPLAY2, PLAYER1_UNIT);
      0003F6 8C 03            [24] 1457 	mov	ar3,r4
      0003F8 8F 02            [24] 1458 	mov	ar2,r7
      0003FA EB               [12] 1459 	mov	a,r3
      0003FB 2A               [12] 1460 	add	a,r2
      0003FC FB               [12] 1461 	mov	r3,a
      0003FD 90r00r03         [24] 1462 	mov	dptr,#_dotmatrix_send_PARM_2
      000400 74 80            [12] 1463 	mov	a,#0x80
      000402 F0               [24] 1464 	movx	@dptr,a
      000403 90r00r04         [24] 1465 	mov	dptr,#_dotmatrix_send_PARM_3
      000406 23               [12] 1466 	rl	a
      000407 F0               [24] 1467 	movx	@dptr,a
      000408 90r00r05         [24] 1468 	mov	dptr,#_dotmatrix_send_PARM_4
      00040B F0               [24] 1469 	movx	@dptr,a
      00040C 8B 82            [24] 1470 	mov	dpl,r3
      00040E C0 07            [24] 1471 	push	ar7
      000410 C0 06            [24] 1472 	push	ar6
      000412 C0 05            [24] 1473 	push	ar5
      000414 C0 04            [24] 1474 	push	ar4
      000416 12r00r5D         [24] 1475 	lcall	_dotmatrix_send
      000419 D0 04            [24] 1476 	pop	ar4
      00041B D0 05            [24] 1477 	pop	ar5
      00041D D0 06            [24] 1478 	pop	ar6
      00041F D0 07            [24] 1479 	pop	ar7
                                   1480 ;	dotmatrix.c:223: for (int i = 0; i < how_much_pixel_in_d2; i++)
      000421 0C               [12] 1481 	inc	r4
      000422 BC 00 BD         [24] 1482 	cjne	r4,#0x00,00117$
      000425 0D               [12] 1483 	inc	r5
      000426 80 BA            [24] 1484 	sjmp	00117$
      000428                       1485 00111$:
                                   1486 ;	dotmatrix.c:230: if (current_row_location_of_player1 == 5)
      000428 90r00r81         [24] 1487 	mov	dptr,#_current_row_location_of_player1
      00042B E0               [24] 1488 	movx	a,@dptr
      00042C FF               [12] 1489 	mov	r7,a
      00042D BF 05 01         [24] 1490 	cjne	r7,#0x05,00109$
                                   1491 ;	dotmatrix.c:231: return;
      000430 22               [24] 1492 	ret
      000431                       1493 00109$:
                                   1494 ;	dotmatrix.c:232: dotmatrix_send(current_row_location_of_player1, ZERO, DISPLAY1, PLAYER1_UNIT);
      000431 90r00r81         [24] 1495 	mov	dptr,#_current_row_location_of_player1
      000434 E0               [24] 1496 	movx	a,@dptr
      000435 FF               [12] 1497 	mov	r7,a
      000436 90r00r03         [24] 1498 	mov	dptr,#_dotmatrix_send_PARM_2
      000439 E4               [12] 1499 	clr	a
      00043A F0               [24] 1500 	movx	@dptr,a
      00043B 90r00r04         [24] 1501 	mov	dptr,#_dotmatrix_send_PARM_3
      00043E F0               [24] 1502 	movx	@dptr,a
      00043F 90r00r05         [24] 1503 	mov	dptr,#_dotmatrix_send_PARM_4
      000442 04               [12] 1504 	inc	a
      000443 F0               [24] 1505 	movx	@dptr,a
      000444 8F 82            [24] 1506 	mov	dpl,r7
      000446 12r00r5D         [24] 1507 	lcall	_dotmatrix_send
                                   1508 ;	dotmatrix.c:233: (current_row_location_of_player1) = (current_row_location_of_player1) + 1;
      000449 90r00r81         [24] 1509 	mov	dptr,#_current_row_location_of_player1
      00044C E0               [24] 1510 	movx	a,@dptr
      00044D 04               [12] 1511 	inc	a
      00044E F0               [24] 1512 	movx	@dptr,a
                                   1513 ;	dotmatrix.c:234: dotmatrix_send(current_row_location_of_player1 + 3, PLAYER1_ROW, DISPLAY1, PLAYER1_UNIT);
      00044F E0               [24] 1514 	movx	a,@dptr
      000450 FF               [12] 1515 	mov	r7,a
      000451 0F               [12] 1516 	inc	r7
      000452 0F               [12] 1517 	inc	r7
      000453 0F               [12] 1518 	inc	r7
      000454 90r00r03         [24] 1519 	mov	dptr,#_dotmatrix_send_PARM_2
      000457 74 80            [12] 1520 	mov	a,#0x80
      000459 F0               [24] 1521 	movx	@dptr,a
      00045A 90r00r04         [24] 1522 	mov	dptr,#_dotmatrix_send_PARM_3
      00045D E4               [12] 1523 	clr	a
      00045E F0               [24] 1524 	movx	@dptr,a
      00045F 90r00r05         [24] 1525 	mov	dptr,#_dotmatrix_send_PARM_4
      000462 04               [12] 1526 	inc	a
      000463 F0               [24] 1527 	movx	@dptr,a
      000464 8F 82            [24] 1528 	mov	dpl,r7
                                   1529 ;	dotmatrix.c:236: }
      000466 02r00r5D         [24] 1530 	ljmp	_dotmatrix_send
                                   1531 ;------------------------------------------------------------
                                   1532 ;Allocation info for local variables in function 'move_p2controller_down'
                                   1533 ;------------------------------------------------------------
                                   1534 ;how_much_pixel_in_d2      Allocated with name '_move_p2controller_down_how_much_pixel_in_d2_65536_62'
                                   1535 ;how_much_pixel_in_d1      Allocated with name '_move_p2controller_down_how_much_pixel_in_d1_65536_62'
                                   1536 ;start_pos_d1              Allocated with name '_move_p2controller_down_start_pos_d1_65536_62'
                                   1537 ;start_pos_d2              Allocated with name '_move_p2controller_down_start_pos_d2_65536_62'
                                   1538 ;i                         Allocated with name '_move_p2controller_down_i_196608_66'
                                   1539 ;i                         Allocated with name '_move_p2controller_down_i_196608_68'
                                   1540 ;------------------------------------------------------------
                                   1541 ;	dotmatrix.c:238: void move_p2controller_down()
                                   1542 ;	-----------------------------------------
                                   1543 ;	 function move_p2controller_down
                                   1544 ;	-----------------------------------------
      000469                       1545 _move_p2controller_down:
                                   1546 ;	dotmatrix.c:242: if (current_row_location_of_player2 >= 5)
      000469 90r00r82         [24] 1547 	mov	dptr,#_current_row_location_of_player2
      00046C E0               [24] 1548 	movx	a,@dptr
      00046D FF               [12] 1549 	mov	r7,a
      00046E BF 05 00         [24] 1550 	cjne	r7,#0x05,00173$
      000471                       1551 00173$:
      000471 50 03            [24] 1552 	jnc	00174$
      000473 02r05rDA         [24] 1553 	ljmp	00111$
      000476                       1554 00174$:
                                   1555 ;	dotmatrix.c:244: if (current_row_location_of_player2 == 13)
      000476 90r00r82         [24] 1556 	mov	dptr,#_current_row_location_of_player2
      000479 E0               [24] 1557 	movx	a,@dptr
      00047A FF               [12] 1558 	mov	r7,a
      00047B BF 0D 01         [24] 1559 	cjne	r7,#0x0d,00102$
                                   1560 ;	dotmatrix.c:245: return;
      00047E 22               [24] 1561 	ret
      00047F                       1562 00102$:
                                   1563 ;	dotmatrix.c:247: how_much_pixel_in_d2 = (current_row_location_of_player2 < 9) ? (current_row_location_of_player2 + (PLAYER_LENGTH)) - MAX_LENGTH : PLAYER_LENGTH;
      00047F 90r00r82         [24] 1564 	mov	dptr,#_current_row_location_of_player2
      000482 E0               [24] 1565 	movx	a,@dptr
      000483 FF               [12] 1566 	mov	r7,a
      000484 BF 09 00         [24] 1567 	cjne	r7,#0x09,00177$
      000487                       1568 00177$:
      000487 50 0D            [24] 1569 	jnc	00121$
      000489 90r00r82         [24] 1570 	mov	dptr,#_current_row_location_of_player2
      00048C E0               [24] 1571 	movx	a,@dptr
      00048D 24 FC            [12] 1572 	add	a,#0xfc
      00048F FE               [12] 1573 	mov	r6,a
      000490 33               [12] 1574 	rlc	a
      000491 95 E0            [12] 1575 	subb	a,acc
      000493 FF               [12] 1576 	mov	r7,a
      000494 80 04            [24] 1577 	sjmp	00122$
      000496                       1578 00121$:
      000496 7E 04            [12] 1579 	mov	r6,#0x04
      000498 7F 00            [12] 1580 	mov	r7,#0x00
      00049A                       1581 00122$:
                                   1582 ;	dotmatrix.c:249: how_much_pixel_in_d1 = PLAYER_LENGTH - how_much_pixel_in_d2;
      00049A 8E 07            [24] 1583 	mov	ar7,r6
      00049C 74 04            [12] 1584 	mov	a,#0x04
      00049E C3               [12] 1585 	clr	c
      00049F 9F               [12] 1586 	subb	a,r7
      0004A0 FF               [12] 1587 	mov	r7,a
                                   1588 ;	dotmatrix.c:251: start_pos_d1 = (current_row_location_of_player2 <= EIGHT) ? current_row_location_of_player2 : EIGHT;
      0004A1 90r00r82         [24] 1589 	mov	dptr,#_current_row_location_of_player2
      0004A4 E0               [24] 1590 	movx	a,@dptr
      0004A5 24 F7            [12] 1591 	add	a,#0xff - 0x08
      0004A7 40 09            [24] 1592 	jc	00123$
      0004A9 90r00r82         [24] 1593 	mov	dptr,#_current_row_location_of_player2
      0004AC E0               [24] 1594 	movx	a,@dptr
      0004AD FC               [12] 1595 	mov	r4,a
      0004AE 7D 00            [12] 1596 	mov	r5,#0x00
      0004B0 80 04            [24] 1597 	sjmp	00124$
      0004B2                       1598 00123$:
      0004B2 7C 08            [12] 1599 	mov	r4,#0x08
      0004B4 7D 00            [12] 1600 	mov	r5,#0x00
      0004B6                       1601 00124$:
      0004B6 90r00r0B         [24] 1602 	mov	dptr,#_move_p2controller_down_start_pos_d1_65536_62
      0004B9 EC               [12] 1603 	mov	a,r4
      0004BA F0               [24] 1604 	movx	@dptr,a
                                   1605 ;	dotmatrix.c:252: start_pos_d2 = (current_row_location_of_player2 > EIGHT) ? (current_row_location_of_player2 - MAX_LENGTH) : 1;
      0004BB 90r00r82         [24] 1606 	mov	dptr,#_current_row_location_of_player2
      0004BE E0               [24] 1607 	movx	a,@dptr
      0004BF 24 F7            [12] 1608 	add	a,#0xff - 0x08
      0004C1 50 0D            [24] 1609 	jnc	00125$
      0004C3 90r00r82         [24] 1610 	mov	dptr,#_current_row_location_of_player2
      0004C6 E0               [24] 1611 	movx	a,@dptr
      0004C7 24 F8            [12] 1612 	add	a,#0xf8
      0004C9 FB               [12] 1613 	mov	r3,a
      0004CA 33               [12] 1614 	rlc	a
      0004CB 95 E0            [12] 1615 	subb	a,acc
      0004CD FD               [12] 1616 	mov	r5,a
      0004CE 80 04            [24] 1617 	sjmp	00126$
      0004D0                       1618 00125$:
      0004D0 7B 01            [12] 1619 	mov	r3,#0x01
      0004D2 7D 00            [12] 1620 	mov	r5,#0x00
      0004D4                       1621 00126$:
      0004D4 90r00r0C         [24] 1622 	mov	dptr,#_move_p2controller_down_start_pos_d2_65536_62
      0004D7 EB               [12] 1623 	mov	a,r3
      0004D8 F0               [24] 1624 	movx	@dptr,a
                                   1625 ;	dotmatrix.c:254: if (current_row_location_of_player2 <= EIGHT)
      0004D9 90r00r82         [24] 1626 	mov	dptr,#_current_row_location_of_player2
      0004DC E0               [24] 1627 	movx	a,@dptr
      0004DD 24 F7            [12] 1628 	add	a,#0xff - 0x08
      0004DF 40 28            [24] 1629 	jc	00104$
                                   1630 ;	dotmatrix.c:256: dotmatrix_send(start_pos_d1, ZERO, DISPLAY1, PLAYER2_UNIT);
      0004E1 90r00r03         [24] 1631 	mov	dptr,#_dotmatrix_send_PARM_2
      0004E4 E4               [12] 1632 	clr	a
      0004E5 F0               [24] 1633 	movx	@dptr,a
      0004E6 90r00r04         [24] 1634 	mov	dptr,#_dotmatrix_send_PARM_3
      0004E9 F0               [24] 1635 	movx	@dptr,a
      0004EA 90r00r05         [24] 1636 	mov	dptr,#_dotmatrix_send_PARM_4
      0004ED 74 04            [12] 1637 	mov	a,#0x04
      0004EF F0               [24] 1638 	movx	@dptr,a
      0004F0 8C 82            [24] 1639 	mov	dpl,r4
      0004F2 C0 07            [24] 1640 	push	ar7
      0004F4 C0 06            [24] 1641 	push	ar6
      0004F6 C0 04            [24] 1642 	push	ar4
      0004F8 12r00r5D         [24] 1643 	lcall	_dotmatrix_send
      0004FB D0 04            [24] 1644 	pop	ar4
      0004FD D0 06            [24] 1645 	pop	ar6
      0004FF D0 07            [24] 1646 	pop	ar7
                                   1647 ;	dotmatrix.c:257: start_pos_d1++;
      000501 90r00r0B         [24] 1648 	mov	dptr,#_move_p2controller_down_start_pos_d1_65536_62
      000504 EC               [12] 1649 	mov	a,r4
      000505 04               [12] 1650 	inc	a
      000506 F0               [24] 1651 	movx	@dptr,a
      000507 80 27            [24] 1652 	sjmp	00105$
      000509                       1653 00104$:
                                   1654 ;	dotmatrix.c:261: dotmatrix_send(start_pos_d2, ZERO, DISPLAY2, PLAYER2_UNIT);
      000509 90r00r03         [24] 1655 	mov	dptr,#_dotmatrix_send_PARM_2
      00050C E4               [12] 1656 	clr	a
      00050D F0               [24] 1657 	movx	@dptr,a
      00050E 90r00r04         [24] 1658 	mov	dptr,#_dotmatrix_send_PARM_3
      000511 04               [12] 1659 	inc	a
      000512 F0               [24] 1660 	movx	@dptr,a
      000513 90r00r05         [24] 1661 	mov	dptr,#_dotmatrix_send_PARM_4
      000516 74 04            [12] 1662 	mov	a,#0x04
      000518 F0               [24] 1663 	movx	@dptr,a
      000519 8B 82            [24] 1664 	mov	dpl,r3
      00051B C0 07            [24] 1665 	push	ar7
      00051D C0 06            [24] 1666 	push	ar6
      00051F C0 03            [24] 1667 	push	ar3
      000521 12r00r5D         [24] 1668 	lcall	_dotmatrix_send
      000524 D0 03            [24] 1669 	pop	ar3
      000526 D0 06            [24] 1670 	pop	ar6
      000528 D0 07            [24] 1671 	pop	ar7
                                   1672 ;	dotmatrix.c:262: start_pos_d2++;
      00052A 90r00r0C         [24] 1673 	mov	dptr,#_move_p2controller_down_start_pos_d2_65536_62
      00052D EB               [12] 1674 	mov	a,r3
      00052E 04               [12] 1675 	inc	a
      00052F F0               [24] 1676 	movx	@dptr,a
      000530                       1677 00105$:
                                   1678 ;	dotmatrix.c:265: current_row_location_of_player2 = current_row_location_of_player2 + 1;
      000530 90r00r82         [24] 1679 	mov	dptr,#_current_row_location_of_player2
      000533 E0               [24] 1680 	movx	a,@dptr
      000534 04               [12] 1681 	inc	a
      000535 F0               [24] 1682 	movx	@dptr,a
                                   1683 ;	dotmatrix.c:267: for (int i = 0; i < how_much_pixel_in_d1; i++)
      000536 90r00r0B         [24] 1684 	mov	dptr,#_move_p2controller_down_start_pos_d1_65536_62
      000539 E0               [24] 1685 	movx	a,@dptr
      00053A FD               [12] 1686 	mov	r5,a
      00053B 7B 00            [12] 1687 	mov	r3,#0x00
      00053D 7C 00            [12] 1688 	mov	r4,#0x00
      00053F                       1689 00114$:
      00053F 8F 01            [24] 1690 	mov	ar1,r7
      000541 7A 00            [12] 1691 	mov	r2,#0x00
      000543 C3               [12] 1692 	clr	c
      000544 EB               [12] 1693 	mov	a,r3
      000545 99               [12] 1694 	subb	a,r1
      000546 EC               [12] 1695 	mov	a,r4
      000547 64 80            [12] 1696 	xrl	a,#0x80
      000549 8A F0            [24] 1697 	mov	b,r2
      00054B 63 F0 80         [24] 1698 	xrl	b,#0x80
      00054E 95 F0            [12] 1699 	subb	a,b
      000550 50 38            [24] 1700 	jnc	00106$
                                   1701 ;	dotmatrix.c:269: dotmatrix_send(start_pos_d1 + i, PLAYER2_ROW, DISPLAY1, PLAYER2_UNIT);
      000552 8B 02            [24] 1702 	mov	ar2,r3
      000554 8D 01            [24] 1703 	mov	ar1,r5
      000556 EA               [12] 1704 	mov	a,r2
      000557 29               [12] 1705 	add	a,r1
      000558 FA               [12] 1706 	mov	r2,a
      000559 90r00r03         [24] 1707 	mov	dptr,#_dotmatrix_send_PARM_2
      00055C 74 01            [12] 1708 	mov	a,#0x01
      00055E F0               [24] 1709 	movx	@dptr,a
      00055F 90r00r04         [24] 1710 	mov	dptr,#_dotmatrix_send_PARM_3
      000562 E4               [12] 1711 	clr	a
      000563 F0               [24] 1712 	movx	@dptr,a
      000564 90r00r05         [24] 1713 	mov	dptr,#_dotmatrix_send_PARM_4
      000567 74 04            [12] 1714 	mov	a,#0x04
      000569 F0               [24] 1715 	movx	@dptr,a
      00056A 8A 82            [24] 1716 	mov	dpl,r2
      00056C C0 07            [24] 1717 	push	ar7
      00056E C0 06            [24] 1718 	push	ar6
      000570 C0 05            [24] 1719 	push	ar5
      000572 C0 04            [24] 1720 	push	ar4
      000574 C0 03            [24] 1721 	push	ar3
      000576 12r00r5D         [24] 1722 	lcall	_dotmatrix_send
      000579 D0 03            [24] 1723 	pop	ar3
      00057B D0 04            [24] 1724 	pop	ar4
      00057D D0 05            [24] 1725 	pop	ar5
      00057F D0 06            [24] 1726 	pop	ar6
      000581 D0 07            [24] 1727 	pop	ar7
                                   1728 ;	dotmatrix.c:267: for (int i = 0; i < how_much_pixel_in_d1; i++)
      000583 0B               [12] 1729 	inc	r3
      000584 BB 00 B8         [24] 1730 	cjne	r3,#0x00,00114$
      000587 0C               [12] 1731 	inc	r4
      000588 80 B5            [24] 1732 	sjmp	00114$
      00058A                       1733 00106$:
                                   1734 ;	dotmatrix.c:272: for (int i = 0; i < how_much_pixel_in_d2; i++)
      00058A 90r00r0C         [24] 1735 	mov	dptr,#_move_p2controller_down_start_pos_d2_65536_62
      00058D E0               [24] 1736 	movx	a,@dptr
      00058E FF               [12] 1737 	mov	r7,a
      00058F 7C 00            [12] 1738 	mov	r4,#0x00
      000591 7D 00            [12] 1739 	mov	r5,#0x00
      000593                       1740 00117$:
      000593 8E 02            [24] 1741 	mov	ar2,r6
      000595 7B 00            [12] 1742 	mov	r3,#0x00
      000597 C3               [12] 1743 	clr	c
      000598 EC               [12] 1744 	mov	a,r4
      000599 9A               [12] 1745 	subb	a,r2
      00059A ED               [12] 1746 	mov	a,r5
      00059B 64 80            [12] 1747 	xrl	a,#0x80
      00059D 8B F0            [24] 1748 	mov	b,r3
      00059F 63 F0 80         [24] 1749 	xrl	b,#0x80
      0005A2 95 F0            [12] 1750 	subb	a,b
      0005A4 40 01            [24] 1751 	jc	00184$
      0005A6 22               [24] 1752 	ret
      0005A7                       1753 00184$:
                                   1754 ;	dotmatrix.c:274: dotmatrix_send(start_pos_d2 + i, PLAYER2_ROW, DISPLAY2, PLAYER2_UNIT);
      0005A7 8C 03            [24] 1755 	mov	ar3,r4
      0005A9 8F 02            [24] 1756 	mov	ar2,r7
      0005AB EB               [12] 1757 	mov	a,r3
      0005AC 2A               [12] 1758 	add	a,r2
      0005AD FB               [12] 1759 	mov	r3,a
      0005AE 90r00r03         [24] 1760 	mov	dptr,#_dotmatrix_send_PARM_2
      0005B1 74 01            [12] 1761 	mov	a,#0x01
      0005B3 F0               [24] 1762 	movx	@dptr,a
      0005B4 90r00r04         [24] 1763 	mov	dptr,#_dotmatrix_send_PARM_3
      0005B7 F0               [24] 1764 	movx	@dptr,a
      0005B8 90r00r05         [24] 1765 	mov	dptr,#_dotmatrix_send_PARM_4
      0005BB 74 04            [12] 1766 	mov	a,#0x04
      0005BD F0               [24] 1767 	movx	@dptr,a
      0005BE 8B 82            [24] 1768 	mov	dpl,r3
      0005C0 C0 07            [24] 1769 	push	ar7
      0005C2 C0 06            [24] 1770 	push	ar6
      0005C4 C0 05            [24] 1771 	push	ar5
      0005C6 C0 04            [24] 1772 	push	ar4
      0005C8 12r00r5D         [24] 1773 	lcall	_dotmatrix_send
      0005CB D0 04            [24] 1774 	pop	ar4
      0005CD D0 05            [24] 1775 	pop	ar5
      0005CF D0 06            [24] 1776 	pop	ar6
      0005D1 D0 07            [24] 1777 	pop	ar7
                                   1778 ;	dotmatrix.c:272: for (int i = 0; i < how_much_pixel_in_d2; i++)
      0005D3 0C               [12] 1779 	inc	r4
      0005D4 BC 00 BC         [24] 1780 	cjne	r4,#0x00,00117$
      0005D7 0D               [12] 1781 	inc	r5
      0005D8 80 B9            [24] 1782 	sjmp	00117$
      0005DA                       1783 00111$:
                                   1784 ;	dotmatrix.c:279: if (current_row_location_of_player2 == 5)
      0005DA 90r00r82         [24] 1785 	mov	dptr,#_current_row_location_of_player2
      0005DD E0               [24] 1786 	movx	a,@dptr
      0005DE FF               [12] 1787 	mov	r7,a
      0005DF BF 05 01         [24] 1788 	cjne	r7,#0x05,00109$
                                   1789 ;	dotmatrix.c:280: return;
      0005E2 22               [24] 1790 	ret
      0005E3                       1791 00109$:
                                   1792 ;	dotmatrix.c:281: dotmatrix_send(current_row_location_of_player2, ZERO, DISPLAY1, PLAYER2_UNIT);
      0005E3 90r00r82         [24] 1793 	mov	dptr,#_current_row_location_of_player2
      0005E6 E0               [24] 1794 	movx	a,@dptr
      0005E7 FF               [12] 1795 	mov	r7,a
      0005E8 90r00r03         [24] 1796 	mov	dptr,#_dotmatrix_send_PARM_2
      0005EB E4               [12] 1797 	clr	a
      0005EC F0               [24] 1798 	movx	@dptr,a
      0005ED 90r00r04         [24] 1799 	mov	dptr,#_dotmatrix_send_PARM_3
      0005F0 F0               [24] 1800 	movx	@dptr,a
      0005F1 90r00r05         [24] 1801 	mov	dptr,#_dotmatrix_send_PARM_4
      0005F4 74 04            [12] 1802 	mov	a,#0x04
      0005F6 F0               [24] 1803 	movx	@dptr,a
      0005F7 8F 82            [24] 1804 	mov	dpl,r7
      0005F9 12r00r5D         [24] 1805 	lcall	_dotmatrix_send
                                   1806 ;	dotmatrix.c:282: (current_row_location_of_player2) = (current_row_location_of_player2) + 1;
      0005FC 90r00r82         [24] 1807 	mov	dptr,#_current_row_location_of_player2
      0005FF E0               [24] 1808 	movx	a,@dptr
      000600 04               [12] 1809 	inc	a
      000601 F0               [24] 1810 	movx	@dptr,a
                                   1811 ;	dotmatrix.c:283: dotmatrix_send(current_row_location_of_player2 + 3, PLAYER2_ROW, DISPLAY1, PLAYER2_UNIT);
      000602 E0               [24] 1812 	movx	a,@dptr
      000603 FF               [12] 1813 	mov	r7,a
      000604 0F               [12] 1814 	inc	r7
      000605 0F               [12] 1815 	inc	r7
      000606 0F               [12] 1816 	inc	r7
      000607 90r00r03         [24] 1817 	mov	dptr,#_dotmatrix_send_PARM_2
      00060A 74 01            [12] 1818 	mov	a,#0x01
      00060C F0               [24] 1819 	movx	@dptr,a
      00060D 90r00r04         [24] 1820 	mov	dptr,#_dotmatrix_send_PARM_3
      000610 E4               [12] 1821 	clr	a
      000611 F0               [24] 1822 	movx	@dptr,a
      000612 90r00r05         [24] 1823 	mov	dptr,#_dotmatrix_send_PARM_4
      000615 74 04            [12] 1824 	mov	a,#0x04
      000617 F0               [24] 1825 	movx	@dptr,a
      000618 8F 82            [24] 1826 	mov	dpl,r7
                                   1827 ;	dotmatrix.c:285: }
      00061A 02r00r5D         [24] 1828 	ljmp	_dotmatrix_send
                                   1829 ;------------------------------------------------------------
                                   1830 ;Allocation info for local variables in function 'move_p2controller_up'
                                   1831 ;------------------------------------------------------------
                                   1832 ;how_much_pixel_in_d2      Allocated with name '_move_p2controller_up_how_much_pixel_in_d2_65536_71'
                                   1833 ;how_much_pixel_in_d1      Allocated with name '_move_p2controller_up_how_much_pixel_in_d1_65536_71'
                                   1834 ;start_pos_d1              Allocated with name '_move_p2controller_up_start_pos_d1_65536_71'
                                   1835 ;temp_location_d2          Allocated with name '_move_p2controller_up_temp_location_d2_65536_71'
                                   1836 ;i                         Allocated with name '_move_p2controller_up_i_196608_74'
                                   1837 ;i                         Allocated with name '_move_p2controller_up_i_196608_76'
                                   1838 ;------------------------------------------------------------
                                   1839 ;	dotmatrix.c:287: void move_p2controller_up()
                                   1840 ;	-----------------------------------------
                                   1841 ;	 function move_p2controller_up
                                   1842 ;	-----------------------------------------
      00061D                       1843 _move_p2controller_up:
                                   1844 ;	dotmatrix.c:291: if (current_row_location_of_player2 == 1)
      00061D 90r00r82         [24] 1845 	mov	dptr,#_current_row_location_of_player2
      000620 E0               [24] 1846 	movx	a,@dptr
      000621 FF               [12] 1847 	mov	r7,a
      000622 BF 01 01         [24] 1848 	cjne	r7,#0x01,00102$
                                   1849 ;	dotmatrix.c:292: return;
      000625 22               [24] 1850 	ret
      000626                       1851 00102$:
                                   1852 ;	dotmatrix.c:294: if (current_row_location_of_player2 >= 10)
      000626 90r00r82         [24] 1853 	mov	dptr,#_current_row_location_of_player2
      000629 E0               [24] 1854 	movx	a,@dptr
      00062A FF               [12] 1855 	mov	r7,a
      00062B BF 0A 00         [24] 1856 	cjne	r7,#0x0a,00162$
      00062E                       1857 00162$:
      00062E 40 42            [24] 1858 	jc	00112$
                                   1859 ;	dotmatrix.c:296: temp_location_d2 = current_row_location_of_player2 % MAX_LENGTH;
      000630 90r00r82         [24] 1860 	mov	dptr,#_current_row_location_of_player2
      000633 E0               [24] 1861 	movx	a,@dptr
      000634 FF               [12] 1862 	mov	r7,a
      000635 53 07 07         [24] 1863 	anl	ar7,#0x07
                                   1864 ;	dotmatrix.c:297: dotmatrix_send(temp_location_d2 + 3, ZERO, DISPLAY2, PLAYER2_UNIT);
      000638 8F 06            [24] 1865 	mov	ar6,r7
      00063A 0E               [12] 1866 	inc	r6
      00063B 0E               [12] 1867 	inc	r6
      00063C 0E               [12] 1868 	inc	r6
      00063D 90r00r03         [24] 1869 	mov	dptr,#_dotmatrix_send_PARM_2
      000640 E4               [12] 1870 	clr	a
      000641 F0               [24] 1871 	movx	@dptr,a
      000642 90r00r04         [24] 1872 	mov	dptr,#_dotmatrix_send_PARM_3
      000645 04               [12] 1873 	inc	a
      000646 F0               [24] 1874 	movx	@dptr,a
      000647 90r00r05         [24] 1875 	mov	dptr,#_dotmatrix_send_PARM_4
      00064A 74 04            [12] 1876 	mov	a,#0x04
      00064C F0               [24] 1877 	movx	@dptr,a
      00064D 8E 82            [24] 1878 	mov	dpl,r6
      00064F C0 07            [24] 1879 	push	ar7
      000651 12r00r5D         [24] 1880 	lcall	_dotmatrix_send
      000654 D0 07            [24] 1881 	pop	ar7
                                   1882 ;	dotmatrix.c:299: temp_location_d2--;
      000656 1F               [12] 1883 	dec	r7
                                   1884 ;	dotmatrix.c:300: (current_row_location_of_player2) = (current_row_location_of_player2)-1;
      000657 90r00r82         [24] 1885 	mov	dptr,#_current_row_location_of_player2
      00065A E0               [24] 1886 	movx	a,@dptr
      00065B 14               [12] 1887 	dec	a
      00065C F0               [24] 1888 	movx	@dptr,a
                                   1889 ;	dotmatrix.c:302: dotmatrix_send(temp_location_d2, PLAYER2_ROW, DISPLAY2, PLAYER2_UNIT);
      00065D 90r00r03         [24] 1890 	mov	dptr,#_dotmatrix_send_PARM_2
      000660 74 01            [12] 1891 	mov	a,#0x01
      000662 F0               [24] 1892 	movx	@dptr,a
      000663 90r00r04         [24] 1893 	mov	dptr,#_dotmatrix_send_PARM_3
      000666 F0               [24] 1894 	movx	@dptr,a
      000667 90r00r05         [24] 1895 	mov	dptr,#_dotmatrix_send_PARM_4
      00066A 74 04            [12] 1896 	mov	a,#0x04
      00066C F0               [24] 1897 	movx	@dptr,a
      00066D 8F 82            [24] 1898 	mov	dpl,r7
                                   1899 ;	dotmatrix.c:303: return;
      00066F 02r00r5D         [24] 1900 	ljmp	_dotmatrix_send
      000672                       1901 00112$:
                                   1902 ;	dotmatrix.c:305: else if (current_row_location_of_player2 <= 9 && current_row_location_of_player2 >= 6)
      000672 90r00r82         [24] 1903 	mov	dptr,#_current_row_location_of_player2
      000675 E0               [24] 1904 	movx	a,@dptr
      000676 FF               [12] 1905 	mov  r7,a
      000677 24 F6            [12] 1906 	add	a,#0xff - 0x09
      000679 50 03            [24] 1907 	jnc	00164$
      00067B 02r07r70         [24] 1908 	ljmp	00108$
      00067E                       1909 00164$:
      00067E 90r00r82         [24] 1910 	mov	dptr,#_current_row_location_of_player2
      000681 E0               [24] 1911 	movx	a,@dptr
      000682 FF               [12] 1912 	mov	r7,a
      000683 BF 06 00         [24] 1913 	cjne	r7,#0x06,00165$
      000686                       1914 00165$:
      000686 50 03            [24] 1915 	jnc	00166$
      000688 02r07r70         [24] 1916 	ljmp	00108$
      00068B                       1917 00166$:
                                   1918 ;	dotmatrix.c:307: how_much_pixel_in_d2 = (current_row_location_of_player2 + (PLAYER_LENGTH - 2)) - MAX_LENGTH;
      00068B 90r00r82         [24] 1919 	mov	dptr,#_current_row_location_of_player2
      00068E E0               [24] 1920 	movx	a,@dptr
                                   1921 ;	dotmatrix.c:308: how_much_pixel_in_d1 = PLAYER_LENGTH - how_much_pixel_in_d2;
      00068F 24 FA            [12] 1922 	add	a,#0xfa
      000691 FF               [12] 1923 	mov	r7,a
      000692 FE               [12] 1924 	mov	r6,a
      000693 74 04            [12] 1925 	mov	a,#0x04
      000695 C3               [12] 1926 	clr	c
      000696 9E               [12] 1927 	subb	a,r6
      000697 FE               [12] 1928 	mov	r6,a
                                   1929 ;	dotmatrix.c:310: start_pos_d1 = current_row_location_of_player2 - 1;
      000698 E0               [24] 1930 	movx	a,@dptr
      000699 FD               [12] 1931 	mov	r5,a
      00069A 1D               [12] 1932 	dec	r5
                                   1933 ;	dotmatrix.c:312: dotmatrix_send(((current_row_location_of_player2 + 3) % EIGHT), ZERO, DISPLAY2, PLAYER2_UNIT);
      00069B E0               [24] 1934 	movx	a,@dptr
      00069C FC               [12] 1935 	mov	r4,a
      00069D 7B 00            [12] 1936 	mov	r3,#0x00
      00069F 74 03            [12] 1937 	mov	a,#0x03
      0006A1 2C               [12] 1938 	add	a,r4
      0006A2 FC               [12] 1939 	mov	r4,a
      0006A3 E4               [12] 1940 	clr	a
      0006A4 3B               [12] 1941 	addc	a,r3
      0006A5 FB               [12] 1942 	mov	r3,a
      0006A6 90r00r00         [24] 1943 	mov	dptr,#__modsint_PARM_2
      0006A9 74 08            [12] 1944 	mov	a,#0x08
      0006AB F0               [24] 1945 	movx	@dptr,a
      0006AC E4               [12] 1946 	clr	a
      0006AD A3               [24] 1947 	inc	dptr
      0006AE F0               [24] 1948 	movx	@dptr,a
      0006AF 8C 82            [24] 1949 	mov	dpl,r4
      0006B1 8B 83            [24] 1950 	mov	dph,r3
      0006B3 C0 07            [24] 1951 	push	ar7
      0006B5 C0 06            [24] 1952 	push	ar6
      0006B7 C0 05            [24] 1953 	push	ar5
      0006B9 12r00r00         [24] 1954 	lcall	__modsint
      0006BC AB 82            [24] 1955 	mov	r3,dpl
      0006BE 90r00r03         [24] 1956 	mov	dptr,#_dotmatrix_send_PARM_2
      0006C1 E4               [12] 1957 	clr	a
      0006C2 F0               [24] 1958 	movx	@dptr,a
      0006C3 90r00r04         [24] 1959 	mov	dptr,#_dotmatrix_send_PARM_3
      0006C6 04               [12] 1960 	inc	a
      0006C7 F0               [24] 1961 	movx	@dptr,a
      0006C8 90r00r05         [24] 1962 	mov	dptr,#_dotmatrix_send_PARM_4
      0006CB 74 04            [12] 1963 	mov	a,#0x04
      0006CD F0               [24] 1964 	movx	@dptr,a
      0006CE 8B 82            [24] 1965 	mov	dpl,r3
      0006D0 12r00r5D         [24] 1966 	lcall	_dotmatrix_send
      0006D3 D0 05            [24] 1967 	pop	ar5
      0006D5 D0 06            [24] 1968 	pop	ar6
      0006D7 D0 07            [24] 1969 	pop	ar7
                                   1970 ;	dotmatrix.c:313: current_row_location_of_player2--;
      0006D9 90r00r82         [24] 1971 	mov	dptr,#_current_row_location_of_player2
      0006DC E0               [24] 1972 	movx	a,@dptr
      0006DD 14               [12] 1973 	dec	a
      0006DE F0               [24] 1974 	movx	@dptr,a
                                   1975 ;	dotmatrix.c:315: for (int i = 0; i < how_much_pixel_in_d1; i++)
      0006DF 7B 00            [12] 1976 	mov	r3,#0x00
      0006E1 7C 00            [12] 1977 	mov	r4,#0x00
      0006E3                       1978 00115$:
      0006E3 8E 01            [24] 1979 	mov	ar1,r6
      0006E5 7A 00            [12] 1980 	mov	r2,#0x00
      0006E7 C3               [12] 1981 	clr	c
      0006E8 EB               [12] 1982 	mov	a,r3
      0006E9 99               [12] 1983 	subb	a,r1
      0006EA EC               [12] 1984 	mov	a,r4
      0006EB 64 80            [12] 1985 	xrl	a,#0x80
      0006ED 8A F0            [24] 1986 	mov	b,r2
      0006EF 63 F0 80         [24] 1987 	xrl	b,#0x80
      0006F2 95 F0            [12] 1988 	subb	a,b
      0006F4 50 38            [24] 1989 	jnc	00103$
                                   1990 ;	dotmatrix.c:317: dotmatrix_send(start_pos_d1 + i, PLAYER2_ROW, DISPLAY1, PLAYER2_UNIT);
      0006F6 8B 02            [24] 1991 	mov	ar2,r3
      0006F8 8D 01            [24] 1992 	mov	ar1,r5
      0006FA EA               [12] 1993 	mov	a,r2
      0006FB 29               [12] 1994 	add	a,r1
      0006FC FA               [12] 1995 	mov	r2,a
      0006FD 90r00r03         [24] 1996 	mov	dptr,#_dotmatrix_send_PARM_2
      000700 74 01            [12] 1997 	mov	a,#0x01
      000702 F0               [24] 1998 	movx	@dptr,a
      000703 90r00r04         [24] 1999 	mov	dptr,#_dotmatrix_send_PARM_3
      000706 E4               [12] 2000 	clr	a
      000707 F0               [24] 2001 	movx	@dptr,a
      000708 90r00r05         [24] 2002 	mov	dptr,#_dotmatrix_send_PARM_4
      00070B 74 04            [12] 2003 	mov	a,#0x04
      00070D F0               [24] 2004 	movx	@dptr,a
      00070E 8A 82            [24] 2005 	mov	dpl,r2
      000710 C0 07            [24] 2006 	push	ar7
      000712 C0 06            [24] 2007 	push	ar6
      000714 C0 05            [24] 2008 	push	ar5
      000716 C0 04            [24] 2009 	push	ar4
      000718 C0 03            [24] 2010 	push	ar3
      00071A 12r00r5D         [24] 2011 	lcall	_dotmatrix_send
      00071D D0 03            [24] 2012 	pop	ar3
      00071F D0 04            [24] 2013 	pop	ar4
      000721 D0 05            [24] 2014 	pop	ar5
      000723 D0 06            [24] 2015 	pop	ar6
      000725 D0 07            [24] 2016 	pop	ar7
                                   2017 ;	dotmatrix.c:315: for (int i = 0; i < how_much_pixel_in_d1; i++)
      000727 0B               [12] 2018 	inc	r3
      000728 BB 00 B8         [24] 2019 	cjne	r3,#0x00,00115$
      00072B 0C               [12] 2020 	inc	r4
      00072C 80 B5            [24] 2021 	sjmp	00115$
      00072E                       2022 00103$:
                                   2023 ;	dotmatrix.c:320: for (int i = 0; i < (how_much_pixel_in_d2); i++)
      00072E 7D 00            [12] 2024 	mov	r5,#0x00
      000730 7E 00            [12] 2025 	mov	r6,#0x00
      000732                       2026 00118$:
      000732 8F 03            [24] 2027 	mov	ar3,r7
      000734 7C 00            [12] 2028 	mov	r4,#0x00
      000736 C3               [12] 2029 	clr	c
      000737 ED               [12] 2030 	mov	a,r5
      000738 9B               [12] 2031 	subb	a,r3
      000739 EE               [12] 2032 	mov	a,r6
      00073A 64 80            [12] 2033 	xrl	a,#0x80
      00073C 8C F0            [24] 2034 	mov	b,r4
      00073E 63 F0 80         [24] 2035 	xrl	b,#0x80
      000741 95 F0            [12] 2036 	subb	a,b
      000743 50 6E            [24] 2037 	jnc	00120$
                                   2038 ;	dotmatrix.c:322: dotmatrix_send(1 + i, PLAYER2_ROW, DISPLAY2, PLAYER2_UNIT);
      000745 8D 04            [24] 2039 	mov	ar4,r5
      000747 0C               [12] 2040 	inc	r4
      000748 90r00r03         [24] 2041 	mov	dptr,#_dotmatrix_send_PARM_2
      00074B 74 01            [12] 2042 	mov	a,#0x01
      00074D F0               [24] 2043 	movx	@dptr,a
      00074E 90r00r04         [24] 2044 	mov	dptr,#_dotmatrix_send_PARM_3
      000751 F0               [24] 2045 	movx	@dptr,a
      000752 90r00r05         [24] 2046 	mov	dptr,#_dotmatrix_send_PARM_4
      000755 74 04            [12] 2047 	mov	a,#0x04
      000757 F0               [24] 2048 	movx	@dptr,a
      000758 8C 82            [24] 2049 	mov	dpl,r4
      00075A C0 07            [24] 2050 	push	ar7
      00075C C0 06            [24] 2051 	push	ar6
      00075E C0 05            [24] 2052 	push	ar5
      000760 12r00r5D         [24] 2053 	lcall	_dotmatrix_send
      000763 D0 05            [24] 2054 	pop	ar5
      000765 D0 06            [24] 2055 	pop	ar6
      000767 D0 07            [24] 2056 	pop	ar7
                                   2057 ;	dotmatrix.c:320: for (int i = 0; i < (how_much_pixel_in_d2); i++)
      000769 0D               [12] 2058 	inc	r5
      00076A BD 00 C5         [24] 2059 	cjne	r5,#0x00,00118$
      00076D 0E               [12] 2060 	inc	r6
      00076E 80 C2            [24] 2061 	sjmp	00118$
      000770                       2062 00108$:
                                   2063 ;	dotmatrix.c:325: else if (current_row_location_of_player2 <= 5)
      000770 90r00r82         [24] 2064 	mov	dptr,#_current_row_location_of_player2
      000773 E0               [24] 2065 	movx	a,@dptr
      000774 FF               [12] 2066 	mov  r7,a
      000775 24 FA            [12] 2067 	add	a,#0xff - 0x05
      000777 40 3A            [24] 2068 	jc	00120$
                                   2069 ;	dotmatrix.c:327: dotmatrix_send(current_row_location_of_player2 + 3, ZERO, DISPLAY1, PLAYER2_UNIT);
      000779 90r00r82         [24] 2070 	mov	dptr,#_current_row_location_of_player2
      00077C E0               [24] 2071 	movx	a,@dptr
      00077D FF               [12] 2072 	mov	r7,a
      00077E 0F               [12] 2073 	inc	r7
      00077F 0F               [12] 2074 	inc	r7
      000780 0F               [12] 2075 	inc	r7
      000781 90r00r03         [24] 2076 	mov	dptr,#_dotmatrix_send_PARM_2
      000784 E4               [12] 2077 	clr	a
      000785 F0               [24] 2078 	movx	@dptr,a
      000786 90r00r04         [24] 2079 	mov	dptr,#_dotmatrix_send_PARM_3
      000789 F0               [24] 2080 	movx	@dptr,a
      00078A 90r00r05         [24] 2081 	mov	dptr,#_dotmatrix_send_PARM_4
      00078D 74 04            [12] 2082 	mov	a,#0x04
      00078F F0               [24] 2083 	movx	@dptr,a
      000790 8F 82            [24] 2084 	mov	dpl,r7
      000792 12r00r5D         [24] 2085 	lcall	_dotmatrix_send
                                   2086 ;	dotmatrix.c:328: (current_row_location_of_player2) = (current_row_location_of_player2)-1;
      000795 90r00r82         [24] 2087 	mov	dptr,#_current_row_location_of_player2
      000798 E0               [24] 2088 	movx	a,@dptr
      000799 14               [12] 2089 	dec	a
      00079A F0               [24] 2090 	movx	@dptr,a
                                   2091 ;	dotmatrix.c:329: dotmatrix_send(current_row_location_of_player2, PLAYER2_ROW, DISPLAY1, PLAYER2_UNIT);
      00079B E0               [24] 2092 	movx	a,@dptr
      00079C FF               [12] 2093 	mov	r7,a
      00079D 90r00r03         [24] 2094 	mov	dptr,#_dotmatrix_send_PARM_2
      0007A0 74 01            [12] 2095 	mov	a,#0x01
      0007A2 F0               [24] 2096 	movx	@dptr,a
      0007A3 90r00r04         [24] 2097 	mov	dptr,#_dotmatrix_send_PARM_3
      0007A6 E4               [12] 2098 	clr	a
      0007A7 F0               [24] 2099 	movx	@dptr,a
      0007A8 90r00r05         [24] 2100 	mov	dptr,#_dotmatrix_send_PARM_4
      0007AB 74 04            [12] 2101 	mov	a,#0x04
      0007AD F0               [24] 2102 	movx	@dptr,a
      0007AE 8F 82            [24] 2103 	mov	dpl,r7
                                   2104 ;	dotmatrix.c:331: }
      0007B0 02r00r5D         [24] 2105 	ljmp	_dotmatrix_send
      0007B3                       2106 00120$:
      0007B3 22               [24] 2107 	ret
                                   2108 ;------------------------------------------------------------
                                   2109 ;Allocation info for local variables in function 'initialize_controller'
                                   2110 ;------------------------------------------------------------
                                   2111 ;unit                      Allocated with name '_initialize_controller_unit_131072_80'
                                   2112 ;row                       Allocated with name '_initialize_controller_row_262144_82'
                                   2113 ;unit                      Allocated with name '_initialize_controller_unit_131072_84'
                                   2114 ;row                       Allocated with name '_initialize_controller_row_262144_86'
                                   2115 ;------------------------------------------------------------
                                   2116 ;	dotmatrix.c:333: void initialize_controller()
                                   2117 ;	-----------------------------------------
                                   2118 ;	 function initialize_controller
                                   2119 ;	-----------------------------------------
      0007B4                       2120 _initialize_controller:
                                   2121 ;	dotmatrix.c:337: current_row_location_of_player1 = 7;
      0007B4 90r00r81         [24] 2122 	mov	dptr,#_current_row_location_of_player1
      0007B7 74 07            [12] 2123 	mov	a,#0x07
      0007B9 F0               [24] 2124 	movx	@dptr,a
                                   2125 ;	dotmatrix.c:338: current_row_location_of_player2 = 7;
      0007BA 90r00r82         [24] 2126 	mov	dptr,#_current_row_location_of_player2
      0007BD F0               [24] 2127 	movx	@dptr,a
                                   2128 ;	dotmatrix.c:340: b_y = SIXTEEN;
      0007BE 90r00r83         [24] 2129 	mov	dptr,#_b_y
      0007C1 74 10            [12] 2130 	mov	a,#0x10
      0007C3 F0               [24] 2131 	movx	@dptr,a
                                   2132 ;	dotmatrix.c:341: b_x = EIGHT;
      0007C4 90r00r84         [24] 2133 	mov	dptr,#_b_x
      0007C7 03               [12] 2134 	rr	a
      0007C8 F0               [24] 2135 	movx	@dptr,a
                                   2136 ;	dotmatrix.c:343: direction_x = 1;
      0007C9 90r00r85         [24] 2137 	mov	dptr,#_direction_x
      0007CC 74 01            [12] 2138 	mov	a,#0x01
      0007CE F0               [24] 2139 	movx	@dptr,a
                                   2140 ;	dotmatrix.c:344: direction_y = 1;
      0007CF 90r00r86         [24] 2141 	mov	dptr,#_direction_y
      0007D2 F0               [24] 2142 	movx	@dptr,a
                                   2143 ;	dotmatrix.c:346: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY1, PLAYER1_UNIT);
      0007D3 90r00r03         [24] 2144 	mov	dptr,#_dotmatrix_send_PARM_2
      0007D6 E4               [12] 2145 	clr	a
      0007D7 F0               [24] 2146 	movx	@dptr,a
      0007D8 90r00r04         [24] 2147 	mov	dptr,#_dotmatrix_send_PARM_3
      0007DB F0               [24] 2148 	movx	@dptr,a
      0007DC 90r00r05         [24] 2149 	mov	dptr,#_dotmatrix_send_PARM_4
      0007DF 04               [12] 2150 	inc	a
      0007E0 F0               [24] 2151 	movx	@dptr,a
      0007E1 75 82 0F         [24] 2152 	mov	dpl,#0x0f
      0007E4 12r00r5D         [24] 2153 	lcall	_dotmatrix_send
                                   2154 ;	dotmatrix.c:347: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY1, 2);
      0007E7 90r00r03         [24] 2155 	mov	dptr,#_dotmatrix_send_PARM_2
      0007EA E4               [12] 2156 	clr	a
      0007EB F0               [24] 2157 	movx	@dptr,a
      0007EC 90r00r04         [24] 2158 	mov	dptr,#_dotmatrix_send_PARM_3
      0007EF F0               [24] 2159 	movx	@dptr,a
      0007F0 90r00r05         [24] 2160 	mov	dptr,#_dotmatrix_send_PARM_4
      0007F3 74 02            [12] 2161 	mov	a,#0x02
      0007F5 F0               [24] 2162 	movx	@dptr,a
      0007F6 75 82 0F         [24] 2163 	mov	dpl,#0x0f
      0007F9 12r00r5D         [24] 2164 	lcall	_dotmatrix_send
                                   2165 ;	dotmatrix.c:348: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY1, 3);
      0007FC 90r00r03         [24] 2166 	mov	dptr,#_dotmatrix_send_PARM_2
      0007FF E4               [12] 2167 	clr	a
      000800 F0               [24] 2168 	movx	@dptr,a
      000801 90r00r04         [24] 2169 	mov	dptr,#_dotmatrix_send_PARM_3
      000804 F0               [24] 2170 	movx	@dptr,a
      000805 90r00r05         [24] 2171 	mov	dptr,#_dotmatrix_send_PARM_4
      000808 74 03            [12] 2172 	mov	a,#0x03
      00080A F0               [24] 2173 	movx	@dptr,a
      00080B 75 82 0F         [24] 2174 	mov	dpl,#0x0f
      00080E 12r00r5D         [24] 2175 	lcall	_dotmatrix_send
                                   2176 ;	dotmatrix.c:349: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY1, PLAYER2_UNIT);
      000811 90r00r03         [24] 2177 	mov	dptr,#_dotmatrix_send_PARM_2
      000814 E4               [12] 2178 	clr	a
      000815 F0               [24] 2179 	movx	@dptr,a
      000816 90r00r04         [24] 2180 	mov	dptr,#_dotmatrix_send_PARM_3
      000819 F0               [24] 2181 	movx	@dptr,a
      00081A 90r00r05         [24] 2182 	mov	dptr,#_dotmatrix_send_PARM_4
      00081D 74 04            [12] 2183 	mov	a,#0x04
      00081F F0               [24] 2184 	movx	@dptr,a
      000820 75 82 0F         [24] 2185 	mov	dpl,#0x0f
      000823 12r00r5D         [24] 2186 	lcall	_dotmatrix_send
                                   2187 ;	dotmatrix.c:351: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY2, PLAYER1_UNIT);
      000826 90r00r03         [24] 2188 	mov	dptr,#_dotmatrix_send_PARM_2
      000829 E4               [12] 2189 	clr	a
      00082A F0               [24] 2190 	movx	@dptr,a
      00082B 90r00r04         [24] 2191 	mov	dptr,#_dotmatrix_send_PARM_3
      00082E 04               [12] 2192 	inc	a
      00082F F0               [24] 2193 	movx	@dptr,a
      000830 90r00r05         [24] 2194 	mov	dptr,#_dotmatrix_send_PARM_4
      000833 F0               [24] 2195 	movx	@dptr,a
      000834 75 82 0F         [24] 2196 	mov	dpl,#0x0f
      000837 12r00r5D         [24] 2197 	lcall	_dotmatrix_send
                                   2198 ;	dotmatrix.c:352: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY2, 2);
      00083A 90r00r03         [24] 2199 	mov	dptr,#_dotmatrix_send_PARM_2
      00083D E4               [12] 2200 	clr	a
      00083E F0               [24] 2201 	movx	@dptr,a
      00083F 90r00r04         [24] 2202 	mov	dptr,#_dotmatrix_send_PARM_3
      000842 04               [12] 2203 	inc	a
      000843 F0               [24] 2204 	movx	@dptr,a
      000844 90r00r05         [24] 2205 	mov	dptr,#_dotmatrix_send_PARM_4
      000847 04               [12] 2206 	inc	a
      000848 F0               [24] 2207 	movx	@dptr,a
      000849 75 82 0F         [24] 2208 	mov	dpl,#0x0f
      00084C 12r00r5D         [24] 2209 	lcall	_dotmatrix_send
                                   2210 ;	dotmatrix.c:353: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY2, 3);
      00084F 90r00r03         [24] 2211 	mov	dptr,#_dotmatrix_send_PARM_2
      000852 E4               [12] 2212 	clr	a
      000853 F0               [24] 2213 	movx	@dptr,a
      000854 90r00r04         [24] 2214 	mov	dptr,#_dotmatrix_send_PARM_3
      000857 04               [12] 2215 	inc	a
      000858 F0               [24] 2216 	movx	@dptr,a
      000859 90r00r05         [24] 2217 	mov	dptr,#_dotmatrix_send_PARM_4
      00085C 74 03            [12] 2218 	mov	a,#0x03
      00085E F0               [24] 2219 	movx	@dptr,a
      00085F 75 82 0F         [24] 2220 	mov	dpl,#0x0f
      000862 12r00r5D         [24] 2221 	lcall	_dotmatrix_send
                                   2222 ;	dotmatrix.c:354: dotmatrix_send(DISPLAY_TEST_REG, DISPLAY_TEST_NORMAL_MODE_VAL, DISPLAY2, PLAYER2_UNIT);
      000865 90r00r03         [24] 2223 	mov	dptr,#_dotmatrix_send_PARM_2
      000868 E4               [12] 2224 	clr	a
      000869 F0               [24] 2225 	movx	@dptr,a
      00086A 90r00r04         [24] 2226 	mov	dptr,#_dotmatrix_send_PARM_3
      00086D 04               [12] 2227 	inc	a
      00086E F0               [24] 2228 	movx	@dptr,a
      00086F 90r00r05         [24] 2229 	mov	dptr,#_dotmatrix_send_PARM_4
      000872 74 04            [12] 2230 	mov	a,#0x04
      000874 F0               [24] 2231 	movx	@dptr,a
      000875 75 82 0F         [24] 2232 	mov	dpl,#0x0f
      000878 12r00r5D         [24] 2233 	lcall	_dotmatrix_send
                                   2234 ;	dotmatrix.c:356: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY1, PLAYER1_UNIT);
      00087B 90r00r03         [24] 2235 	mov	dptr,#_dotmatrix_send_PARM_2
      00087E E4               [12] 2236 	clr	a
      00087F F0               [24] 2237 	movx	@dptr,a
      000880 90r00r04         [24] 2238 	mov	dptr,#_dotmatrix_send_PARM_3
      000883 F0               [24] 2239 	movx	@dptr,a
      000884 90r00r05         [24] 2240 	mov	dptr,#_dotmatrix_send_PARM_4
      000887 04               [12] 2241 	inc	a
      000888 F0               [24] 2242 	movx	@dptr,a
      000889 75 82 09         [24] 2243 	mov	dpl,#0x09
      00088C 12r00r5D         [24] 2244 	lcall	_dotmatrix_send
                                   2245 ;	dotmatrix.c:357: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY1, 2);
      00088F 90r00r03         [24] 2246 	mov	dptr,#_dotmatrix_send_PARM_2
      000892 E4               [12] 2247 	clr	a
      000893 F0               [24] 2248 	movx	@dptr,a
      000894 90r00r04         [24] 2249 	mov	dptr,#_dotmatrix_send_PARM_3
      000897 F0               [24] 2250 	movx	@dptr,a
      000898 90r00r05         [24] 2251 	mov	dptr,#_dotmatrix_send_PARM_4
      00089B 74 02            [12] 2252 	mov	a,#0x02
      00089D F0               [24] 2253 	movx	@dptr,a
      00089E 75 82 09         [24] 2254 	mov	dpl,#0x09
      0008A1 12r00r5D         [24] 2255 	lcall	_dotmatrix_send
                                   2256 ;	dotmatrix.c:358: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY1, 3);
      0008A4 90r00r03         [24] 2257 	mov	dptr,#_dotmatrix_send_PARM_2
      0008A7 E4               [12] 2258 	clr	a
      0008A8 F0               [24] 2259 	movx	@dptr,a
      0008A9 90r00r04         [24] 2260 	mov	dptr,#_dotmatrix_send_PARM_3
      0008AC F0               [24] 2261 	movx	@dptr,a
      0008AD 90r00r05         [24] 2262 	mov	dptr,#_dotmatrix_send_PARM_4
      0008B0 74 03            [12] 2263 	mov	a,#0x03
      0008B2 F0               [24] 2264 	movx	@dptr,a
      0008B3 75 82 09         [24] 2265 	mov	dpl,#0x09
      0008B6 12r00r5D         [24] 2266 	lcall	_dotmatrix_send
                                   2267 ;	dotmatrix.c:359: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY1, PLAYER2_UNIT);
      0008B9 90r00r03         [24] 2268 	mov	dptr,#_dotmatrix_send_PARM_2
      0008BC E4               [12] 2269 	clr	a
      0008BD F0               [24] 2270 	movx	@dptr,a
      0008BE 90r00r04         [24] 2271 	mov	dptr,#_dotmatrix_send_PARM_3
      0008C1 F0               [24] 2272 	movx	@dptr,a
      0008C2 90r00r05         [24] 2273 	mov	dptr,#_dotmatrix_send_PARM_4
      0008C5 74 04            [12] 2274 	mov	a,#0x04
      0008C7 F0               [24] 2275 	movx	@dptr,a
      0008C8 75 82 09         [24] 2276 	mov	dpl,#0x09
      0008CB 12r00r5D         [24] 2277 	lcall	_dotmatrix_send
                                   2278 ;	dotmatrix.c:361: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY2, PLAYER1_UNIT);
      0008CE 90r00r03         [24] 2279 	mov	dptr,#_dotmatrix_send_PARM_2
      0008D1 E4               [12] 2280 	clr	a
      0008D2 F0               [24] 2281 	movx	@dptr,a
      0008D3 90r00r04         [24] 2282 	mov	dptr,#_dotmatrix_send_PARM_3
      0008D6 04               [12] 2283 	inc	a
      0008D7 F0               [24] 2284 	movx	@dptr,a
      0008D8 90r00r05         [24] 2285 	mov	dptr,#_dotmatrix_send_PARM_4
      0008DB F0               [24] 2286 	movx	@dptr,a
      0008DC 75 82 09         [24] 2287 	mov	dpl,#0x09
      0008DF 12r00r5D         [24] 2288 	lcall	_dotmatrix_send
                                   2289 ;	dotmatrix.c:362: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY2, 2);
      0008E2 90r00r03         [24] 2290 	mov	dptr,#_dotmatrix_send_PARM_2
      0008E5 E4               [12] 2291 	clr	a
      0008E6 F0               [24] 2292 	movx	@dptr,a
      0008E7 90r00r04         [24] 2293 	mov	dptr,#_dotmatrix_send_PARM_3
      0008EA 04               [12] 2294 	inc	a
      0008EB F0               [24] 2295 	movx	@dptr,a
      0008EC 90r00r05         [24] 2296 	mov	dptr,#_dotmatrix_send_PARM_4
      0008EF 04               [12] 2297 	inc	a
      0008F0 F0               [24] 2298 	movx	@dptr,a
      0008F1 75 82 09         [24] 2299 	mov	dpl,#0x09
      0008F4 12r00r5D         [24] 2300 	lcall	_dotmatrix_send
                                   2301 ;	dotmatrix.c:363: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY2, 3);
      0008F7 90r00r03         [24] 2302 	mov	dptr,#_dotmatrix_send_PARM_2
      0008FA E4               [12] 2303 	clr	a
      0008FB F0               [24] 2304 	movx	@dptr,a
      0008FC 90r00r04         [24] 2305 	mov	dptr,#_dotmatrix_send_PARM_3
      0008FF 04               [12] 2306 	inc	a
      000900 F0               [24] 2307 	movx	@dptr,a
      000901 90r00r05         [24] 2308 	mov	dptr,#_dotmatrix_send_PARM_4
      000904 74 03            [12] 2309 	mov	a,#0x03
      000906 F0               [24] 2310 	movx	@dptr,a
      000907 75 82 09         [24] 2311 	mov	dpl,#0x09
      00090A 12r00r5D         [24] 2312 	lcall	_dotmatrix_send
                                   2313 ;	dotmatrix.c:364: dotmatrix_send(DECODE_MODE_REG, DECODE_MODE_REG_NO_DECODE_VAL, DISPLAY2, PLAYER2_UNIT);
      00090D 90r00r03         [24] 2314 	mov	dptr,#_dotmatrix_send_PARM_2
      000910 E4               [12] 2315 	clr	a
      000911 F0               [24] 2316 	movx	@dptr,a
      000912 90r00r04         [24] 2317 	mov	dptr,#_dotmatrix_send_PARM_3
      000915 04               [12] 2318 	inc	a
      000916 F0               [24] 2319 	movx	@dptr,a
      000917 90r00r05         [24] 2320 	mov	dptr,#_dotmatrix_send_PARM_4
      00091A 74 04            [12] 2321 	mov	a,#0x04
      00091C F0               [24] 2322 	movx	@dptr,a
      00091D 75 82 09         [24] 2323 	mov	dpl,#0x09
      000920 12r00r5D         [24] 2324 	lcall	_dotmatrix_send
                                   2325 ;	dotmatrix.c:366: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY1, PLAYER1_UNIT);
      000923 90r00r03         [24] 2326 	mov	dptr,#_dotmatrix_send_PARM_2
      000926 74 07            [12] 2327 	mov	a,#0x07
      000928 F0               [24] 2328 	movx	@dptr,a
      000929 90r00r04         [24] 2329 	mov	dptr,#_dotmatrix_send_PARM_3
      00092C E4               [12] 2330 	clr	a
      00092D F0               [24] 2331 	movx	@dptr,a
      00092E 90r00r05         [24] 2332 	mov	dptr,#_dotmatrix_send_PARM_4
      000931 04               [12] 2333 	inc	a
      000932 F0               [24] 2334 	movx	@dptr,a
      000933 75 82 0A         [24] 2335 	mov	dpl,#0x0a
      000936 12r00r5D         [24] 2336 	lcall	_dotmatrix_send
                                   2337 ;	dotmatrix.c:367: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY1, 2);
      000939 90r00r03         [24] 2338 	mov	dptr,#_dotmatrix_send_PARM_2
      00093C 74 07            [12] 2339 	mov	a,#0x07
      00093E F0               [24] 2340 	movx	@dptr,a
      00093F 90r00r04         [24] 2341 	mov	dptr,#_dotmatrix_send_PARM_3
      000942 E4               [12] 2342 	clr	a
      000943 F0               [24] 2343 	movx	@dptr,a
      000944 90r00r05         [24] 2344 	mov	dptr,#_dotmatrix_send_PARM_4
      000947 74 02            [12] 2345 	mov	a,#0x02
      000949 F0               [24] 2346 	movx	@dptr,a
      00094A 75 82 0A         [24] 2347 	mov	dpl,#0x0a
      00094D 12r00r5D         [24] 2348 	lcall	_dotmatrix_send
                                   2349 ;	dotmatrix.c:368: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY1, 3);
      000950 90r00r03         [24] 2350 	mov	dptr,#_dotmatrix_send_PARM_2
      000953 74 07            [12] 2351 	mov	a,#0x07
      000955 F0               [24] 2352 	movx	@dptr,a
      000956 90r00r04         [24] 2353 	mov	dptr,#_dotmatrix_send_PARM_3
      000959 E4               [12] 2354 	clr	a
      00095A F0               [24] 2355 	movx	@dptr,a
      00095B 90r00r05         [24] 2356 	mov	dptr,#_dotmatrix_send_PARM_4
      00095E 74 03            [12] 2357 	mov	a,#0x03
      000960 F0               [24] 2358 	movx	@dptr,a
      000961 75 82 0A         [24] 2359 	mov	dpl,#0x0a
      000964 12r00r5D         [24] 2360 	lcall	_dotmatrix_send
                                   2361 ;	dotmatrix.c:369: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY1, PLAYER2_UNIT);
      000967 90r00r03         [24] 2362 	mov	dptr,#_dotmatrix_send_PARM_2
      00096A 74 07            [12] 2363 	mov	a,#0x07
      00096C F0               [24] 2364 	movx	@dptr,a
      00096D 90r00r04         [24] 2365 	mov	dptr,#_dotmatrix_send_PARM_3
      000970 E4               [12] 2366 	clr	a
      000971 F0               [24] 2367 	movx	@dptr,a
      000972 90r00r05         [24] 2368 	mov	dptr,#_dotmatrix_send_PARM_4
      000975 74 04            [12] 2369 	mov	a,#0x04
      000977 F0               [24] 2370 	movx	@dptr,a
      000978 75 82 0A         [24] 2371 	mov	dpl,#0x0a
      00097B 12r00r5D         [24] 2372 	lcall	_dotmatrix_send
                                   2373 ;	dotmatrix.c:371: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY2, PLAYER1_UNIT);
      00097E 90r00r03         [24] 2374 	mov	dptr,#_dotmatrix_send_PARM_2
      000981 74 07            [12] 2375 	mov	a,#0x07
      000983 F0               [24] 2376 	movx	@dptr,a
      000984 90r00r04         [24] 2377 	mov	dptr,#_dotmatrix_send_PARM_3
      000987 74 01            [12] 2378 	mov	a,#0x01
      000989 F0               [24] 2379 	movx	@dptr,a
      00098A 90r00r05         [24] 2380 	mov	dptr,#_dotmatrix_send_PARM_4
      00098D F0               [24] 2381 	movx	@dptr,a
      00098E 75 82 0A         [24] 2382 	mov	dpl,#0x0a
      000991 12r00r5D         [24] 2383 	lcall	_dotmatrix_send
                                   2384 ;	dotmatrix.c:372: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY2, 2);
      000994 90r00r03         [24] 2385 	mov	dptr,#_dotmatrix_send_PARM_2
      000997 74 07            [12] 2386 	mov	a,#0x07
      000999 F0               [24] 2387 	movx	@dptr,a
      00099A 90r00r04         [24] 2388 	mov	dptr,#_dotmatrix_send_PARM_3
      00099D 74 01            [12] 2389 	mov	a,#0x01
      00099F F0               [24] 2390 	movx	@dptr,a
      0009A0 90r00r05         [24] 2391 	mov	dptr,#_dotmatrix_send_PARM_4
      0009A3 04               [12] 2392 	inc	a
      0009A4 F0               [24] 2393 	movx	@dptr,a
      0009A5 75 82 0A         [24] 2394 	mov	dpl,#0x0a
      0009A8 12r00r5D         [24] 2395 	lcall	_dotmatrix_send
                                   2396 ;	dotmatrix.c:373: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY2, 3);
      0009AB 90r00r03         [24] 2397 	mov	dptr,#_dotmatrix_send_PARM_2
      0009AE 74 07            [12] 2398 	mov	a,#0x07
      0009B0 F0               [24] 2399 	movx	@dptr,a
      0009B1 90r00r04         [24] 2400 	mov	dptr,#_dotmatrix_send_PARM_3
      0009B4 74 01            [12] 2401 	mov	a,#0x01
      0009B6 F0               [24] 2402 	movx	@dptr,a
      0009B7 90r00r05         [24] 2403 	mov	dptr,#_dotmatrix_send_PARM_4
      0009BA 74 03            [12] 2404 	mov	a,#0x03
      0009BC F0               [24] 2405 	movx	@dptr,a
      0009BD 75 82 0A         [24] 2406 	mov	dpl,#0x0a
      0009C0 12r00r5D         [24] 2407 	lcall	_dotmatrix_send
                                   2408 ;	dotmatrix.c:374: dotmatrix_send(INTENSITY_REG, INTENSITY_REG_MED_INTENSITY_VAL, DISPLAY2, PLAYER2_UNIT);
      0009C3 90r00r03         [24] 2409 	mov	dptr,#_dotmatrix_send_PARM_2
      0009C6 74 07            [12] 2410 	mov	a,#0x07
      0009C8 F0               [24] 2411 	movx	@dptr,a
      0009C9 90r00r04         [24] 2412 	mov	dptr,#_dotmatrix_send_PARM_3
      0009CC 74 01            [12] 2413 	mov	a,#0x01
      0009CE F0               [24] 2414 	movx	@dptr,a
      0009CF 90r00r05         [24] 2415 	mov	dptr,#_dotmatrix_send_PARM_4
      0009D2 74 04            [12] 2416 	mov	a,#0x04
      0009D4 F0               [24] 2417 	movx	@dptr,a
      0009D5 75 82 0A         [24] 2418 	mov	dpl,#0x0a
      0009D8 12r00r5D         [24] 2419 	lcall	_dotmatrix_send
                                   2420 ;	dotmatrix.c:376: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY1, PLAYER1_UNIT);
      0009DB 90r00r03         [24] 2421 	mov	dptr,#_dotmatrix_send_PARM_2
      0009DE 74 07            [12] 2422 	mov	a,#0x07
      0009E0 F0               [24] 2423 	movx	@dptr,a
      0009E1 90r00r04         [24] 2424 	mov	dptr,#_dotmatrix_send_PARM_3
      0009E4 E4               [12] 2425 	clr	a
      0009E5 F0               [24] 2426 	movx	@dptr,a
      0009E6 90r00r05         [24] 2427 	mov	dptr,#_dotmatrix_send_PARM_4
      0009E9 04               [12] 2428 	inc	a
      0009EA F0               [24] 2429 	movx	@dptr,a
      0009EB 75 82 0B         [24] 2430 	mov	dpl,#0x0b
      0009EE 12r00r5D         [24] 2431 	lcall	_dotmatrix_send
                                   2432 ;	dotmatrix.c:377: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY1, 2);
      0009F1 90r00r03         [24] 2433 	mov	dptr,#_dotmatrix_send_PARM_2
      0009F4 74 07            [12] 2434 	mov	a,#0x07
      0009F6 F0               [24] 2435 	movx	@dptr,a
      0009F7 90r00r04         [24] 2436 	mov	dptr,#_dotmatrix_send_PARM_3
      0009FA E4               [12] 2437 	clr	a
      0009FB F0               [24] 2438 	movx	@dptr,a
      0009FC 90r00r05         [24] 2439 	mov	dptr,#_dotmatrix_send_PARM_4
      0009FF 74 02            [12] 2440 	mov	a,#0x02
      000A01 F0               [24] 2441 	movx	@dptr,a
      000A02 75 82 0B         [24] 2442 	mov	dpl,#0x0b
      000A05 12r00r5D         [24] 2443 	lcall	_dotmatrix_send
                                   2444 ;	dotmatrix.c:378: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY1, 3);
      000A08 90r00r03         [24] 2445 	mov	dptr,#_dotmatrix_send_PARM_2
      000A0B 74 07            [12] 2446 	mov	a,#0x07
      000A0D F0               [24] 2447 	movx	@dptr,a
      000A0E 90r00r04         [24] 2448 	mov	dptr,#_dotmatrix_send_PARM_3
      000A11 E4               [12] 2449 	clr	a
      000A12 F0               [24] 2450 	movx	@dptr,a
      000A13 90r00r05         [24] 2451 	mov	dptr,#_dotmatrix_send_PARM_4
      000A16 74 03            [12] 2452 	mov	a,#0x03
      000A18 F0               [24] 2453 	movx	@dptr,a
      000A19 75 82 0B         [24] 2454 	mov	dpl,#0x0b
      000A1C 12r00r5D         [24] 2455 	lcall	_dotmatrix_send
                                   2456 ;	dotmatrix.c:379: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY1, PLAYER2_UNIT);
      000A1F 90r00r03         [24] 2457 	mov	dptr,#_dotmatrix_send_PARM_2
      000A22 74 07            [12] 2458 	mov	a,#0x07
      000A24 F0               [24] 2459 	movx	@dptr,a
      000A25 90r00r04         [24] 2460 	mov	dptr,#_dotmatrix_send_PARM_3
      000A28 E4               [12] 2461 	clr	a
      000A29 F0               [24] 2462 	movx	@dptr,a
      000A2A 90r00r05         [24] 2463 	mov	dptr,#_dotmatrix_send_PARM_4
      000A2D 74 04            [12] 2464 	mov	a,#0x04
      000A2F F0               [24] 2465 	movx	@dptr,a
      000A30 75 82 0B         [24] 2466 	mov	dpl,#0x0b
      000A33 12r00r5D         [24] 2467 	lcall	_dotmatrix_send
                                   2468 ;	dotmatrix.c:381: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY2, PLAYER1_UNIT);
      000A36 90r00r03         [24] 2469 	mov	dptr,#_dotmatrix_send_PARM_2
      000A39 74 07            [12] 2470 	mov	a,#0x07
      000A3B F0               [24] 2471 	movx	@dptr,a
      000A3C 90r00r04         [24] 2472 	mov	dptr,#_dotmatrix_send_PARM_3
      000A3F 74 01            [12] 2473 	mov	a,#0x01
      000A41 F0               [24] 2474 	movx	@dptr,a
      000A42 90r00r05         [24] 2475 	mov	dptr,#_dotmatrix_send_PARM_4
      000A45 F0               [24] 2476 	movx	@dptr,a
      000A46 75 82 0B         [24] 2477 	mov	dpl,#0x0b
      000A49 12r00r5D         [24] 2478 	lcall	_dotmatrix_send
                                   2479 ;	dotmatrix.c:382: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY2, 2);
      000A4C 90r00r03         [24] 2480 	mov	dptr,#_dotmatrix_send_PARM_2
      000A4F 74 07            [12] 2481 	mov	a,#0x07
      000A51 F0               [24] 2482 	movx	@dptr,a
      000A52 90r00r04         [24] 2483 	mov	dptr,#_dotmatrix_send_PARM_3
      000A55 74 01            [12] 2484 	mov	a,#0x01
      000A57 F0               [24] 2485 	movx	@dptr,a
      000A58 90r00r05         [24] 2486 	mov	dptr,#_dotmatrix_send_PARM_4
      000A5B 04               [12] 2487 	inc	a
      000A5C F0               [24] 2488 	movx	@dptr,a
      000A5D 75 82 0B         [24] 2489 	mov	dpl,#0x0b
      000A60 12r00r5D         [24] 2490 	lcall	_dotmatrix_send
                                   2491 ;	dotmatrix.c:383: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY2, 3);
      000A63 90r00r03         [24] 2492 	mov	dptr,#_dotmatrix_send_PARM_2
      000A66 74 07            [12] 2493 	mov	a,#0x07
      000A68 F0               [24] 2494 	movx	@dptr,a
      000A69 90r00r04         [24] 2495 	mov	dptr,#_dotmatrix_send_PARM_3
      000A6C 74 01            [12] 2496 	mov	a,#0x01
      000A6E F0               [24] 2497 	movx	@dptr,a
      000A6F 90r00r05         [24] 2498 	mov	dptr,#_dotmatrix_send_PARM_4
      000A72 74 03            [12] 2499 	mov	a,#0x03
      000A74 F0               [24] 2500 	movx	@dptr,a
      000A75 75 82 0B         [24] 2501 	mov	dpl,#0x0b
      000A78 12r00r5D         [24] 2502 	lcall	_dotmatrix_send
                                   2503 ;	dotmatrix.c:384: dotmatrix_send(SCAN_LIMIT_REG, SCAN_LIMIT_REG_ALL_SCAN_LIMIT_VAL, DISPLAY2, PLAYER2_UNIT);
      000A7B 90r00r03         [24] 2504 	mov	dptr,#_dotmatrix_send_PARM_2
      000A7E 74 07            [12] 2505 	mov	a,#0x07
      000A80 F0               [24] 2506 	movx	@dptr,a
      000A81 90r00r04         [24] 2507 	mov	dptr,#_dotmatrix_send_PARM_3
      000A84 74 01            [12] 2508 	mov	a,#0x01
      000A86 F0               [24] 2509 	movx	@dptr,a
      000A87 90r00r05         [24] 2510 	mov	dptr,#_dotmatrix_send_PARM_4
      000A8A 74 04            [12] 2511 	mov	a,#0x04
      000A8C F0               [24] 2512 	movx	@dptr,a
      000A8D 75 82 0B         [24] 2513 	mov	dpl,#0x0b
      000A90 12r00r5D         [24] 2514 	lcall	_dotmatrix_send
                                   2515 ;	dotmatrix.c:386: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY1, PLAYER1_UNIT); // turn on chip
      000A93 90r00r03         [24] 2516 	mov	dptr,#_dotmatrix_send_PARM_2
      000A96 74 01            [12] 2517 	mov	a,#0x01
      000A98 F0               [24] 2518 	movx	@dptr,a
      000A99 90r00r04         [24] 2519 	mov	dptr,#_dotmatrix_send_PARM_3
      000A9C E4               [12] 2520 	clr	a
      000A9D F0               [24] 2521 	movx	@dptr,a
      000A9E 90r00r05         [24] 2522 	mov	dptr,#_dotmatrix_send_PARM_4
      000AA1 04               [12] 2523 	inc	a
      000AA2 F0               [24] 2524 	movx	@dptr,a
      000AA3 75 82 0C         [24] 2525 	mov	dpl,#0x0c
      000AA6 12r00r5D         [24] 2526 	lcall	_dotmatrix_send
                                   2527 ;	dotmatrix.c:387: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY1, 2);            // turn on chip
      000AA9 90r00r03         [24] 2528 	mov	dptr,#_dotmatrix_send_PARM_2
      000AAC 74 01            [12] 2529 	mov	a,#0x01
      000AAE F0               [24] 2530 	movx	@dptr,a
      000AAF 90r00r04         [24] 2531 	mov	dptr,#_dotmatrix_send_PARM_3
      000AB2 E4               [12] 2532 	clr	a
      000AB3 F0               [24] 2533 	movx	@dptr,a
      000AB4 90r00r05         [24] 2534 	mov	dptr,#_dotmatrix_send_PARM_4
      000AB7 74 02            [12] 2535 	mov	a,#0x02
      000AB9 F0               [24] 2536 	movx	@dptr,a
      000ABA 75 82 0C         [24] 2537 	mov	dpl,#0x0c
      000ABD 12r00r5D         [24] 2538 	lcall	_dotmatrix_send
                                   2539 ;	dotmatrix.c:388: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY1, 3);            // turn on chip
      000AC0 90r00r03         [24] 2540 	mov	dptr,#_dotmatrix_send_PARM_2
      000AC3 74 01            [12] 2541 	mov	a,#0x01
      000AC5 F0               [24] 2542 	movx	@dptr,a
      000AC6 90r00r04         [24] 2543 	mov	dptr,#_dotmatrix_send_PARM_3
      000AC9 E4               [12] 2544 	clr	a
      000ACA F0               [24] 2545 	movx	@dptr,a
      000ACB 90r00r05         [24] 2546 	mov	dptr,#_dotmatrix_send_PARM_4
      000ACE 74 03            [12] 2547 	mov	a,#0x03
      000AD0 F0               [24] 2548 	movx	@dptr,a
      000AD1 75 82 0C         [24] 2549 	mov	dpl,#0x0c
      000AD4 12r00r5D         [24] 2550 	lcall	_dotmatrix_send
                                   2551 ;	dotmatrix.c:389: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY1, PLAYER2_UNIT); // turn on chip
      000AD7 90r00r03         [24] 2552 	mov	dptr,#_dotmatrix_send_PARM_2
      000ADA 74 01            [12] 2553 	mov	a,#0x01
      000ADC F0               [24] 2554 	movx	@dptr,a
      000ADD 90r00r04         [24] 2555 	mov	dptr,#_dotmatrix_send_PARM_3
      000AE0 E4               [12] 2556 	clr	a
      000AE1 F0               [24] 2557 	movx	@dptr,a
      000AE2 90r00r05         [24] 2558 	mov	dptr,#_dotmatrix_send_PARM_4
      000AE5 74 04            [12] 2559 	mov	a,#0x04
      000AE7 F0               [24] 2560 	movx	@dptr,a
      000AE8 75 82 0C         [24] 2561 	mov	dpl,#0x0c
      000AEB 12r00r5D         [24] 2562 	lcall	_dotmatrix_send
                                   2563 ;	dotmatrix.c:391: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY2, PLAYER1_UNIT); // turn on chip
      000AEE 90r00r03         [24] 2564 	mov	dptr,#_dotmatrix_send_PARM_2
      000AF1 74 01            [12] 2565 	mov	a,#0x01
      000AF3 F0               [24] 2566 	movx	@dptr,a
      000AF4 90r00r04         [24] 2567 	mov	dptr,#_dotmatrix_send_PARM_3
      000AF7 F0               [24] 2568 	movx	@dptr,a
      000AF8 90r00r05         [24] 2569 	mov	dptr,#_dotmatrix_send_PARM_4
      000AFB F0               [24] 2570 	movx	@dptr,a
      000AFC 75 82 0C         [24] 2571 	mov	dpl,#0x0c
      000AFF 12r00r5D         [24] 2572 	lcall	_dotmatrix_send
                                   2573 ;	dotmatrix.c:392: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY2, 2);            // turn on chip
      000B02 90r00r03         [24] 2574 	mov	dptr,#_dotmatrix_send_PARM_2
      000B05 74 01            [12] 2575 	mov	a,#0x01
      000B07 F0               [24] 2576 	movx	@dptr,a
      000B08 90r00r04         [24] 2577 	mov	dptr,#_dotmatrix_send_PARM_3
      000B0B F0               [24] 2578 	movx	@dptr,a
      000B0C 90r00r05         [24] 2579 	mov	dptr,#_dotmatrix_send_PARM_4
      000B0F 04               [12] 2580 	inc	a
      000B10 F0               [24] 2581 	movx	@dptr,a
      000B11 75 82 0C         [24] 2582 	mov	dpl,#0x0c
      000B14 12r00r5D         [24] 2583 	lcall	_dotmatrix_send
                                   2584 ;	dotmatrix.c:393: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY2, 3);            // turn on chip
      000B17 90r00r03         [24] 2585 	mov	dptr,#_dotmatrix_send_PARM_2
      000B1A 74 01            [12] 2586 	mov	a,#0x01
      000B1C F0               [24] 2587 	movx	@dptr,a
      000B1D 90r00r04         [24] 2588 	mov	dptr,#_dotmatrix_send_PARM_3
      000B20 F0               [24] 2589 	movx	@dptr,a
      000B21 90r00r05         [24] 2590 	mov	dptr,#_dotmatrix_send_PARM_4
      000B24 74 03            [12] 2591 	mov	a,#0x03
      000B26 F0               [24] 2592 	movx	@dptr,a
      000B27 75 82 0C         [24] 2593 	mov	dpl,#0x0c
      000B2A 12r00r5D         [24] 2594 	lcall	_dotmatrix_send
                                   2595 ;	dotmatrix.c:394: dotmatrix_send(SHUTDOWN_REG, SHUTDOWN_REG_NORMAL_MODE_VAL, DISPLAY2, PLAYER2_UNIT); // turn on chip
      000B2D 90r00r03         [24] 2596 	mov	dptr,#_dotmatrix_send_PARM_2
      000B30 74 01            [12] 2597 	mov	a,#0x01
      000B32 F0               [24] 2598 	movx	@dptr,a
      000B33 90r00r04         [24] 2599 	mov	dptr,#_dotmatrix_send_PARM_3
      000B36 F0               [24] 2600 	movx	@dptr,a
      000B37 90r00r05         [24] 2601 	mov	dptr,#_dotmatrix_send_PARM_4
      000B3A 74 04            [12] 2602 	mov	a,#0x04
      000B3C F0               [24] 2603 	movx	@dptr,a
      000B3D 75 82 0C         [24] 2604 	mov	dpl,#0x0c
      000B40 12r00r5D         [24] 2605 	lcall	_dotmatrix_send
                                   2606 ;	dotmatrix.c:396: for (int unit = 1; unit <= 4; unit++)
      000B43 7E 01            [12] 2607 	mov	r6,#0x01
      000B45 7F 00            [12] 2608 	mov	r7,#0x00
      000B47                       2609 00109$:
      000B47 C3               [12] 2610 	clr	c
      000B48 74 04            [12] 2611 	mov	a,#0x04
      000B4A 9E               [12] 2612 	subb	a,r6
      000B4B 74 80            [12] 2613 	mov	a,#(0x00 ^ 0x80)
      000B4D 8F F0            [24] 2614 	mov	b,r7
      000B4F 63 F0 80         [24] 2615 	xrl	b,#0x80
      000B52 95 F0            [12] 2616 	subb	a,b
      000B54 40 54            [24] 2617 	jc	00102$
                                   2618 ;	dotmatrix.c:398: for (int row = 1; row <= EIGHT; row++)
      000B56 8E 04            [24] 2619 	mov	ar4,r6
      000B58 8F 05            [24] 2620 	mov	ar5,r7
      000B5A 7A 01            [12] 2621 	mov	r2,#0x01
      000B5C 7B 00            [12] 2622 	mov	r3,#0x00
      000B5E                       2623 00106$:
      000B5E C3               [12] 2624 	clr	c
      000B5F 74 08            [12] 2625 	mov	a,#0x08
      000B61 9A               [12] 2626 	subb	a,r2
      000B62 74 80            [12] 2627 	mov	a,#(0x00 ^ 0x80)
      000B64 8B F0            [24] 2628 	mov	b,r3
      000B66 63 F0 80         [24] 2629 	xrl	b,#0x80
      000B69 95 F0            [12] 2630 	subb	a,b
      000B6B 40 36            [24] 2631 	jc	00110$
                                   2632 ;	dotmatrix.c:400: dotmatrix_send(row, ZERO, DISPLAY1, unit);
      000B6D 8A 01            [24] 2633 	mov	ar1,r2
      000B6F 8C 00            [24] 2634 	mov	ar0,r4
      000B71 90r00r03         [24] 2635 	mov	dptr,#_dotmatrix_send_PARM_2
      000B74 E4               [12] 2636 	clr	a
      000B75 F0               [24] 2637 	movx	@dptr,a
      000B76 90r00r04         [24] 2638 	mov	dptr,#_dotmatrix_send_PARM_3
      000B79 F0               [24] 2639 	movx	@dptr,a
      000B7A 90r00r05         [24] 2640 	mov	dptr,#_dotmatrix_send_PARM_4
      000B7D E8               [12] 2641 	mov	a,r0
      000B7E F0               [24] 2642 	movx	@dptr,a
      000B7F 89 82            [24] 2643 	mov	dpl,r1
      000B81 C0 07            [24] 2644 	push	ar7
      000B83 C0 06            [24] 2645 	push	ar6
      000B85 C0 05            [24] 2646 	push	ar5
      000B87 C0 04            [24] 2647 	push	ar4
      000B89 C0 03            [24] 2648 	push	ar3
      000B8B C0 02            [24] 2649 	push	ar2
      000B8D 12r00r5D         [24] 2650 	lcall	_dotmatrix_send
      000B90 D0 02            [24] 2651 	pop	ar2
      000B92 D0 03            [24] 2652 	pop	ar3
      000B94 D0 04            [24] 2653 	pop	ar4
      000B96 D0 05            [24] 2654 	pop	ar5
      000B98 D0 06            [24] 2655 	pop	ar6
      000B9A D0 07            [24] 2656 	pop	ar7
                                   2657 ;	dotmatrix.c:398: for (int row = 1; row <= EIGHT; row++)
      000B9C 0A               [12] 2658 	inc	r2
      000B9D BA 00 BE         [24] 2659 	cjne	r2,#0x00,00106$
      000BA0 0B               [12] 2660 	inc	r3
      000BA1 80 BB            [24] 2661 	sjmp	00106$
      000BA3                       2662 00110$:
                                   2663 ;	dotmatrix.c:396: for (int unit = 1; unit <= 4; unit++)
      000BA3 0E               [12] 2664 	inc	r6
      000BA4 BE 00 A0         [24] 2665 	cjne	r6,#0x00,00109$
      000BA7 0F               [12] 2666 	inc	r7
      000BA8 80 9D            [24] 2667 	sjmp	00109$
      000BAA                       2668 00102$:
                                   2669 ;	dotmatrix.c:404: for (int unit = 1; unit <= 4; unit++)
      000BAA 7E 01            [12] 2670 	mov	r6,#0x01
      000BAC 7F 00            [12] 2671 	mov	r7,#0x00
      000BAE                       2672 00115$:
      000BAE C3               [12] 2673 	clr	c
      000BAF 74 04            [12] 2674 	mov	a,#0x04
      000BB1 9E               [12] 2675 	subb	a,r6
      000BB2 74 80            [12] 2676 	mov	a,#(0x00 ^ 0x80)
      000BB4 8F F0            [24] 2677 	mov	b,r7
      000BB6 63 F0 80         [24] 2678 	xrl	b,#0x80
      000BB9 95 F0            [12] 2679 	subb	a,b
      000BBB 40 55            [24] 2680 	jc	00104$
                                   2681 ;	dotmatrix.c:406: for (int row = 1; row <= EIGHT; row++)
      000BBD 8E 04            [24] 2682 	mov	ar4,r6
      000BBF 8F 05            [24] 2683 	mov	ar5,r7
      000BC1 7A 01            [12] 2684 	mov	r2,#0x01
      000BC3 7B 00            [12] 2685 	mov	r3,#0x00
      000BC5                       2686 00112$:
      000BC5 C3               [12] 2687 	clr	c
      000BC6 74 08            [12] 2688 	mov	a,#0x08
      000BC8 9A               [12] 2689 	subb	a,r2
      000BC9 74 80            [12] 2690 	mov	a,#(0x00 ^ 0x80)
      000BCB 8B F0            [24] 2691 	mov	b,r3
      000BCD 63 F0 80         [24] 2692 	xrl	b,#0x80
      000BD0 95 F0            [12] 2693 	subb	a,b
      000BD2 40 37            [24] 2694 	jc	00116$
                                   2695 ;	dotmatrix.c:408: dotmatrix_send(row, ZERO, DISPLAY2, unit);
      000BD4 8A 01            [24] 2696 	mov	ar1,r2
      000BD6 8C 00            [24] 2697 	mov	ar0,r4
      000BD8 90r00r03         [24] 2698 	mov	dptr,#_dotmatrix_send_PARM_2
      000BDB E4               [12] 2699 	clr	a
      000BDC F0               [24] 2700 	movx	@dptr,a
      000BDD 90r00r04         [24] 2701 	mov	dptr,#_dotmatrix_send_PARM_3
      000BE0 04               [12] 2702 	inc	a
      000BE1 F0               [24] 2703 	movx	@dptr,a
      000BE2 90r00r05         [24] 2704 	mov	dptr,#_dotmatrix_send_PARM_4
      000BE5 E8               [12] 2705 	mov	a,r0
      000BE6 F0               [24] 2706 	movx	@dptr,a
      000BE7 89 82            [24] 2707 	mov	dpl,r1
      000BE9 C0 07            [24] 2708 	push	ar7
      000BEB C0 06            [24] 2709 	push	ar6
      000BED C0 05            [24] 2710 	push	ar5
      000BEF C0 04            [24] 2711 	push	ar4
      000BF1 C0 03            [24] 2712 	push	ar3
      000BF3 C0 02            [24] 2713 	push	ar2
      000BF5 12r00r5D         [24] 2714 	lcall	_dotmatrix_send
      000BF8 D0 02            [24] 2715 	pop	ar2
      000BFA D0 03            [24] 2716 	pop	ar3
      000BFC D0 04            [24] 2717 	pop	ar4
      000BFE D0 05            [24] 2718 	pop	ar5
      000C00 D0 06            [24] 2719 	pop	ar6
      000C02 D0 07            [24] 2720 	pop	ar7
                                   2721 ;	dotmatrix.c:406: for (int row = 1; row <= EIGHT; row++)
      000C04 0A               [12] 2722 	inc	r2
      000C05 BA 00 BD         [24] 2723 	cjne	r2,#0x00,00112$
      000C08 0B               [12] 2724 	inc	r3
      000C09 80 BA            [24] 2725 	sjmp	00112$
      000C0B                       2726 00116$:
                                   2727 ;	dotmatrix.c:404: for (int unit = 1; unit <= 4; unit++)
      000C0B 0E               [12] 2728 	inc	r6
      000C0C BE 00 9F         [24] 2729 	cjne	r6,#0x00,00115$
      000C0F 0F               [12] 2730 	inc	r7
      000C10 80 9C            [24] 2731 	sjmp	00115$
      000C12                       2732 00104$:
                                   2733 ;	dotmatrix.c:412: dotmatrix_send(current_row_location_of_player1, PLAYER1_ROW, DISPLAY1, PLAYER1_UNIT);
      000C12 90r00r81         [24] 2734 	mov	dptr,#_current_row_location_of_player1
      000C15 E0               [24] 2735 	movx	a,@dptr
      000C16 FF               [12] 2736 	mov	r7,a
      000C17 90r00r03         [24] 2737 	mov	dptr,#_dotmatrix_send_PARM_2
      000C1A 74 80            [12] 2738 	mov	a,#0x80
      000C1C F0               [24] 2739 	movx	@dptr,a
      000C1D 90r00r04         [24] 2740 	mov	dptr,#_dotmatrix_send_PARM_3
      000C20 E4               [12] 2741 	clr	a
      000C21 F0               [24] 2742 	movx	@dptr,a
      000C22 90r00r05         [24] 2743 	mov	dptr,#_dotmatrix_send_PARM_4
      000C25 04               [12] 2744 	inc	a
      000C26 F0               [24] 2745 	movx	@dptr,a
      000C27 8F 82            [24] 2746 	mov	dpl,r7
      000C29 12r00r5D         [24] 2747 	lcall	_dotmatrix_send
                                   2748 ;	dotmatrix.c:413: dotmatrix_send(current_row_location_of_player1 + 1, PLAYER1_ROW, DISPLAY1, PLAYER1_UNIT);
      000C2C 90r00r81         [24] 2749 	mov	dptr,#_current_row_location_of_player1
      000C2F E0               [24] 2750 	movx	a,@dptr
      000C30 FF               [12] 2751 	mov	r7,a
      000C31 0F               [12] 2752 	inc	r7
      000C32 90r00r03         [24] 2753 	mov	dptr,#_dotmatrix_send_PARM_2
      000C35 74 80            [12] 2754 	mov	a,#0x80
      000C37 F0               [24] 2755 	movx	@dptr,a
      000C38 90r00r04         [24] 2756 	mov	dptr,#_dotmatrix_send_PARM_3
      000C3B E4               [12] 2757 	clr	a
      000C3C F0               [24] 2758 	movx	@dptr,a
      000C3D 90r00r05         [24] 2759 	mov	dptr,#_dotmatrix_send_PARM_4
      000C40 04               [12] 2760 	inc	a
      000C41 F0               [24] 2761 	movx	@dptr,a
      000C42 8F 82            [24] 2762 	mov	dpl,r7
      000C44 12r00r5D         [24] 2763 	lcall	_dotmatrix_send
                                   2764 ;	dotmatrix.c:414: dotmatrix_send(1, PLAYER1_ROW, DISPLAY2, PLAYER1_UNIT);
      000C47 90r00r03         [24] 2765 	mov	dptr,#_dotmatrix_send_PARM_2
      000C4A 74 80            [12] 2766 	mov	a,#0x80
      000C4C F0               [24] 2767 	movx	@dptr,a
      000C4D 90r00r04         [24] 2768 	mov	dptr,#_dotmatrix_send_PARM_3
      000C50 23               [12] 2769 	rl	a
      000C51 F0               [24] 2770 	movx	@dptr,a
      000C52 90r00r05         [24] 2771 	mov	dptr,#_dotmatrix_send_PARM_4
      000C55 F0               [24] 2772 	movx	@dptr,a
      000C56 75 82 01         [24] 2773 	mov	dpl,#0x01
      000C59 12r00r5D         [24] 2774 	lcall	_dotmatrix_send
                                   2775 ;	dotmatrix.c:415: dotmatrix_send(2, PLAYER1_ROW, DISPLAY2, PLAYER1_UNIT);
      000C5C 90r00r03         [24] 2776 	mov	dptr,#_dotmatrix_send_PARM_2
      000C5F 74 80            [12] 2777 	mov	a,#0x80
      000C61 F0               [24] 2778 	movx	@dptr,a
      000C62 90r00r04         [24] 2779 	mov	dptr,#_dotmatrix_send_PARM_3
      000C65 23               [12] 2780 	rl	a
      000C66 F0               [24] 2781 	movx	@dptr,a
      000C67 90r00r05         [24] 2782 	mov	dptr,#_dotmatrix_send_PARM_4
      000C6A F0               [24] 2783 	movx	@dptr,a
      000C6B 75 82 02         [24] 2784 	mov	dpl,#0x02
      000C6E 12r00r5D         [24] 2785 	lcall	_dotmatrix_send
                                   2786 ;	dotmatrix.c:417: dotmatrix_send(current_row_location_of_player2, PLAYER2_ROW, DISPLAY1, PLAYER2_UNIT);
      000C71 90r00r82         [24] 2787 	mov	dptr,#_current_row_location_of_player2
      000C74 E0               [24] 2788 	movx	a,@dptr
      000C75 FF               [12] 2789 	mov	r7,a
      000C76 90r00r03         [24] 2790 	mov	dptr,#_dotmatrix_send_PARM_2
      000C79 74 01            [12] 2791 	mov	a,#0x01
      000C7B F0               [24] 2792 	movx	@dptr,a
      000C7C 90r00r04         [24] 2793 	mov	dptr,#_dotmatrix_send_PARM_3
      000C7F E4               [12] 2794 	clr	a
      000C80 F0               [24] 2795 	movx	@dptr,a
      000C81 90r00r05         [24] 2796 	mov	dptr,#_dotmatrix_send_PARM_4
      000C84 74 04            [12] 2797 	mov	a,#0x04
      000C86 F0               [24] 2798 	movx	@dptr,a
      000C87 8F 82            [24] 2799 	mov	dpl,r7
      000C89 12r00r5D         [24] 2800 	lcall	_dotmatrix_send
                                   2801 ;	dotmatrix.c:418: dotmatrix_send(current_row_location_of_player2+1, PLAYER2_ROW, DISPLAY1, PLAYER2_UNIT);
      000C8C 90r00r82         [24] 2802 	mov	dptr,#_current_row_location_of_player2
      000C8F E0               [24] 2803 	movx	a,@dptr
      000C90 FF               [12] 2804 	mov	r7,a
      000C91 0F               [12] 2805 	inc	r7
      000C92 90r00r03         [24] 2806 	mov	dptr,#_dotmatrix_send_PARM_2
      000C95 74 01            [12] 2807 	mov	a,#0x01
      000C97 F0               [24] 2808 	movx	@dptr,a
      000C98 90r00r04         [24] 2809 	mov	dptr,#_dotmatrix_send_PARM_3
      000C9B E4               [12] 2810 	clr	a
      000C9C F0               [24] 2811 	movx	@dptr,a
      000C9D 90r00r05         [24] 2812 	mov	dptr,#_dotmatrix_send_PARM_4
      000CA0 74 04            [12] 2813 	mov	a,#0x04
      000CA2 F0               [24] 2814 	movx	@dptr,a
      000CA3 8F 82            [24] 2815 	mov	dpl,r7
      000CA5 12r00r5D         [24] 2816 	lcall	_dotmatrix_send
                                   2817 ;	dotmatrix.c:419: dotmatrix_send(1, PLAYER2_ROW, DISPLAY2, PLAYER2_UNIT);
      000CA8 90r00r03         [24] 2818 	mov	dptr,#_dotmatrix_send_PARM_2
      000CAB 74 01            [12] 2819 	mov	a,#0x01
      000CAD F0               [24] 2820 	movx	@dptr,a
      000CAE 90r00r04         [24] 2821 	mov	dptr,#_dotmatrix_send_PARM_3
      000CB1 F0               [24] 2822 	movx	@dptr,a
      000CB2 90r00r05         [24] 2823 	mov	dptr,#_dotmatrix_send_PARM_4
      000CB5 74 04            [12] 2824 	mov	a,#0x04
      000CB7 F0               [24] 2825 	movx	@dptr,a
      000CB8 75 82 01         [24] 2826 	mov	dpl,#0x01
      000CBB 12r00r5D         [24] 2827 	lcall	_dotmatrix_send
                                   2828 ;	dotmatrix.c:420: dotmatrix_send(2, PLAYER2_ROW, DISPLAY2, PLAYER2_UNIT);
      000CBE 90r00r03         [24] 2829 	mov	dptr,#_dotmatrix_send_PARM_2
      000CC1 74 01            [12] 2830 	mov	a,#0x01
      000CC3 F0               [24] 2831 	movx	@dptr,a
      000CC4 90r00r04         [24] 2832 	mov	dptr,#_dotmatrix_send_PARM_3
      000CC7 F0               [24] 2833 	movx	@dptr,a
      000CC8 90r00r05         [24] 2834 	mov	dptr,#_dotmatrix_send_PARM_4
      000CCB 74 04            [12] 2835 	mov	a,#0x04
      000CCD F0               [24] 2836 	movx	@dptr,a
      000CCE 75 82 02         [24] 2837 	mov	dpl,#0x02
      000CD1 12r00r5D         [24] 2838 	lcall	_dotmatrix_send
                                   2839 ;	dotmatrix.c:422: BUZZER_OFF;
                                   2840 ;	assignBit
      000CD4 D2 82            [12] 2841 	setb	_P0_2
                                   2842 ;	dotmatrix.c:424: }
      000CD6 22               [24] 2843 	ret
                                   2844 ;------------------------------------------------------------
                                   2845 ;Allocation info for local variables in function 'erase_ball'
                                   2846 ;------------------------------------------------------------
                                   2847 ;display                   Allocated with name '_erase_ball_display_65536_88'
                                   2848 ;unit                      Allocated with name '_erase_ball_unit_65536_88'
                                   2849 ;ball_x_range              Allocated with name '_erase_ball_ball_x_range_65536_88'
                                   2850 ;ball_y_range              Allocated with name '_erase_ball_ball_y_range_65536_88'
                                   2851 ;ball_y_bitwise            Allocated with name '_erase_ball_ball_y_bitwise_65536_88'
                                   2852 ;isBallNearPlayer1         Allocated with name '_erase_ball_isBallNearPlayer1_65537_89'
                                   2853 ;isBallNearPlayer2         Allocated with name '_erase_ball_isBallNearPlayer2_65537_89'
                                   2854 ;data_to_send              Allocated with name '_erase_ball_data_to_send_65537_89'
                                   2855 ;------------------------------------------------------------
                                   2856 ;	dotmatrix.c:427: void erase_ball()
                                   2857 ;	-----------------------------------------
                                   2858 ;	 function erase_ball
                                   2859 ;	-----------------------------------------
      000CD7                       2860 _erase_ball:
                                   2861 ;	dotmatrix.c:429: display_t display = get_display(b_x);
      000CD7 90r00r84         [24] 2862 	mov	dptr,#_b_x
      000CDA E0               [24] 2863 	movx	a,@dptr
      000CDB F5 82            [12] 2864 	mov	dpl,a
      000CDD 12r00r3A         [24] 2865 	lcall	_get_display
      000CE0 AF 82            [24] 2866 	mov	r7,dpl
                                   2867 ;	dotmatrix.c:430: uint8_t unit = get_unit(b_y);
      000CE2 90r00r83         [24] 2868 	mov	dptr,#_b_y
      000CE5 E0               [24] 2869 	movx	a,@dptr
      000CE6 F5 82            [12] 2870 	mov	dpl,a
      000CE8 C0 07            [24] 2871 	push	ar7
      000CEA 12r00r13         [24] 2872 	lcall	_get_unit
      000CED AE 82            [24] 2873 	mov	r6,dpl
      000CEF D0 07            [24] 2874 	pop	ar7
                                   2875 ;	dotmatrix.c:435: ball_x_range = (b_x & 0x07) ? (b_x & 0x07) : EIGHT;
      000CF1 90r00r84         [24] 2876 	mov	dptr,#_b_x
      000CF4 E0               [24] 2877 	movx	a,@dptr
      000CF5 FD               [12] 2878 	mov	r5,a
      000CF6 54 07            [12] 2879 	anl	a,#0x07
      000CF8 60 09            [24] 2880 	jz	00108$
      000CFA 8D 03            [24] 2881 	mov	ar3,r5
      000CFC 53 03 07         [24] 2882 	anl	ar3,#0x07
      000CFF 7C 00            [12] 2883 	mov	r4,#0x00
      000D01 80 04            [24] 2884 	sjmp	00109$
      000D03                       2885 00108$:
      000D03 7B 08            [12] 2886 	mov	r3,#0x08
      000D05 7C 00            [12] 2887 	mov	r4,#0x00
      000D07                       2888 00109$:
                                   2889 ;	dotmatrix.c:437: ball_y_range = (b_y & 0x07) ? (EIGHT - ((b_y) & 0x07)) : 0;
      000D07 90r00r83         [24] 2890 	mov	dptr,#_b_y
      000D0A E0               [24] 2891 	movx	a,@dptr
      000D0B FC               [12] 2892 	mov	r4,a
      000D0C 54 07            [12] 2893 	anl	a,#0x07
      000D0E 60 0E            [24] 2894 	jz	00110$
      000D10 74 07            [12] 2895 	mov	a,#0x07
      000D12 5C               [12] 2896 	anl	a,r4
      000D13 D3               [12] 2897 	setb	c
      000D14 94 08            [12] 2898 	subb	a,#0x08
      000D16 F4               [12] 2899 	cpl	a
      000D17 FA               [12] 2900 	mov	r2,a
      000D18 33               [12] 2901 	rlc	a
      000D19 95 E0            [12] 2902 	subb	a,acc
      000D1B FC               [12] 2903 	mov	r4,a
      000D1C 80 04            [24] 2904 	sjmp	00111$
      000D1E                       2905 00110$:
      000D1E 7A 00            [12] 2906 	mov	r2,#0x00
      000D20 7C 00            [12] 2907 	mov	r4,#0x00
      000D22                       2908 00111$:
                                   2909 ;	dotmatrix.c:438: ball_y_bitwise = 0 << ball_y_range;
      000D22 8A F0            [24] 2910 	mov	b,r2
      000D24 05 F0            [12] 2911 	inc	b
      000D26 E4               [12] 2912 	clr	a
      000D27 80 02            [24] 2913 	sjmp	00158$
      000D29                       2914 00156$:
      000D29 25 E0            [12] 2915 	add	a,acc
      000D2B                       2916 00158$:
      000D2B D5 F0 FB         [24] 2917 	djnz	b,00156$
      000D2E FC               [12] 2918 	mov	r4,a
                                   2919 ;	dotmatrix.c:441: uint8_t isBallNearPlayer1 = (((current_row_location_of_player1 <= b_x) && ((current_row_location_of_player1 + 3) >= b_x)) && (unit == 1));
      000D2F 90r00r81         [24] 2920 	mov	dptr,#_current_row_location_of_player1
      000D32 E0               [24] 2921 	movx	a,@dptr
      000D33 FA               [12] 2922 	mov	r2,a
      000D34 C3               [12] 2923 	clr	c
      000D35 ED               [12] 2924 	mov	a,r5
      000D36 9A               [12] 2925 	subb	a,r2
      000D37 40 2A            [24] 2926 	jc	00112$
      000D39 C0 03            [24] 2927 	push	ar3
      000D3B 90r00r81         [24] 2928 	mov	dptr,#_current_row_location_of_player1
      000D3E E0               [24] 2929 	movx	a,@dptr
      000D3F F9               [12] 2930 	mov	r1,a
      000D40 7A 00            [12] 2931 	mov	r2,#0x00
      000D42 74 03            [12] 2932 	mov	a,#0x03
      000D44 29               [12] 2933 	add	a,r1
      000D45 F9               [12] 2934 	mov	r1,a
      000D46 E4               [12] 2935 	clr	a
      000D47 3A               [12] 2936 	addc	a,r2
      000D48 FA               [12] 2937 	mov	r2,a
      000D49 8D 00            [24] 2938 	mov	ar0,r5
      000D4B 7B 00            [12] 2939 	mov	r3,#0x00
      000D4D C3               [12] 2940 	clr	c
      000D4E E9               [12] 2941 	mov	a,r1
      000D4F 98               [12] 2942 	subb	a,r0
      000D50 EA               [12] 2943 	mov	a,r2
      000D51 64 80            [12] 2944 	xrl	a,#0x80
      000D53 8B F0            [24] 2945 	mov	b,r3
      000D55 63 F0 80         [24] 2946 	xrl	b,#0x80
      000D58 95 F0            [12] 2947 	subb	a,b
      000D5A D0 03            [24] 2948 	pop	ar3
      000D5C 40 05            [24] 2949 	jc	00112$
      000D5E BE 01 02         [24] 2950 	cjne	r6,#0x01,00161$
      000D61 80 04            [24] 2951 	sjmp	00113$
      000D63                       2952 00161$:
      000D63                       2953 00112$:
      000D63 7A 00            [12] 2954 	mov	r2,#0x00
      000D65 80 02            [24] 2955 	sjmp	00114$
      000D67                       2956 00113$:
      000D67 7A 01            [12] 2957 	mov	r2,#0x01
      000D69                       2958 00114$:
                                   2959 ;	dotmatrix.c:442: uint8_t isBallNearPlayer2 = (((current_row_location_of_player2 <= b_x) && ((current_row_location_of_player2 + 3) >= b_x)) && (unit == 4));
      000D69 90r00r82         [24] 2960 	mov	dptr,#_current_row_location_of_player2
      000D6C E0               [24] 2961 	movx	a,@dptr
      000D6D F9               [12] 2962 	mov	r1,a
      000D6E C3               [12] 2963 	clr	c
      000D6F ED               [12] 2964 	mov	a,r5
      000D70 99               [12] 2965 	subb	a,r1
      000D71 40 2A            [24] 2966 	jc	00118$
      000D73 C0 02            [24] 2967 	push	ar2
      000D75 90r00r82         [24] 2968 	mov	dptr,#_current_row_location_of_player2
      000D78 E0               [24] 2969 	movx	a,@dptr
      000D79 F8               [12] 2970 	mov	r0,a
      000D7A 79 00            [12] 2971 	mov	r1,#0x00
      000D7C 74 03            [12] 2972 	mov	a,#0x03
      000D7E 28               [12] 2973 	add	a,r0
      000D7F F8               [12] 2974 	mov	r0,a
      000D80 E4               [12] 2975 	clr	a
      000D81 39               [12] 2976 	addc	a,r1
      000D82 F9               [12] 2977 	mov	r1,a
      000D83 8D 02            [24] 2978 	mov	ar2,r5
      000D85 7D 00            [12] 2979 	mov	r5,#0x00
      000D87 C3               [12] 2980 	clr	c
      000D88 E8               [12] 2981 	mov	a,r0
      000D89 9A               [12] 2982 	subb	a,r2
      000D8A E9               [12] 2983 	mov	a,r1
      000D8B 64 80            [12] 2984 	xrl	a,#0x80
      000D8D 8D F0            [24] 2985 	mov	b,r5
      000D8F 63 F0 80         [24] 2986 	xrl	b,#0x80
      000D92 95 F0            [12] 2987 	subb	a,b
      000D94 D0 02            [24] 2988 	pop	ar2
      000D96 40 05            [24] 2989 	jc	00118$
      000D98 BE 04 02         [24] 2990 	cjne	r6,#0x04,00164$
      000D9B 80 04            [24] 2991 	sjmp	00119$
      000D9D                       2992 00164$:
      000D9D                       2993 00118$:
      000D9D 7D 00            [12] 2994 	mov	r5,#0x00
      000D9F 80 02            [24] 2995 	sjmp	00120$
      000DA1                       2996 00119$:
      000DA1 7D 01            [12] 2997 	mov	r5,#0x01
      000DA3                       2998 00120$:
                                   2999 ;	dotmatrix.c:444: uint8_t data_to_send = ball_y_bitwise;
      000DA3 90r00r0D         [24] 3000 	mov	dptr,#_erase_ball_data_to_send_65537_89
      000DA6 EC               [12] 3001 	mov	a,r4
      000DA7 F0               [24] 3002 	movx	@dptr,a
                                   3003 ;	dotmatrix.c:445: if (isBallNearPlayer1)
      000DA8 EA               [12] 3004 	mov	a,r2
      000DA9 60 09            [24] 3005 	jz	00104$
                                   3006 ;	dotmatrix.c:447: data_to_send |= 0b10000000;
      000DAB 90r00r0D         [24] 3007 	mov	dptr,#_erase_ball_data_to_send_65537_89
      000DAE 74 80            [12] 3008 	mov	a,#0x80
      000DB0 4C               [12] 3009 	orl	a,r4
      000DB1 F0               [24] 3010 	movx	@dptr,a
      000DB2 80 0A            [24] 3011 	sjmp	00105$
      000DB4                       3012 00104$:
                                   3013 ;	dotmatrix.c:449: else if (isBallNearPlayer2)
      000DB4 ED               [12] 3014 	mov	a,r5
      000DB5 60 07            [24] 3015 	jz	00105$
                                   3016 ;	dotmatrix.c:451: data_to_send |= 0b00000001;
      000DB7 90r00r0D         [24] 3017 	mov	dptr,#_erase_ball_data_to_send_65537_89
      000DBA 74 01            [12] 3018 	mov	a,#0x01
      000DBC 4C               [12] 3019 	orl	a,r4
      000DBD F0               [24] 3020 	movx	@dptr,a
      000DBE                       3021 00105$:
                                   3022 ;	dotmatrix.c:453: dotmatrix_send(ball_x_range, data_to_send, display, unit);
      000DBE 90r00r0D         [24] 3023 	mov	dptr,#_erase_ball_data_to_send_65537_89
      000DC1 E0               [24] 3024 	movx	a,@dptr
      000DC2 90r00r03         [24] 3025 	mov	dptr,#_dotmatrix_send_PARM_2
      000DC5 F0               [24] 3026 	movx	@dptr,a
      000DC6 90r00r04         [24] 3027 	mov	dptr,#_dotmatrix_send_PARM_3
      000DC9 EF               [12] 3028 	mov	a,r7
      000DCA F0               [24] 3029 	movx	@dptr,a
      000DCB 90r00r05         [24] 3030 	mov	dptr,#_dotmatrix_send_PARM_4
      000DCE EE               [12] 3031 	mov	a,r6
      000DCF F0               [24] 3032 	movx	@dptr,a
      000DD0 8B 82            [24] 3033 	mov	dpl,r3
                                   3034 ;	dotmatrix.c:455: return;
                                   3035 ;	dotmatrix.c:456: }
      000DD2 02r00r5D         [24] 3036 	ljmp	_dotmatrix_send
                                   3037 ;------------------------------------------------------------
                                   3038 ;Allocation info for local variables in function 'draw_ball'
                                   3039 ;------------------------------------------------------------
                                   3040 ;display                   Allocated with name '_draw_ball_display_65537_93'
                                   3041 ;unit                      Allocated with name '_draw_ball_unit_65537_93'
                                   3042 ;ball_x_range              Allocated with name '_draw_ball_ball_x_range_65537_93'
                                   3043 ;ball_y_range              Allocated with name '_draw_ball_ball_y_range_65537_93'
                                   3044 ;ball_y_bitwise            Allocated with name '_draw_ball_ball_y_bitwise_65537_93'
                                   3045 ;isBallNearPlayer1         Allocated with name '_draw_ball_isBallNearPlayer1_65538_94'
                                   3046 ;isBallNearPlayer2         Allocated with name '_draw_ball_isBallNearPlayer2_65538_94'
                                   3047 ;data_to_send              Allocated with name '_draw_ball_data_to_send_65538_94'
                                   3048 ;------------------------------------------------------------
                                   3049 ;	dotmatrix.c:459: void draw_ball()
                                   3050 ;	-----------------------------------------
                                   3051 ;	 function draw_ball
                                   3052 ;	-----------------------------------------
      000DD5                       3053 _draw_ball:
                                   3054 ;	dotmatrix.c:461: increment();
      000DD5 12r0Fr06         [24] 3055 	lcall	_increment
                                   3056 ;	dotmatrix.c:462: display_t display = get_display(b_x);
      000DD8 90r00r84         [24] 3057 	mov	dptr,#_b_x
      000DDB E0               [24] 3058 	movx	a,@dptr
      000DDC F5 82            [12] 3059 	mov	dpl,a
      000DDE 12r00r3A         [24] 3060 	lcall	_get_display
      000DE1 AF 82            [24] 3061 	mov	r7,dpl
                                   3062 ;	dotmatrix.c:463: uint8_t unit = get_unit(b_y);
      000DE3 90r00r83         [24] 3063 	mov	dptr,#_b_y
      000DE6 E0               [24] 3064 	movx	a,@dptr
      000DE7 F5 82            [12] 3065 	mov	dpl,a
      000DE9 C0 07            [24] 3066 	push	ar7
      000DEB 12r00r13         [24] 3067 	lcall	_get_unit
      000DEE AE 82            [24] 3068 	mov	r6,dpl
      000DF0 D0 07            [24] 3069 	pop	ar7
                                   3070 ;	dotmatrix.c:468: ball_x_range = (b_x & 0x07) ? (b_x & 0x07) : EIGHT;
      000DF2 90r00r84         [24] 3071 	mov	dptr,#_b_x
      000DF5 E0               [24] 3072 	movx	a,@dptr
      000DF6 FD               [12] 3073 	mov	r5,a
      000DF7 54 07            [12] 3074 	anl	a,#0x07
      000DF9 60 09            [24] 3075 	jz	00108$
      000DFB 8D 03            [24] 3076 	mov	ar3,r5
      000DFD 53 03 07         [24] 3077 	anl	ar3,#0x07
      000E00 7C 00            [12] 3078 	mov	r4,#0x00
      000E02 80 04            [24] 3079 	sjmp	00109$
      000E04                       3080 00108$:
      000E04 7B 08            [12] 3081 	mov	r3,#0x08
      000E06 7C 00            [12] 3082 	mov	r4,#0x00
      000E08                       3083 00109$:
                                   3084 ;	dotmatrix.c:470: ball_y_range = (b_y & 0x07) ? (EIGHT - ((b_y) & 0x07)) : 0;
      000E08 90r00r83         [24] 3085 	mov	dptr,#_b_y
      000E0B E0               [24] 3086 	movx	a,@dptr
      000E0C FC               [12] 3087 	mov	r4,a
      000E0D 54 07            [12] 3088 	anl	a,#0x07
      000E0F 60 0E            [24] 3089 	jz	00110$
      000E11 74 07            [12] 3090 	mov	a,#0x07
      000E13 5C               [12] 3091 	anl	a,r4
      000E14 D3               [12] 3092 	setb	c
      000E15 94 08            [12] 3093 	subb	a,#0x08
      000E17 F4               [12] 3094 	cpl	a
      000E18 FA               [12] 3095 	mov	r2,a
      000E19 33               [12] 3096 	rlc	a
      000E1A 95 E0            [12] 3097 	subb	a,acc
      000E1C FC               [12] 3098 	mov	r4,a
      000E1D 80 04            [24] 3099 	sjmp	00111$
      000E1F                       3100 00110$:
      000E1F 7A 00            [12] 3101 	mov	r2,#0x00
      000E21 7C 00            [12] 3102 	mov	r4,#0x00
      000E23                       3103 00111$:
                                   3104 ;	dotmatrix.c:471: ball_y_bitwise = 1 << ball_y_range;
      000E23 8A F0            [24] 3105 	mov	b,r2
      000E25 05 F0            [12] 3106 	inc	b
      000E27 74 01            [12] 3107 	mov	a,#0x01
      000E29 80 02            [24] 3108 	sjmp	00158$
      000E2B                       3109 00156$:
      000E2B 25 E0            [12] 3110 	add	a,acc
      000E2D                       3111 00158$:
      000E2D D5 F0 FB         [24] 3112 	djnz	b,00156$
      000E30 FC               [12] 3113 	mov	r4,a
                                   3114 ;	dotmatrix.c:474: uint8_t isBallNearPlayer1 = (((current_row_location_of_player1 <= b_x) && ((current_row_location_of_player1 + 3) >= b_x)) && (unit == 1));
      000E31 90r00r81         [24] 3115 	mov	dptr,#_current_row_location_of_player1
      000E34 E0               [24] 3116 	movx	a,@dptr
      000E35 FA               [12] 3117 	mov	r2,a
      000E36 C3               [12] 3118 	clr	c
      000E37 ED               [12] 3119 	mov	a,r5
      000E38 9A               [12] 3120 	subb	a,r2
      000E39 40 2A            [24] 3121 	jc	00112$
      000E3B C0 03            [24] 3122 	push	ar3
      000E3D 90r00r81         [24] 3123 	mov	dptr,#_current_row_location_of_player1
      000E40 E0               [24] 3124 	movx	a,@dptr
      000E41 F9               [12] 3125 	mov	r1,a
      000E42 7A 00            [12] 3126 	mov	r2,#0x00
      000E44 74 03            [12] 3127 	mov	a,#0x03
      000E46 29               [12] 3128 	add	a,r1
      000E47 F9               [12] 3129 	mov	r1,a
      000E48 E4               [12] 3130 	clr	a
      000E49 3A               [12] 3131 	addc	a,r2
      000E4A FA               [12] 3132 	mov	r2,a
      000E4B 8D 00            [24] 3133 	mov	ar0,r5
      000E4D 7B 00            [12] 3134 	mov	r3,#0x00
      000E4F C3               [12] 3135 	clr	c
      000E50 E9               [12] 3136 	mov	a,r1
      000E51 98               [12] 3137 	subb	a,r0
      000E52 EA               [12] 3138 	mov	a,r2
      000E53 64 80            [12] 3139 	xrl	a,#0x80
      000E55 8B F0            [24] 3140 	mov	b,r3
      000E57 63 F0 80         [24] 3141 	xrl	b,#0x80
      000E5A 95 F0            [12] 3142 	subb	a,b
      000E5C D0 03            [24] 3143 	pop	ar3
      000E5E 40 05            [24] 3144 	jc	00112$
      000E60 BE 01 02         [24] 3145 	cjne	r6,#0x01,00161$
      000E63 80 04            [24] 3146 	sjmp	00113$
      000E65                       3147 00161$:
      000E65                       3148 00112$:
      000E65 7A 00            [12] 3149 	mov	r2,#0x00
      000E67 80 02            [24] 3150 	sjmp	00114$
      000E69                       3151 00113$:
      000E69 7A 01            [12] 3152 	mov	r2,#0x01
      000E6B                       3153 00114$:
                                   3154 ;	dotmatrix.c:475: uint8_t isBallNearPlayer2 = (((current_row_location_of_player2 <= b_x) && ((current_row_location_of_player2 + 3) >= b_x)) && (unit == 4));
      000E6B 90r00r82         [24] 3155 	mov	dptr,#_current_row_location_of_player2
      000E6E E0               [24] 3156 	movx	a,@dptr
      000E6F F9               [12] 3157 	mov	r1,a
      000E70 C3               [12] 3158 	clr	c
      000E71 ED               [12] 3159 	mov	a,r5
      000E72 99               [12] 3160 	subb	a,r1
      000E73 40 2A            [24] 3161 	jc	00118$
      000E75 C0 02            [24] 3162 	push	ar2
      000E77 90r00r82         [24] 3163 	mov	dptr,#_current_row_location_of_player2
      000E7A E0               [24] 3164 	movx	a,@dptr
      000E7B F8               [12] 3165 	mov	r0,a
      000E7C 79 00            [12] 3166 	mov	r1,#0x00
      000E7E 74 03            [12] 3167 	mov	a,#0x03
      000E80 28               [12] 3168 	add	a,r0
      000E81 F8               [12] 3169 	mov	r0,a
      000E82 E4               [12] 3170 	clr	a
      000E83 39               [12] 3171 	addc	a,r1
      000E84 F9               [12] 3172 	mov	r1,a
      000E85 8D 02            [24] 3173 	mov	ar2,r5
      000E87 7D 00            [12] 3174 	mov	r5,#0x00
      000E89 C3               [12] 3175 	clr	c
      000E8A E8               [12] 3176 	mov	a,r0
      000E8B 9A               [12] 3177 	subb	a,r2
      000E8C E9               [12] 3178 	mov	a,r1
      000E8D 64 80            [12] 3179 	xrl	a,#0x80
      000E8F 8D F0            [24] 3180 	mov	b,r5
      000E91 63 F0 80         [24] 3181 	xrl	b,#0x80
      000E94 95 F0            [12] 3182 	subb	a,b
      000E96 D0 02            [24] 3183 	pop	ar2
      000E98 40 05            [24] 3184 	jc	00118$
      000E9A BE 04 02         [24] 3185 	cjne	r6,#0x04,00164$
      000E9D 80 04            [24] 3186 	sjmp	00119$
      000E9F                       3187 00164$:
      000E9F                       3188 00118$:
      000E9F 7D 00            [12] 3189 	mov	r5,#0x00
      000EA1 80 02            [24] 3190 	sjmp	00120$
      000EA3                       3191 00119$:
      000EA3 7D 01            [12] 3192 	mov	r5,#0x01
      000EA5                       3193 00120$:
                                   3194 ;	dotmatrix.c:477: uint8_t data_to_send = ball_y_bitwise;
      000EA5 90r00r0E         [24] 3195 	mov	dptr,#_draw_ball_data_to_send_65538_94
      000EA8 EC               [12] 3196 	mov	a,r4
      000EA9 F0               [24] 3197 	movx	@dptr,a
                                   3198 ;	dotmatrix.c:478: if (isBallNearPlayer1)
      000EAA EA               [12] 3199 	mov	a,r2
      000EAB 60 09            [24] 3200 	jz	00104$
                                   3201 ;	dotmatrix.c:480: data_to_send |= 0b10000000;
      000EAD 90r00r0E         [24] 3202 	mov	dptr,#_draw_ball_data_to_send_65538_94
      000EB0 74 80            [12] 3203 	mov	a,#0x80
      000EB2 4C               [12] 3204 	orl	a,r4
      000EB3 F0               [24] 3205 	movx	@dptr,a
      000EB4 80 0A            [24] 3206 	sjmp	00105$
      000EB6                       3207 00104$:
                                   3208 ;	dotmatrix.c:482: else if (isBallNearPlayer2)
      000EB6 ED               [12] 3209 	mov	a,r5
      000EB7 60 07            [24] 3210 	jz	00105$
                                   3211 ;	dotmatrix.c:484: data_to_send |= 0b00000001;
      000EB9 90r00r0E         [24] 3212 	mov	dptr,#_draw_ball_data_to_send_65538_94
      000EBC 74 01            [12] 3213 	mov	a,#0x01
      000EBE 4C               [12] 3214 	orl	a,r4
      000EBF F0               [24] 3215 	movx	@dptr,a
      000EC0                       3216 00105$:
                                   3217 ;	dotmatrix.c:486: dotmatrix_send(ball_x_range, data_to_send, display, unit);
      000EC0 90r00r0E         [24] 3218 	mov	dptr,#_draw_ball_data_to_send_65538_94
      000EC3 E0               [24] 3219 	movx	a,@dptr
      000EC4 90r00r03         [24] 3220 	mov	dptr,#_dotmatrix_send_PARM_2
      000EC7 F0               [24] 3221 	movx	@dptr,a
      000EC8 90r00r04         [24] 3222 	mov	dptr,#_dotmatrix_send_PARM_3
      000ECB EF               [12] 3223 	mov	a,r7
      000ECC F0               [24] 3224 	movx	@dptr,a
      000ECD 90r00r05         [24] 3225 	mov	dptr,#_dotmatrix_send_PARM_4
      000ED0 EE               [12] 3226 	mov	a,r6
      000ED1 F0               [24] 3227 	movx	@dptr,a
      000ED2 8B 82            [24] 3228 	mov	dpl,r3
                                   3229 ;	dotmatrix.c:488: return;
                                   3230 ;	dotmatrix.c:489: }
      000ED4 02r00r5D         [24] 3231 	ljmp	_dotmatrix_send
                                   3232 ;------------------------------------------------------------
                                   3233 ;Allocation info for local variables in function 'ball_y'
                                   3234 ;------------------------------------------------------------
                                   3235 ;	dotmatrix.c:491: uint8_t ball_y(void)
                                   3236 ;	-----------------------------------------
                                   3237 ;	 function ball_y
                                   3238 ;	-----------------------------------------
      000ED7                       3239 _ball_y:
                                   3240 ;	dotmatrix.c:493: return (b_y);
      000ED7 90r00r83         [24] 3241 	mov	dptr,#_b_y
      000EDA E0               [24] 3242 	movx	a,@dptr
                                   3243 ;	dotmatrix.c:494: }
      000EDB F5 82            [12] 3244 	mov	dpl,a
      000EDD 22               [24] 3245 	ret
                                   3246 ;------------------------------------------------------------
                                   3247 ;Allocation info for local variables in function 'ball_x'
                                   3248 ;------------------------------------------------------------
                                   3249 ;	dotmatrix.c:496: uint8_t ball_x(void)
                                   3250 ;	-----------------------------------------
                                   3251 ;	 function ball_x
                                   3252 ;	-----------------------------------------
      000EDE                       3253 _ball_x:
                                   3254 ;	dotmatrix.c:498: return (b_x);
      000EDE 90r00r84         [24] 3255 	mov	dptr,#_b_x
      000EE1 E0               [24] 3256 	movx	a,@dptr
                                   3257 ;	dotmatrix.c:499: }
      000EE2 F5 82            [12] 3258 	mov	dpl,a
      000EE4 22               [24] 3259 	ret
                                   3260 ;------------------------------------------------------------
                                   3261 ;Allocation info for local variables in function 'change_ball'
                                   3262 ;------------------------------------------------------------
                                   3263 ;y                         Allocated with name '_change_ball_PARM_2'
                                   3264 ;x                         Allocated with name '_change_ball_x_65536_101'
                                   3265 ;------------------------------------------------------------
                                   3266 ;	dotmatrix.c:501: void change_ball(uint8_t x, uint8_t y)
                                   3267 ;	-----------------------------------------
                                   3268 ;	 function change_ball
                                   3269 ;	-----------------------------------------
      000EE5                       3270 _change_ball:
      000EE5 E5 82            [12] 3271 	mov	a,dpl
      000EE7 90r00r10         [24] 3272 	mov	dptr,#_change_ball_x_65536_101
      000EEA F0               [24] 3273 	movx	@dptr,a
                                   3274 ;	dotmatrix.c:503: if (x > THIRTY_TWO || y > EIGHT)
      000EEB E0               [24] 3275 	movx	a,@dptr
      000EEC FF               [12] 3276 	mov  r7,a
      000EED 24 DF            [12] 3277 	add	a,#0xff - 0x20
      000EEF 40 09            [24] 3278 	jc	00101$
      000EF1 90r00r0F         [24] 3279 	mov	dptr,#_change_ball_PARM_2
      000EF4 E0               [24] 3280 	movx	a,@dptr
      000EF5 FE               [12] 3281 	mov  r6,a
      000EF6 24 F7            [12] 3282 	add	a,#0xff - 0x08
      000EF8 50 01            [24] 3283 	jnc	00102$
      000EFA                       3284 00101$:
                                   3285 ;	dotmatrix.c:504: return;
      000EFA 22               [24] 3286 	ret
      000EFB                       3287 00102$:
                                   3288 ;	dotmatrix.c:505: b_y = x;
      000EFB 90r00r83         [24] 3289 	mov	dptr,#_b_y
      000EFE EF               [12] 3290 	mov	a,r7
      000EFF F0               [24] 3291 	movx	@dptr,a
                                   3292 ;	dotmatrix.c:506: b_x = y;
      000F00 90r00r84         [24] 3293 	mov	dptr,#_b_x
      000F03 EE               [12] 3294 	mov	a,r6
      000F04 F0               [24] 3295 	movx	@dptr,a
                                   3296 ;	dotmatrix.c:507: }
      000F05 22               [24] 3297 	ret
                                   3298 ;------------------------------------------------------------
                                   3299 ;Allocation info for local variables in function 'increment'
                                   3300 ;------------------------------------------------------------
                                   3301 ;isBallNearPlayer2         Allocated with name '_increment_isBallNearPlayer2_131073_106'
                                   3302 ;i                         Allocated with name '_increment_i_262145_109'
                                   3303 ;isBallNearPlayer1         Allocated with name '_increment_isBallNearPlayer1_131073_111'
                                   3304 ;i                         Allocated with name '_increment_i_262145_114'
                                   3305 ;------------------------------------------------------------
                                   3306 ;	dotmatrix.c:509: void increment(void)
                                   3307 ;	-----------------------------------------
                                   3308 ;	 function increment
                                   3309 ;	-----------------------------------------
      000F06                       3310 _increment:
                                   3311 ;	dotmatrix.c:511: if (b_y == THIRTY_TWO && direction_y == 1)
      000F06 90r00r83         [24] 3312 	mov	dptr,#_b_y
      000F09 E0               [24] 3313 	movx	a,@dptr
      000F0A FF               [12] 3314 	mov	r7,a
      000F0B BF 20 02         [24] 3315 	cjne	r7,#0x20,00221$
      000F0E 80 03            [24] 3316 	sjmp	00222$
      000F10                       3317 00221$:
      000F10 02r0FrA7         [24] 3318 	ljmp	00115$
      000F13                       3319 00222$:
      000F13 90r00r86         [24] 3320 	mov	dptr,#_direction_y
      000F16 E0               [24] 3321 	movx	a,@dptr
      000F17 FE               [12] 3322 	mov	r6,a
      000F18 BE 01 02         [24] 3323 	cjne	r6,#0x01,00223$
      000F1B 80 03            [24] 3324 	sjmp	00224$
      000F1D                       3325 00223$:
      000F1D 02r0FrA7         [24] 3326 	ljmp	00115$
      000F20                       3327 00224$:
                                   3328 ;	dotmatrix.c:513: direction_y = 0;
      000F20 90r00r86         [24] 3329 	mov	dptr,#_direction_y
      000F23 E4               [12] 3330 	clr	a
      000F24 F0               [24] 3331 	movx	@dptr,a
                                   3332 ;	dotmatrix.c:514: uint8_t isBallNearPlayer2 = (((current_row_location_of_player2 <= b_x) && ((current_row_location_of_player2 + 3) >= b_x)));
      000F25 90r00r82         [24] 3333 	mov	dptr,#_current_row_location_of_player2
      000F28 E0               [24] 3334 	movx	a,@dptr
      000F29 FE               [12] 3335 	mov	r6,a
      000F2A 90r00r84         [24] 3336 	mov	dptr,#_b_x
      000F2D E0               [24] 3337 	movx	a,@dptr
      000F2E FD               [12] 3338 	mov	r5,a
      000F2F C3               [12] 3339 	clr	c
      000F30 9E               [12] 3340 	subb	a,r6
      000F31 40 22            [24] 3341 	jc	00141$
      000F33 90r00r82         [24] 3342 	mov	dptr,#_current_row_location_of_player2
      000F36 E0               [24] 3343 	movx	a,@dptr
      000F37 FE               [12] 3344 	mov	r6,a
      000F38 7C 00            [12] 3345 	mov	r4,#0x00
      000F3A 74 03            [12] 3346 	mov	a,#0x03
      000F3C 2E               [12] 3347 	add	a,r6
      000F3D FE               [12] 3348 	mov	r6,a
      000F3E E4               [12] 3349 	clr	a
      000F3F 3C               [12] 3350 	addc	a,r4
      000F40 FC               [12] 3351 	mov	r4,a
      000F41 7B 00            [12] 3352 	mov	r3,#0x00
      000F43 C3               [12] 3353 	clr	c
      000F44 EE               [12] 3354 	mov	a,r6
      000F45 9D               [12] 3355 	subb	a,r5
      000F46 EC               [12] 3356 	mov	a,r4
      000F47 64 80            [12] 3357 	xrl	a,#0x80
      000F49 8B F0            [24] 3358 	mov	b,r3
      000F4B 63 F0 80         [24] 3359 	xrl	b,#0x80
      000F4E 95 F0            [12] 3360 	subb	a,b
      000F50 40 03            [24] 3361 	jc	00226$
      000F52 02r10r3A         [24] 3362 	ljmp	00116$
      000F55                       3363 00226$:
      000F55                       3364 00141$:
                                   3365 ;	dotmatrix.c:517: if(player_points[PLAYER1] == MAX_SCORE){
      000F55 90r00r87         [24] 3366 	mov	dptr,#_player_points
      000F58 E0               [24] 3367 	movx	a,@dptr
      000F59 FE               [12] 3368 	mov	r6,a
      000F5A BE 04 19         [24] 3369 	cjne	r6,#0x04,00102$
                                   3370 ;	dotmatrix.c:518: setGameState(OVER);
      000F5D 75 82 02         [24] 3371 	mov	dpl,#0x02
      000F60 12r00r07         [24] 3372 	lcall	_setGameState
                                   3373 ;	dotmatrix.c:519: clear_display();
      000F63 12r11rFD         [24] 3374 	lcall	_clear_display
                                   3375 ;	dotmatrix.c:520: display_explosion(PLAYER1);
      000F66 75 82 00         [24] 3376 	mov	dpl,#0x00
      000F69 12r12rCD         [24] 3377 	lcall	_display_explosion
                                   3378 ;	dotmatrix.c:521: player_points[0] = 0;
      000F6C 90r00r87         [24] 3379 	mov	dptr,#_player_points
      000F6F E4               [12] 3380 	clr	a
      000F70 F0               [24] 3381 	movx	@dptr,a
                                   3382 ;	dotmatrix.c:522: player_points[1] = 0;
      000F71 90r00r88         [24] 3383 	mov	dptr,#(_player_points + 0x0001)
      000F74 F0               [24] 3384 	movx	@dptr,a
                                   3385 ;	dotmatrix.c:523: return;
      000F75 22               [24] 3386 	ret
      000F76                       3387 00102$:
                                   3388 ;	dotmatrix.c:525: BUZZER_ON;
                                   3389 ;	assignBit
      000F76 C2 82            [12] 3390 	clr	_P0_2
                                   3391 ;	dotmatrix.c:526: player_points[PLAYER1] += 1;
      000F78 0E               [12] 3392 	inc	r6
      000F79 90r00r87         [24] 3393 	mov	dptr,#_player_points
      000F7C EE               [12] 3394 	mov	a,r6
      000F7D F0               [24] 3395 	movx	@dptr,a
                                   3396 ;	dotmatrix.c:527: setGameState(STOP);
      000F7E 75 82 01         [24] 3397 	mov	dpl,#0x01
      000F81 12r00r07         [24] 3398 	lcall	_setGameState
                                   3399 ;	dotmatrix.c:528: clear_display();
      000F84 12r11rFD         [24] 3400 	lcall	_clear_display
                                   3401 ;	dotmatrix.c:529: for(int i=0; i<=10;i++);
      000F87 7D 00            [12] 3402 	mov	r5,#0x00
      000F89 7E 00            [12] 3403 	mov	r6,#0x00
      000F8B                       3404 00132$:
      000F8B C3               [12] 3405 	clr	c
      000F8C 74 0A            [12] 3406 	mov	a,#0x0a
      000F8E 9D               [12] 3407 	subb	a,r5
      000F8F 74 80            [12] 3408 	mov	a,#(0x00 ^ 0x80)
      000F91 8E F0            [24] 3409 	mov	b,r6
      000F93 63 F0 80         [24] 3410 	xrl	b,#0x80
      000F96 95 F0            [12] 3411 	subb	a,b
      000F98 40 07            [24] 3412 	jc	00103$
      000F9A 0D               [12] 3413 	inc	r5
      000F9B BD 00 ED         [24] 3414 	cjne	r5,#0x00,00132$
      000F9E 0E               [12] 3415 	inc	r6
      000F9F 80 EA            [24] 3416 	sjmp	00132$
      000FA1                       3417 00103$:
                                   3418 ;	dotmatrix.c:530: initialize_controller();
      000FA1 12r07rB4         [24] 3419 	lcall	_initialize_controller
      000FA4 02r10r3A         [24] 3420 	ljmp	00116$
      000FA7                       3421 00115$:
                                   3422 ;	dotmatrix.c:533: else if (b_y == 1 && direction_y == 0)
      000FA7 BF 01 02         [24] 3423 	cjne	r7,#0x01,00231$
      000FAA 80 03            [24] 3424 	sjmp	00232$
      000FAC                       3425 00231$:
      000FAC 02r10r3A         [24] 3426 	ljmp	00116$
      000FAF                       3427 00232$:
      000FAF 90r00r86         [24] 3428 	mov	dptr,#_direction_y
      000FB2 E0               [24] 3429 	movx	a,@dptr
      000FB3 60 03            [24] 3430 	jz	00233$
      000FB5 02r10r3A         [24] 3431 	ljmp	00116$
      000FB8                       3432 00233$:
                                   3433 ;	dotmatrix.c:535: direction_y = 1;
      000FB8 90r00r86         [24] 3434 	mov	dptr,#_direction_y
      000FBB 74 01            [12] 3435 	mov	a,#0x01
      000FBD F0               [24] 3436 	movx	@dptr,a
                                   3437 ;	dotmatrix.c:537: uint8_t isBallNearPlayer1 = (((current_row_location_of_player1 <= b_x) && ((current_row_location_of_player1 + 3) >= b_x)));
      000FBE 90r00r81         [24] 3438 	mov	dptr,#_current_row_location_of_player1
      000FC1 E0               [24] 3439 	movx	a,@dptr
      000FC2 FF               [12] 3440 	mov	r7,a
      000FC3 90r00r84         [24] 3441 	mov	dptr,#_b_x
      000FC6 E0               [24] 3442 	movx	a,@dptr
      000FC7 FE               [12] 3443 	mov	r6,a
      000FC8 C3               [12] 3444 	clr	c
      000FC9 9F               [12] 3445 	subb	a,r7
      000FCA 40 1F            [24] 3446 	jc	00144$
      000FCC 90r00r81         [24] 3447 	mov	dptr,#_current_row_location_of_player1
      000FCF E0               [24] 3448 	movx	a,@dptr
      000FD0 FF               [12] 3449 	mov	r7,a
      000FD1 7D 00            [12] 3450 	mov	r5,#0x00
      000FD3 74 03            [12] 3451 	mov	a,#0x03
      000FD5 2F               [12] 3452 	add	a,r7
      000FD6 FF               [12] 3453 	mov	r7,a
      000FD7 E4               [12] 3454 	clr	a
      000FD8 3D               [12] 3455 	addc	a,r5
      000FD9 FD               [12] 3456 	mov	r5,a
      000FDA 7C 00            [12] 3457 	mov	r4,#0x00
      000FDC C3               [12] 3458 	clr	c
      000FDD EF               [12] 3459 	mov	a,r7
      000FDE 9E               [12] 3460 	subb	a,r6
      000FDF ED               [12] 3461 	mov	a,r5
      000FE0 64 80            [12] 3462 	xrl	a,#0x80
      000FE2 8C F0            [24] 3463 	mov	b,r4
      000FE4 63 F0 80         [24] 3464 	xrl	b,#0x80
      000FE7 95 F0            [12] 3465 	subb	a,b
      000FE9 50 4F            [24] 3466 	jnc	00116$
      000FEB                       3467 00144$:
                                   3468 ;	dotmatrix.c:540: if(player_points[PLAYER2] == MAX_SCORE){
      000FEB 90r00r88         [24] 3469 	mov	dptr,#(_player_points + 0x0001)
      000FEE E0               [24] 3470 	movx	a,@dptr
      000FEF FF               [12] 3471 	mov	r7,a
      000FF0 BF 04 19         [24] 3472 	cjne	r7,#0x04,00107$
                                   3473 ;	dotmatrix.c:541: clear_display();
      000FF3 12r11rFD         [24] 3474 	lcall	_clear_display
                                   3475 ;	dotmatrix.c:542: display_explosion(PLAYER2);
      000FF6 75 82 01         [24] 3476 	mov	dpl,#0x01
      000FF9 12r12rCD         [24] 3477 	lcall	_display_explosion
                                   3478 ;	dotmatrix.c:543: setGameState(OVER);
      000FFC 75 82 02         [24] 3479 	mov	dpl,#0x02
      000FFF 12r00r07         [24] 3480 	lcall	_setGameState
                                   3481 ;	dotmatrix.c:544: player_points[0] = 0;
      001002 90r00r87         [24] 3482 	mov	dptr,#_player_points
      001005 E4               [12] 3483 	clr	a
      001006 F0               [24] 3484 	movx	@dptr,a
                                   3485 ;	dotmatrix.c:545: player_points[1] = 0;
      001007 90r00r88         [24] 3486 	mov	dptr,#(_player_points + 0x0001)
      00100A F0               [24] 3487 	movx	@dptr,a
                                   3488 ;	dotmatrix.c:546: return;
      00100B 22               [24] 3489 	ret
      00100C                       3490 00107$:
                                   3491 ;	dotmatrix.c:548: BUZZER_ON;
                                   3492 ;	assignBit
      00100C C2 82            [12] 3493 	clr	_P0_2
                                   3494 ;	dotmatrix.c:549: player_points[PLAYER2] += 1;
      00100E 0F               [12] 3495 	inc	r7
      00100F 90r00r88         [24] 3496 	mov	dptr,#(_player_points + 0x0001)
      001012 EF               [12] 3497 	mov	a,r7
      001013 F0               [24] 3498 	movx	@dptr,a
                                   3499 ;	dotmatrix.c:550: setGameState(STOP);
      001014 75 82 01         [24] 3500 	mov	dpl,#0x01
      001017 12r00r07         [24] 3501 	lcall	_setGameState
                                   3502 ;	dotmatrix.c:551: clear_display();
      00101A 12r11rFD         [24] 3503 	lcall	_clear_display
                                   3504 ;	dotmatrix.c:552: for(int i=0; i<=10;i++);
      00101D 7E 00            [12] 3505 	mov	r6,#0x00
      00101F 7F 00            [12] 3506 	mov	r7,#0x00
      001021                       3507 00135$:
      001021 C3               [12] 3508 	clr	c
      001022 74 0A            [12] 3509 	mov	a,#0x0a
      001024 9E               [12] 3510 	subb	a,r6
      001025 74 80            [12] 3511 	mov	a,#(0x00 ^ 0x80)
      001027 8F F0            [24] 3512 	mov	b,r7
      001029 63 F0 80         [24] 3513 	xrl	b,#0x80
      00102C 95 F0            [12] 3514 	subb	a,b
      00102E 40 07            [24] 3515 	jc	00108$
      001030 0E               [12] 3516 	inc	r6
      001031 BE 00 ED         [24] 3517 	cjne	r6,#0x00,00135$
      001034 0F               [12] 3518 	inc	r7
      001035 80 EA            [24] 3519 	sjmp	00135$
      001037                       3520 00108$:
                                   3521 ;	dotmatrix.c:553: initialize_controller();
      001037 12r07rB4         [24] 3522 	lcall	_initialize_controller
      00103A                       3523 00116$:
                                   3524 ;	dotmatrix.c:557: if (direction_y == 1)
      00103A 90r00r86         [24] 3525 	mov	dptr,#_direction_y
      00103D E0               [24] 3526 	movx	a,@dptr
      00103E FF               [12] 3527 	mov	r7,a
      00103F BF 01 09         [24] 3528 	cjne	r7,#0x01,00119$
                                   3529 ;	dotmatrix.c:558: b_y++;
      001042 90r00r83         [24] 3530 	mov	dptr,#_b_y
      001045 E0               [24] 3531 	movx	a,@dptr
      001046 24 01            [12] 3532 	add	a,#0x01
      001048 F0               [24] 3533 	movx	@dptr,a
      001049 80 06            [24] 3534 	sjmp	00120$
      00104B                       3535 00119$:
                                   3536 ;	dotmatrix.c:560: b_y--;
      00104B 90r00r83         [24] 3537 	mov	dptr,#_b_y
      00104E E0               [24] 3538 	movx	a,@dptr
      00104F 14               [12] 3539 	dec	a
      001050 F0               [24] 3540 	movx	@dptr,a
      001051                       3541 00120$:
                                   3542 ;	dotmatrix.c:562: if (b_x == SIXTEEN && direction_x == 1)
      001051 90r00r84         [24] 3543 	mov	dptr,#_b_x
      001054 E0               [24] 3544 	movx	a,@dptr
      001055 FF               [12] 3545 	mov	r7,a
      001056 BF 10 0F         [24] 3546 	cjne	r7,#0x10,00125$
      001059 90r00r85         [24] 3547 	mov	dptr,#_direction_x
      00105C E0               [24] 3548 	movx	a,@dptr
      00105D FE               [12] 3549 	mov	r6,a
      00105E BE 01 07         [24] 3550 	cjne	r6,#0x01,00125$
                                   3551 ;	dotmatrix.c:563: direction_x = 0;
      001061 90r00r85         [24] 3552 	mov	dptr,#_direction_x
      001064 E4               [12] 3553 	clr	a
      001065 F0               [24] 3554 	movx	@dptr,a
      001066 80 0F            [24] 3555 	sjmp	00126$
      001068                       3556 00125$:
                                   3557 ;	dotmatrix.c:564: else if (b_x == 1 && direction_x == 0)
      001068 BF 01 0C         [24] 3558 	cjne	r7,#0x01,00126$
      00106B 90r00r85         [24] 3559 	mov	dptr,#_direction_x
      00106E E0               [24] 3560 	movx	a,@dptr
      00106F 70 06            [24] 3561 	jnz	00126$
                                   3562 ;	dotmatrix.c:565: direction_x = 1;
      001071 90r00r85         [24] 3563 	mov	dptr,#_direction_x
      001074 74 01            [12] 3564 	mov	a,#0x01
      001076 F0               [24] 3565 	movx	@dptr,a
      001077                       3566 00126$:
                                   3567 ;	dotmatrix.c:567: if (direction_x == 1)
      001077 90r00r85         [24] 3568 	mov	dptr,#_direction_x
      00107A E0               [24] 3569 	movx	a,@dptr
      00107B FE               [12] 3570 	mov	r6,a
      00107C BE 01 07         [24] 3571 	cjne	r6,#0x01,00129$
                                   3572 ;	dotmatrix.c:568: b_x++;
      00107F 90r00r84         [24] 3573 	mov	dptr,#_b_x
      001082 EF               [12] 3574 	mov	a,r7
      001083 04               [12] 3575 	inc	a
      001084 F0               [24] 3576 	movx	@dptr,a
      001085 22               [24] 3577 	ret
      001086                       3578 00129$:
                                   3579 ;	dotmatrix.c:570: b_x--;
      001086 EF               [12] 3580 	mov	a,r7
      001087 14               [12] 3581 	dec	a
      001088 90r00r84         [24] 3582 	mov	dptr,#_b_x
      00108B F0               [24] 3583 	movx	@dptr,a
                                   3584 ;	dotmatrix.c:571: }
      00108C 22               [24] 3585 	ret
                                   3586 ;------------------------------------------------------------
                                   3587 ;Allocation info for local variables in function 'display_explosion_pattern'
                                   3588 ;------------------------------------------------------------
                                   3589 ;sloc0                     Allocated with name '_display_explosion_pattern_sloc0_1_0'
                                   3590 ;sloc1                     Allocated with name '_display_explosion_pattern_sloc1_1_0'
                                   3591 ;sloc2                     Allocated with name '_display_explosion_pattern_sloc2_1_0'
                                   3592 ;pattern                   Allocated with name '_display_explosion_pattern_pattern_65536_115'
                                   3593 ;unit                      Allocated with name '_display_explosion_pattern_unit_131072_117'
                                   3594 ;row                       Allocated with name '_display_explosion_pattern_row_262144_119'
                                   3595 ;------------------------------------------------------------
                                   3596 ;	dotmatrix.c:573: void display_explosion_pattern(uint8_t pattern[2][8])
                                   3597 ;	-----------------------------------------
                                   3598 ;	 function display_explosion_pattern
                                   3599 ;	-----------------------------------------
      00108D                       3600 _display_explosion_pattern:
      00108D AF F0            [24] 3601 	mov	r7,b
      00108F AE 83            [24] 3602 	mov	r6,dph
      001091 E5 82            [12] 3603 	mov	a,dpl
      001093 90r00r11         [24] 3604 	mov	dptr,#_display_explosion_pattern_pattern_65536_115
      001096 F0               [24] 3605 	movx	@dptr,a
      001097 EE               [12] 3606 	mov	a,r6
      001098 A3               [24] 3607 	inc	dptr
      001099 F0               [24] 3608 	movx	@dptr,a
      00109A EF               [12] 3609 	mov	a,r7
      00109B A3               [24] 3610 	inc	dptr
      00109C F0               [24] 3611 	movx	@dptr,a
                                   3612 ;	dotmatrix.c:575: for (int unit = 1; unit <= 4; unit++)
      00109D 90r00r11         [24] 3613 	mov	dptr,#_display_explosion_pattern_pattern_65536_115
      0010A0 E0               [24] 3614 	movx	a,@dptr
      0010A1 FD               [12] 3615 	mov	r5,a
      0010A2 A3               [24] 3616 	inc	dptr
      0010A3 E0               [24] 3617 	movx	a,@dptr
      0010A4 FE               [12] 3618 	mov	r6,a
      0010A5 A3               [24] 3619 	inc	dptr
      0010A6 E0               [24] 3620 	movx	a,@dptr
      0010A7 FF               [12] 3621 	mov	r7,a
      0010A8 74 08            [12] 3622 	mov	a,#0x08
      0010AA 2D               [12] 3623 	add	a,r5
      0010AB F5*06            [12] 3624 	mov	_display_explosion_pattern_sloc2_1_0,a
      0010AD E4               [12] 3625 	clr	a
      0010AE 3E               [12] 3626 	addc	a,r6
      0010AF F5*07            [12] 3627 	mov	(_display_explosion_pattern_sloc2_1_0 + 1),a
      0010B1 8F*08            [24] 3628 	mov	(_display_explosion_pattern_sloc2_1_0 + 2),r7
      0010B3 78 01            [12] 3629 	mov	r0,#0x01
      0010B5 79 00            [12] 3630 	mov	r1,#0x00
      0010B7                       3631 00107$:
      0010B7 C3               [12] 3632 	clr	c
      0010B8 74 04            [12] 3633 	mov	a,#0x04
      0010BA 98               [12] 3634 	subb	a,r0
      0010BB 74 80            [12] 3635 	mov	a,#(0x00 ^ 0x80)
      0010BD 89 F0            [24] 3636 	mov	b,r1
      0010BF 63 F0 80         [24] 3637 	xrl	b,#0x80
      0010C2 95 F0            [12] 3638 	subb	a,b
      0010C4 50 01            [24] 3639 	jnc	00129$
      0010C6 22               [24] 3640 	ret
      0010C7                       3641 00129$:
                                   3642 ;	dotmatrix.c:577: for (int row = 0; row < 8; row++)
      0010C7 88*02            [24] 3643 	mov	_display_explosion_pattern_sloc0_1_0,r0
      0010C9 89*03            [24] 3644 	mov	(_display_explosion_pattern_sloc0_1_0 + 1),r1
      0010CB E4               [12] 3645 	clr	a
      0010CC F5*04            [12] 3646 	mov	_display_explosion_pattern_sloc1_1_0,a
      0010CE F5*05            [12] 3647 	mov	(_display_explosion_pattern_sloc1_1_0 + 1),a
      0010D0                       3648 00104$:
      0010D0 C3               [12] 3649 	clr	c
      0010D1 E5*04            [12] 3650 	mov	a,_display_explosion_pattern_sloc1_1_0
      0010D3 94 08            [12] 3651 	subb	a,#0x08
      0010D5 E5*05            [12] 3652 	mov	a,(_display_explosion_pattern_sloc1_1_0 + 1)
      0010D7 64 80            [12] 3653 	xrl	a,#0x80
      0010D9 94 80            [12] 3654 	subb	a,#0x80
      0010DB 40 03            [24] 3655 	jc	00130$
      0010DD 02r11r76         [24] 3656 	ljmp	00108$
      0010E0                       3657 00130$:
                                   3658 ;	dotmatrix.c:579: dotmatrix_send(row + 1, pattern[0][row], DISPLAY1, unit);
      0010E0 C0 00            [24] 3659 	push	ar0
      0010E2 C0 01            [24] 3660 	push	ar1
      0010E4 A9*04            [24] 3661 	mov	r1,_display_explosion_pattern_sloc1_1_0
      0010E6 09               [12] 3662 	inc	r1
      0010E7 E5*04            [12] 3663 	mov	a,_display_explosion_pattern_sloc1_1_0
      0010E9 2D               [12] 3664 	add	a,r5
      0010EA F8               [12] 3665 	mov	r0,a
      0010EB E5*05            [12] 3666 	mov	a,(_display_explosion_pattern_sloc1_1_0 + 1)
      0010ED 3E               [12] 3667 	addc	a,r6
      0010EE FB               [12] 3668 	mov	r3,a
      0010EF 8F 04            [24] 3669 	mov	ar4,r7
      0010F1 88 82            [24] 3670 	mov	dpl,r0
      0010F3 8B 83            [24] 3671 	mov	dph,r3
      0010F5 8C F0            [24] 3672 	mov	b,r4
      0010F7 12r00r00         [24] 3673 	lcall	__gptrget
      0010FA F8               [12] 3674 	mov	r0,a
      0010FB AC*02            [24] 3675 	mov	r4,_display_explosion_pattern_sloc0_1_0
      0010FD 90r00r03         [24] 3676 	mov	dptr,#_dotmatrix_send_PARM_2
      001100 E8               [12] 3677 	mov	a,r0
      001101 F0               [24] 3678 	movx	@dptr,a
      001102 90r00r04         [24] 3679 	mov	dptr,#_dotmatrix_send_PARM_3
      001105 E4               [12] 3680 	clr	a
      001106 F0               [24] 3681 	movx	@dptr,a
      001107 90r00r05         [24] 3682 	mov	dptr,#_dotmatrix_send_PARM_4
      00110A EC               [12] 3683 	mov	a,r4
      00110B F0               [24] 3684 	movx	@dptr,a
      00110C 89 82            [24] 3685 	mov	dpl,r1
      00110E C0 07            [24] 3686 	push	ar7
      001110 C0 06            [24] 3687 	push	ar6
      001112 C0 05            [24] 3688 	push	ar5
      001114 C0 04            [24] 3689 	push	ar4
      001116 C0 01            [24] 3690 	push	ar1
      001118 C0 00            [24] 3691 	push	ar0
      00111A 12r00r5D         [24] 3692 	lcall	_dotmatrix_send
      00111D D0 00            [24] 3693 	pop	ar0
      00111F D0 01            [24] 3694 	pop	ar1
      001121 D0 04            [24] 3695 	pop	ar4
      001123 D0 05            [24] 3696 	pop	ar5
      001125 D0 06            [24] 3697 	pop	ar6
      001127 D0 07            [24] 3698 	pop	ar7
                                   3699 ;	dotmatrix.c:580: dotmatrix_send(row + 1, pattern[1][row], DISPLAY2, unit);
      001129 E5*04            [12] 3700 	mov	a,_display_explosion_pattern_sloc1_1_0
      00112B 25*06            [12] 3701 	add	a,_display_explosion_pattern_sloc2_1_0
      00112D F8               [12] 3702 	mov	r0,a
      00112E E5*05            [12] 3703 	mov	a,(_display_explosion_pattern_sloc1_1_0 + 1)
      001130 35*07            [12] 3704 	addc	a,(_display_explosion_pattern_sloc2_1_0 + 1)
      001132 FA               [12] 3705 	mov	r2,a
      001133 AB*08            [24] 3706 	mov	r3,(_display_explosion_pattern_sloc2_1_0 + 2)
      001135 88 82            [24] 3707 	mov	dpl,r0
      001137 8A 83            [24] 3708 	mov	dph,r2
      001139 8B F0            [24] 3709 	mov	b,r3
      00113B 12r00r00         [24] 3710 	lcall	__gptrget
      00113E F8               [12] 3711 	mov	r0,a
      00113F 90r00r03         [24] 3712 	mov	dptr,#_dotmatrix_send_PARM_2
      001142 F0               [24] 3713 	movx	@dptr,a
      001143 90r00r04         [24] 3714 	mov	dptr,#_dotmatrix_send_PARM_3
      001146 74 01            [12] 3715 	mov	a,#0x01
      001148 F0               [24] 3716 	movx	@dptr,a
      001149 90r00r05         [24] 3717 	mov	dptr,#_dotmatrix_send_PARM_4
      00114C EC               [12] 3718 	mov	a,r4
      00114D F0               [24] 3719 	movx	@dptr,a
      00114E 89 82            [24] 3720 	mov	dpl,r1
      001150 C0 07            [24] 3721 	push	ar7
      001152 C0 06            [24] 3722 	push	ar6
      001154 C0 05            [24] 3723 	push	ar5
      001156 C0 01            [24] 3724 	push	ar1
      001158 C0 00            [24] 3725 	push	ar0
      00115A 12r00r5D         [24] 3726 	lcall	_dotmatrix_send
      00115D D0 00            [24] 3727 	pop	ar0
      00115F D0 01            [24] 3728 	pop	ar1
      001161 D0 05            [24] 3729 	pop	ar5
      001163 D0 06            [24] 3730 	pop	ar6
      001165 D0 07            [24] 3731 	pop	ar7
                                   3732 ;	dotmatrix.c:577: for (int row = 0; row < 8; row++)
      001167 05*04            [12] 3733 	inc	_display_explosion_pattern_sloc1_1_0
      001169 E4               [12] 3734 	clr	a
      00116A B5*04 02         [24] 3735 	cjne	a,_display_explosion_pattern_sloc1_1_0,00131$
      00116D 05*05            [12] 3736 	inc	(_display_explosion_pattern_sloc1_1_0 + 1)
      00116F                       3737 00131$:
      00116F D0 01            [24] 3738 	pop	ar1
      001171 D0 00            [24] 3739 	pop	ar0
      001173 02r10rD0         [24] 3740 	ljmp	00104$
      001176                       3741 00108$:
                                   3742 ;	dotmatrix.c:575: for (int unit = 1; unit <= 4; unit++)
      001176 08               [12] 3743 	inc	r0
      001177 B8 00 01         [24] 3744 	cjne	r0,#0x00,00132$
      00117A 09               [12] 3745 	inc	r1
      00117B                       3746 00132$:
                                   3747 ;	dotmatrix.c:583: }
      00117B 02r10rB7         [24] 3748 	ljmp	00107$
                                   3749 ;------------------------------------------------------------
                                   3750 ;Allocation info for local variables in function 'display_character'
                                   3751 ;------------------------------------------------------------
                                   3752 ;sloc0                     Allocated with name '_display_character_sloc0_1_0'
                                   3753 ;sloc1                     Allocated with name '_display_character_sloc1_1_0'
                                   3754 ;sloc2                     Allocated with name '_display_character_sloc2_1_0'
                                   3755 ;unit                      Allocated with name '_display_character_PARM_2'
                                   3756 ;display                   Allocated with name '_display_character_PARM_3'
                                   3757 ;character                 Allocated with name '_display_character_character_65536_121'
                                   3758 ;i                         Allocated with name '_display_character_i_131072_123'
                                   3759 ;------------------------------------------------------------
                                   3760 ;	dotmatrix.c:585: void display_character(uint8_t *character, uint8_t unit, display_t display)
                                   3761 ;	-----------------------------------------
                                   3762 ;	 function display_character
                                   3763 ;	-----------------------------------------
      00117E                       3764 _display_character:
      00117E AF F0            [24] 3765 	mov	r7,b
      001180 AE 83            [24] 3766 	mov	r6,dph
      001182 E5 82            [12] 3767 	mov	a,dpl
      001184 90r00r16         [24] 3768 	mov	dptr,#_display_character_character_65536_121
      001187 F0               [24] 3769 	movx	@dptr,a
      001188 EE               [12] 3770 	mov	a,r6
      001189 A3               [24] 3771 	inc	dptr
      00118A F0               [24] 3772 	movx	@dptr,a
      00118B EF               [12] 3773 	mov	a,r7
      00118C A3               [24] 3774 	inc	dptr
      00118D F0               [24] 3775 	movx	@dptr,a
                                   3776 ;	dotmatrix.c:587: for (int i = 0; i < 8; i++)
      00118E 90r00r16         [24] 3777 	mov	dptr,#_display_character_character_65536_121
      001191 E0               [24] 3778 	movx	a,@dptr
      001192 FD               [12] 3779 	mov	r5,a
      001193 A3               [24] 3780 	inc	dptr
      001194 E0               [24] 3781 	movx	a,@dptr
      001195 FE               [12] 3782 	mov	r6,a
      001196 A3               [24] 3783 	inc	dptr
      001197 E0               [24] 3784 	movx	a,@dptr
      001198 FF               [12] 3785 	mov	r7,a
      001199 90r00r15         [24] 3786 	mov	dptr,#_display_character_PARM_3
      00119C E0               [24] 3787 	movx	a,@dptr
      00119D F5*0A            [12] 3788 	mov	_display_character_sloc1_1_0,a
      00119F 90r00r14         [24] 3789 	mov	dptr,#_display_character_PARM_2
      0011A2 E0               [24] 3790 	movx	a,@dptr
      0011A3 F5*09            [12] 3791 	mov	_display_character_sloc0_1_0,a
      0011A5 79 00            [12] 3792 	mov	r1,#0x00
      0011A7 7A 00            [12] 3793 	mov	r2,#0x00
      0011A9                       3794 00103$:
      0011A9 C3               [12] 3795 	clr	c
      0011AA E9               [12] 3796 	mov	a,r1
      0011AB 94 08            [12] 3797 	subb	a,#0x08
      0011AD EA               [12] 3798 	mov	a,r2
      0011AE 64 80            [12] 3799 	xrl	a,#0x80
      0011B0 94 80            [12] 3800 	subb	a,#0x80
      0011B2 50 48            [24] 3801 	jnc	00105$
                                   3802 ;	dotmatrix.c:589: dotmatrix_send(i + 1, character[i], display, unit);
      0011B4 89 00            [24] 3803 	mov	ar0,r1
      0011B6 E8               [12] 3804 	mov	a,r0
      0011B7 04               [12] 3805 	inc	a
      0011B8 F5*0B            [12] 3806 	mov	_display_character_sloc2_1_0,a
      0011BA E9               [12] 3807 	mov	a,r1
      0011BB 2D               [12] 3808 	add	a,r5
      0011BC F8               [12] 3809 	mov	r0,a
      0011BD EA               [12] 3810 	mov	a,r2
      0011BE 3E               [12] 3811 	addc	a,r6
      0011BF FB               [12] 3812 	mov	r3,a
      0011C0 8F 04            [24] 3813 	mov	ar4,r7
      0011C2 88 82            [24] 3814 	mov	dpl,r0
      0011C4 8B 83            [24] 3815 	mov	dph,r3
      0011C6 8C F0            [24] 3816 	mov	b,r4
      0011C8 12r00r00         [24] 3817 	lcall	__gptrget
      0011CB 90r00r03         [24] 3818 	mov	dptr,#_dotmatrix_send_PARM_2
      0011CE F0               [24] 3819 	movx	@dptr,a
      0011CF 90r00r04         [24] 3820 	mov	dptr,#_dotmatrix_send_PARM_3
      0011D2 E5*0A            [12] 3821 	mov	a,_display_character_sloc1_1_0
      0011D4 F0               [24] 3822 	movx	@dptr,a
      0011D5 90r00r05         [24] 3823 	mov	dptr,#_dotmatrix_send_PARM_4
      0011D8 E5*09            [12] 3824 	mov	a,_display_character_sloc0_1_0
      0011DA F0               [24] 3825 	movx	@dptr,a
      0011DB 85*0B 82         [24] 3826 	mov	dpl,_display_character_sloc2_1_0
      0011DE C0 07            [24] 3827 	push	ar7
      0011E0 C0 06            [24] 3828 	push	ar6
      0011E2 C0 05            [24] 3829 	push	ar5
      0011E4 C0 02            [24] 3830 	push	ar2
      0011E6 C0 01            [24] 3831 	push	ar1
      0011E8 12r00r5D         [24] 3832 	lcall	_dotmatrix_send
      0011EB D0 01            [24] 3833 	pop	ar1
      0011ED D0 02            [24] 3834 	pop	ar2
      0011EF D0 05            [24] 3835 	pop	ar5
      0011F1 D0 06            [24] 3836 	pop	ar6
      0011F3 D0 07            [24] 3837 	pop	ar7
                                   3838 ;	dotmatrix.c:587: for (int i = 0; i < 8; i++)
      0011F5 09               [12] 3839 	inc	r1
      0011F6 B9 00 B0         [24] 3840 	cjne	r1,#0x00,00103$
      0011F9 0A               [12] 3841 	inc	r2
      0011FA 80 AD            [24] 3842 	sjmp	00103$
      0011FC                       3843 00105$:
                                   3844 ;	dotmatrix.c:591: }
      0011FC 22               [24] 3845 	ret
                                   3846 ;------------------------------------------------------------
                                   3847 ;Allocation info for local variables in function 'clear_display'
                                   3848 ;------------------------------------------------------------
                                   3849 ;unit                      Allocated with name '_clear_display_unit_131072_126'
                                   3850 ;row                       Allocated with name '_clear_display_row_262144_128'
                                   3851 ;unit                      Allocated with name '_clear_display_unit_131072_130'
                                   3852 ;row                       Allocated with name '_clear_display_row_262144_132'
                                   3853 ;------------------------------------------------------------
                                   3854 ;	dotmatrix.c:593: void clear_display(){
                                   3855 ;	-----------------------------------------
                                   3856 ;	 function clear_display
                                   3857 ;	-----------------------------------------
      0011FD                       3858 _clear_display:
                                   3859 ;	dotmatrix.c:594: for (int unit = 1; unit <= 4; unit++)
      0011FD 7E 01            [12] 3860 	mov	r6,#0x01
      0011FF 7F 00            [12] 3861 	mov	r7,#0x00
      001201                       3862 00109$:
      001201 C3               [12] 3863 	clr	c
      001202 74 04            [12] 3864 	mov	a,#0x04
      001204 9E               [12] 3865 	subb	a,r6
      001205 74 80            [12] 3866 	mov	a,#(0x00 ^ 0x80)
      001207 8F F0            [24] 3867 	mov	b,r7
      001209 63 F0 80         [24] 3868 	xrl	b,#0x80
      00120C 95 F0            [12] 3869 	subb	a,b
      00120E 40 54            [24] 3870 	jc	00102$
                                   3871 ;	dotmatrix.c:596: for (int row = 1; row <= EIGHT; row++)
      001210 8E 04            [24] 3872 	mov	ar4,r6
      001212 8F 05            [24] 3873 	mov	ar5,r7
      001214 7A 01            [12] 3874 	mov	r2,#0x01
      001216 7B 00            [12] 3875 	mov	r3,#0x00
      001218                       3876 00106$:
      001218 C3               [12] 3877 	clr	c
      001219 74 08            [12] 3878 	mov	a,#0x08
      00121B 9A               [12] 3879 	subb	a,r2
      00121C 74 80            [12] 3880 	mov	a,#(0x00 ^ 0x80)
      00121E 8B F0            [24] 3881 	mov	b,r3
      001220 63 F0 80         [24] 3882 	xrl	b,#0x80
      001223 95 F0            [12] 3883 	subb	a,b
      001225 40 36            [24] 3884 	jc	00110$
                                   3885 ;	dotmatrix.c:598: dotmatrix_send(row, ZERO, DISPLAY1, unit);
      001227 8A 01            [24] 3886 	mov	ar1,r2
      001229 8C 00            [24] 3887 	mov	ar0,r4
      00122B 90r00r03         [24] 3888 	mov	dptr,#_dotmatrix_send_PARM_2
      00122E E4               [12] 3889 	clr	a
      00122F F0               [24] 3890 	movx	@dptr,a
      001230 90r00r04         [24] 3891 	mov	dptr,#_dotmatrix_send_PARM_3
      001233 F0               [24] 3892 	movx	@dptr,a
      001234 90r00r05         [24] 3893 	mov	dptr,#_dotmatrix_send_PARM_4
      001237 E8               [12] 3894 	mov	a,r0
      001238 F0               [24] 3895 	movx	@dptr,a
      001239 89 82            [24] 3896 	mov	dpl,r1
      00123B C0 07            [24] 3897 	push	ar7
      00123D C0 06            [24] 3898 	push	ar6
      00123F C0 05            [24] 3899 	push	ar5
      001241 C0 04            [24] 3900 	push	ar4
      001243 C0 03            [24] 3901 	push	ar3
      001245 C0 02            [24] 3902 	push	ar2
      001247 12r00r5D         [24] 3903 	lcall	_dotmatrix_send
      00124A D0 02            [24] 3904 	pop	ar2
      00124C D0 03            [24] 3905 	pop	ar3
      00124E D0 04            [24] 3906 	pop	ar4
      001250 D0 05            [24] 3907 	pop	ar5
      001252 D0 06            [24] 3908 	pop	ar6
      001254 D0 07            [24] 3909 	pop	ar7
                                   3910 ;	dotmatrix.c:596: for (int row = 1; row <= EIGHT; row++)
      001256 0A               [12] 3911 	inc	r2
      001257 BA 00 BE         [24] 3912 	cjne	r2,#0x00,00106$
      00125A 0B               [12] 3913 	inc	r3
      00125B 80 BB            [24] 3914 	sjmp	00106$
      00125D                       3915 00110$:
                                   3916 ;	dotmatrix.c:594: for (int unit = 1; unit <= 4; unit++)
      00125D 0E               [12] 3917 	inc	r6
      00125E BE 00 A0         [24] 3918 	cjne	r6,#0x00,00109$
      001261 0F               [12] 3919 	inc	r7
      001262 80 9D            [24] 3920 	sjmp	00109$
      001264                       3921 00102$:
                                   3922 ;	dotmatrix.c:602: for (int unit = 1; unit <= 4; unit++)
      001264 7E 01            [12] 3923 	mov	r6,#0x01
      001266 7F 00            [12] 3924 	mov	r7,#0x00
      001268                       3925 00115$:
      001268 C3               [12] 3926 	clr	c
      001269 74 04            [12] 3927 	mov	a,#0x04
      00126B 9E               [12] 3928 	subb	a,r6
      00126C 74 80            [12] 3929 	mov	a,#(0x00 ^ 0x80)
      00126E 8F F0            [24] 3930 	mov	b,r7
      001270 63 F0 80         [24] 3931 	xrl	b,#0x80
      001273 95 F0            [12] 3932 	subb	a,b
      001275 40 55            [24] 3933 	jc	00117$
                                   3934 ;	dotmatrix.c:604: for (int row = 1; row <= EIGHT; row++)
      001277 8E 04            [24] 3935 	mov	ar4,r6
      001279 8F 05            [24] 3936 	mov	ar5,r7
      00127B 7A 01            [12] 3937 	mov	r2,#0x01
      00127D 7B 00            [12] 3938 	mov	r3,#0x00
      00127F                       3939 00112$:
      00127F C3               [12] 3940 	clr	c
      001280 74 08            [12] 3941 	mov	a,#0x08
      001282 9A               [12] 3942 	subb	a,r2
      001283 74 80            [12] 3943 	mov	a,#(0x00 ^ 0x80)
      001285 8B F0            [24] 3944 	mov	b,r3
      001287 63 F0 80         [24] 3945 	xrl	b,#0x80
      00128A 95 F0            [12] 3946 	subb	a,b
      00128C 40 37            [24] 3947 	jc	00116$
                                   3948 ;	dotmatrix.c:606: dotmatrix_send(row, ZERO, DISPLAY2, unit);
      00128E 8A 01            [24] 3949 	mov	ar1,r2
      001290 8C 00            [24] 3950 	mov	ar0,r4
      001292 90r00r03         [24] 3951 	mov	dptr,#_dotmatrix_send_PARM_2
      001295 E4               [12] 3952 	clr	a
      001296 F0               [24] 3953 	movx	@dptr,a
      001297 90r00r04         [24] 3954 	mov	dptr,#_dotmatrix_send_PARM_3
      00129A 04               [12] 3955 	inc	a
      00129B F0               [24] 3956 	movx	@dptr,a
      00129C 90r00r05         [24] 3957 	mov	dptr,#_dotmatrix_send_PARM_4
      00129F E8               [12] 3958 	mov	a,r0
      0012A0 F0               [24] 3959 	movx	@dptr,a
      0012A1 89 82            [24] 3960 	mov	dpl,r1
      0012A3 C0 07            [24] 3961 	push	ar7
      0012A5 C0 06            [24] 3962 	push	ar6
      0012A7 C0 05            [24] 3963 	push	ar5
      0012A9 C0 04            [24] 3964 	push	ar4
      0012AB C0 03            [24] 3965 	push	ar3
      0012AD C0 02            [24] 3966 	push	ar2
      0012AF 12r00r5D         [24] 3967 	lcall	_dotmatrix_send
      0012B2 D0 02            [24] 3968 	pop	ar2
      0012B4 D0 03            [24] 3969 	pop	ar3
      0012B6 D0 04            [24] 3970 	pop	ar4
      0012B8 D0 05            [24] 3971 	pop	ar5
      0012BA D0 06            [24] 3972 	pop	ar6
      0012BC D0 07            [24] 3973 	pop	ar7
                                   3974 ;	dotmatrix.c:604: for (int row = 1; row <= EIGHT; row++)
      0012BE 0A               [12] 3975 	inc	r2
      0012BF BA 00 BD         [24] 3976 	cjne	r2,#0x00,00112$
      0012C2 0B               [12] 3977 	inc	r3
      0012C3 80 BA            [24] 3978 	sjmp	00112$
      0012C5                       3979 00116$:
                                   3980 ;	dotmatrix.c:602: for (int unit = 1; unit <= 4; unit++)
      0012C5 0E               [12] 3981 	inc	r6
      0012C6 BE 00 9F         [24] 3982 	cjne	r6,#0x00,00115$
      0012C9 0F               [12] 3983 	inc	r7
      0012CA 80 9C            [24] 3984 	sjmp	00115$
      0012CC                       3985 00117$:
                                   3986 ;	dotmatrix.c:609: }
      0012CC 22               [24] 3987 	ret
                                   3988 ;------------------------------------------------------------
                                   3989 ;Allocation info for local variables in function 'display_explosion'
                                   3990 ;------------------------------------------------------------
                                   3991 ;player                    Allocated with name '_display_explosion_player_65536_134'
                                   3992 ;i                         Allocated with name '_display_explosion_i_65536_135'
                                   3993 ;j                         Allocated with name '_display_explosion_j_65536_135'
                                   3994 ;player_array              Allocated with name '_display_explosion_player_array_65536_135'
                                   3995 ;explosion                 Allocated with name '_display_explosion_explosion_131072_136'
                                   3996 ;j                         Allocated with name '_display_explosion_j_131072_144'
                                   3997 ;------------------------------------------------------------
                                   3998 ;	dotmatrix.c:612: void display_explosion(player_t player)
                                   3999 ;	-----------------------------------------
                                   4000 ;	 function display_explosion
                                   4001 ;	-----------------------------------------
      0012CD                       4002 _display_explosion:
      0012CD E5 82            [12] 4003 	mov	a,dpl
      0012CF 90r00r19         [24] 4004 	mov	dptr,#_display_explosion_player_65536_134
      0012D2 F0               [24] 4005 	movx	@dptr,a
                                   4006 ;	dotmatrix.c:616: uint8_t *player_array = (player == PLAYER1) ? number_1 : number_2;
      0012D3 E0               [24] 4007 	movx	a,@dptr
      0012D4 70 06            [24] 4008 	jnz	00125$
      0012D6 7Er41            [12] 4009 	mov	r6,#_number_1
      0012D8 7Fs00            [12] 4010 	mov	r7,#(_number_1 >> 8)
      0012DA 80 04            [24] 4011 	sjmp	00126$
      0012DC                       4012 00125$:
      0012DC 7Er49            [12] 4013 	mov	r6,#_number_2
      0012DE 7Fs00            [12] 4014 	mov	r7,#(_number_2 >> 8)
      0012E0                       4015 00126$:
      0012E0 8F 05            [24] 4016 	mov	ar5,r7
      0012E2 7F 00            [12] 4017 	mov	r7,#0x00
                                   4018 ;	dotmatrix.c:618: for(int explosion=0; explosion<4; explosion++){
      0012E4 7B 00            [12] 4019 	mov	r3,#0x00
      0012E6 7C 00            [12] 4020 	mov	r4,#0x00
      0012E8                       4021 00118$:
      0012E8 C3               [12] 4022 	clr	c
      0012E9 EB               [12] 4023 	mov	a,r3
      0012EA 94 04            [12] 4024 	subb	a,#0x04
      0012EC EC               [12] 4025 	mov	a,r4
      0012ED 64 80            [12] 4026 	xrl	a,#0x80
      0012EF 94 80            [12] 4027 	subb	a,#0x80
      0012F1 50 61            [24] 4028 	jnc	00105$
                                   4029 ;	dotmatrix.c:619: BUZZER_ON;
                                   4030 ;	assignBit
      0012F3 C2 82            [12] 4031 	clr	_P0_2
                                   4032 ;	dotmatrix.c:621: display_explosion_pattern(explosion_small);
      0012F5 90r00r61         [24] 4033 	mov	dptr,#_explosion_small
      0012F8 75 F0 00         [24] 4034 	mov	b,#0x00
      0012FB C0 07            [24] 4035 	push	ar7
      0012FD C0 06            [24] 4036 	push	ar6
      0012FF C0 05            [24] 4037 	push	ar5
      001301 C0 04            [24] 4038 	push	ar4
      001303 C0 03            [24] 4039 	push	ar3
      001305 12r10r8D         [24] 4040 	lcall	_display_explosion_pattern
      001308 D0 03            [24] 4041 	pop	ar3
      00130A D0 04            [24] 4042 	pop	ar4
      00130C D0 05            [24] 4043 	pop	ar5
      00130E D0 06            [24] 4044 	pop	ar6
      001310 D0 07            [24] 4045 	pop	ar7
                                   4046 ;	dotmatrix.c:622: for(i=0; i<200; i++){
      001312 7A 00            [12] 4047 	mov	r2,#0x00
                                   4048 ;	dotmatrix.c:623: for(j=0;j<20;j++);
      001314                       4049 00129$:
      001314 79 14            [12] 4050 	mov	r1,#0x14
      001316                       4051 00109$:
      001316 19               [12] 4052 	dec	r1
      001317 E9               [12] 4053 	mov	a,r1
      001318 70 FC            [24] 4054 	jnz	00109$
                                   4055 ;	dotmatrix.c:622: for(i=0; i<200; i++){
      00131A 0A               [12] 4056 	inc	r2
      00131B BA C8 00         [24] 4057 	cjne	r2,#0xc8,00188$
      00131E                       4058 00188$:
      00131E 40 F4            [24] 4059 	jc	00129$
                                   4060 ;	dotmatrix.c:625: display_explosion_pattern(explosion_large);
      001320 90r00r71         [24] 4061 	mov	dptr,#_explosion_large
      001323 75 F0 00         [24] 4062 	mov	b,#0x00
      001326 C0 07            [24] 4063 	push	ar7
      001328 C0 06            [24] 4064 	push	ar6
      00132A C0 05            [24] 4065 	push	ar5
      00132C C0 04            [24] 4066 	push	ar4
      00132E C0 03            [24] 4067 	push	ar3
      001330 12r10r8D         [24] 4068 	lcall	_display_explosion_pattern
      001333 D0 03            [24] 4069 	pop	ar3
      001335 D0 04            [24] 4070 	pop	ar4
      001337 D0 05            [24] 4071 	pop	ar5
      001339 D0 06            [24] 4072 	pop	ar6
      00133B D0 07            [24] 4073 	pop	ar7
                                   4074 ;	dotmatrix.c:626: for(i=0; i<200; i++){
      00133D 7A 00            [12] 4075 	mov	r2,#0x00
                                   4076 ;	dotmatrix.c:627: for(j=0;j<20;j++);
      00133F                       4077 00133$:
      00133F 79 14            [12] 4078 	mov	r1,#0x14
      001341                       4079 00114$:
      001341 19               [12] 4080 	dec	r1
      001342 E9               [12] 4081 	mov	a,r1
      001343 70 FC            [24] 4082 	jnz	00114$
                                   4083 ;	dotmatrix.c:626: for(i=0; i<200; i++){
      001345 0A               [12] 4084 	inc	r2
      001346 BA C8 00         [24] 4085 	cjne	r2,#0xc8,00191$
      001349                       4086 00191$:
      001349 40 F4            [24] 4087 	jc	00133$
                                   4088 ;	dotmatrix.c:630: BUZZER_OFF;
                                   4089 ;	assignBit
      00134B D2 82            [12] 4090 	setb	_P0_2
                                   4091 ;	dotmatrix.c:618: for(int explosion=0; explosion<4; explosion++){
      00134D 0B               [12] 4092 	inc	r3
      00134E BB 00 97         [24] 4093 	cjne	r3,#0x00,00118$
      001351 0C               [12] 4094 	inc	r4
      001352 80 94            [24] 4095 	sjmp	00118$
      001354                       4096 00105$:
                                   4097 ;	dotmatrix.c:634: display_character(letter_G, 1, DISPLAY1);
      001354 90r00r14         [24] 4098 	mov	dptr,#_display_character_PARM_2
      001357 74 01            [12] 4099 	mov	a,#0x01
      001359 F0               [24] 4100 	movx	@dptr,a
      00135A 90r00r15         [24] 4101 	mov	dptr,#_display_character_PARM_3
      00135D E4               [12] 4102 	clr	a
      00135E F0               [24] 4103 	movx	@dptr,a
      00135F 90r00r01         [24] 4104 	mov	dptr,#_letter_G
      001362 75 F0 00         [24] 4105 	mov	b,#0x00
      001365 C0 07            [24] 4106 	push	ar7
      001367 C0 06            [24] 4107 	push	ar6
      001369 C0 05            [24] 4108 	push	ar5
      00136B 12r11r7E         [24] 4109 	lcall	_display_character
      00136E D0 05            [24] 4110 	pop	ar5
      001370 D0 06            [24] 4111 	pop	ar6
      001372 D0 07            [24] 4112 	pop	ar7
                                   4113 ;	dotmatrix.c:635: display_character(letter_A, 2, DISPLAY1);
      001374 90r00r14         [24] 4114 	mov	dptr,#_display_character_PARM_2
      001377 74 02            [12] 4115 	mov	a,#0x02
      001379 F0               [24] 4116 	movx	@dptr,a
      00137A 90r00r15         [24] 4117 	mov	dptr,#_display_character_PARM_3
      00137D E4               [12] 4118 	clr	a
      00137E F0               [24] 4119 	movx	@dptr,a
      00137F 90r00r09         [24] 4120 	mov	dptr,#_letter_A
      001382 75 F0 00         [24] 4121 	mov	b,#0x00
      001385 C0 07            [24] 4122 	push	ar7
      001387 C0 06            [24] 4123 	push	ar6
      001389 C0 05            [24] 4124 	push	ar5
      00138B 12r11r7E         [24] 4125 	lcall	_display_character
      00138E D0 05            [24] 4126 	pop	ar5
      001390 D0 06            [24] 4127 	pop	ar6
      001392 D0 07            [24] 4128 	pop	ar7
                                   4129 ;	dotmatrix.c:636: display_character(letter_M, 3, DISPLAY1);
      001394 90r00r14         [24] 4130 	mov	dptr,#_display_character_PARM_2
      001397 74 03            [12] 4131 	mov	a,#0x03
      001399 F0               [24] 4132 	movx	@dptr,a
      00139A 90r00r15         [24] 4133 	mov	dptr,#_display_character_PARM_3
      00139D E4               [12] 4134 	clr	a
      00139E F0               [24] 4135 	movx	@dptr,a
      00139F 90r00r11         [24] 4136 	mov	dptr,#_letter_M
      0013A2 75 F0 00         [24] 4137 	mov	b,#0x00
      0013A5 C0 07            [24] 4138 	push	ar7
      0013A7 C0 06            [24] 4139 	push	ar6
      0013A9 C0 05            [24] 4140 	push	ar5
      0013AB 12r11r7E         [24] 4141 	lcall	_display_character
      0013AE D0 05            [24] 4142 	pop	ar5
      0013B0 D0 06            [24] 4143 	pop	ar6
      0013B2 D0 07            [24] 4144 	pop	ar7
                                   4145 ;	dotmatrix.c:637: display_character(letter_E, 4, DISPLAY1);
      0013B4 90r00r14         [24] 4146 	mov	dptr,#_display_character_PARM_2
      0013B7 74 04            [12] 4147 	mov	a,#0x04
      0013B9 F0               [24] 4148 	movx	@dptr,a
      0013BA 90r00r15         [24] 4149 	mov	dptr,#_display_character_PARM_3
      0013BD E4               [12] 4150 	clr	a
      0013BE F0               [24] 4151 	movx	@dptr,a
      0013BF 90r00r19         [24] 4152 	mov	dptr,#_letter_E
      0013C2 75 F0 00         [24] 4153 	mov	b,#0x00
      0013C5 C0 07            [24] 4154 	push	ar7
      0013C7 C0 06            [24] 4155 	push	ar6
      0013C9 C0 05            [24] 4156 	push	ar5
      0013CB 12r11r7E         [24] 4157 	lcall	_display_character
      0013CE D0 05            [24] 4158 	pop	ar5
      0013D0 D0 06            [24] 4159 	pop	ar6
      0013D2 D0 07            [24] 4160 	pop	ar7
                                   4161 ;	dotmatrix.c:639: display_character(letter_O, 1, DISPLAY2);
      0013D4 90r00r14         [24] 4162 	mov	dptr,#_display_character_PARM_2
      0013D7 74 01            [12] 4163 	mov	a,#0x01
      0013D9 F0               [24] 4164 	movx	@dptr,a
      0013DA 90r00r15         [24] 4165 	mov	dptr,#_display_character_PARM_3
      0013DD F0               [24] 4166 	movx	@dptr,a
      0013DE 90r00r21         [24] 4167 	mov	dptr,#_letter_O
      0013E1 75 F0 00         [24] 4168 	mov	b,#0x00
      0013E4 C0 07            [24] 4169 	push	ar7
      0013E6 C0 06            [24] 4170 	push	ar6
      0013E8 C0 05            [24] 4171 	push	ar5
      0013EA 12r11r7E         [24] 4172 	lcall	_display_character
      0013ED D0 05            [24] 4173 	pop	ar5
      0013EF D0 06            [24] 4174 	pop	ar6
      0013F1 D0 07            [24] 4175 	pop	ar7
                                   4176 ;	dotmatrix.c:640: display_character(letter_V, 2, DISPLAY2);
      0013F3 90r00r14         [24] 4177 	mov	dptr,#_display_character_PARM_2
      0013F6 74 02            [12] 4178 	mov	a,#0x02
      0013F8 F0               [24] 4179 	movx	@dptr,a
      0013F9 90r00r15         [24] 4180 	mov	dptr,#_display_character_PARM_3
      0013FC 14               [12] 4181 	dec	a
      0013FD F0               [24] 4182 	movx	@dptr,a
      0013FE 90r00r29         [24] 4183 	mov	dptr,#_letter_V
      001401 75 F0 00         [24] 4184 	mov	b,#0x00
      001404 C0 07            [24] 4185 	push	ar7
      001406 C0 06            [24] 4186 	push	ar6
      001408 C0 05            [24] 4187 	push	ar5
      00140A 12r11r7E         [24] 4188 	lcall	_display_character
      00140D D0 05            [24] 4189 	pop	ar5
      00140F D0 06            [24] 4190 	pop	ar6
      001411 D0 07            [24] 4191 	pop	ar7
                                   4192 ;	dotmatrix.c:641: display_character(letter_E, 3, DISPLAY2);
      001413 90r00r14         [24] 4193 	mov	dptr,#_display_character_PARM_2
      001416 74 03            [12] 4194 	mov	a,#0x03
      001418 F0               [24] 4195 	movx	@dptr,a
      001419 90r00r15         [24] 4196 	mov	dptr,#_display_character_PARM_3
      00141C 74 01            [12] 4197 	mov	a,#0x01
      00141E F0               [24] 4198 	movx	@dptr,a
      00141F 90r00r19         [24] 4199 	mov	dptr,#_letter_E
      001422 75 F0 00         [24] 4200 	mov	b,#0x00
      001425 C0 07            [24] 4201 	push	ar7
      001427 C0 06            [24] 4202 	push	ar6
      001429 C0 05            [24] 4203 	push	ar5
      00142B 12r11r7E         [24] 4204 	lcall	_display_character
      00142E D0 05            [24] 4205 	pop	ar5
      001430 D0 06            [24] 4206 	pop	ar6
      001432 D0 07            [24] 4207 	pop	ar7
                                   4208 ;	dotmatrix.c:642: display_character(letter_R, 4, DISPLAY2);
      001434 90r00r14         [24] 4209 	mov	dptr,#_display_character_PARM_2
      001437 74 04            [12] 4210 	mov	a,#0x04
      001439 F0               [24] 4211 	movx	@dptr,a
      00143A 90r00r15         [24] 4212 	mov	dptr,#_display_character_PARM_3
      00143D 74 01            [12] 4213 	mov	a,#0x01
      00143F F0               [24] 4214 	movx	@dptr,a
      001440 90r00r31         [24] 4215 	mov	dptr,#_letter_R
      001443 75 F0 00         [24] 4216 	mov	b,#0x00
      001446 C0 07            [24] 4217 	push	ar7
      001448 C0 06            [24] 4218 	push	ar6
      00144A C0 05            [24] 4219 	push	ar5
      00144C 12r11r7E         [24] 4220 	lcall	_display_character
      00144F D0 05            [24] 4221 	pop	ar5
      001451 D0 06            [24] 4222 	pop	ar6
      001453 D0 07            [24] 4223 	pop	ar7
                                   4224 ;	dotmatrix.c:644: for (uint16_t j=0; j<= 25000; j++);
      001455 7B 00            [12] 4225 	mov	r3,#0x00
      001457 7C 00            [12] 4226 	mov	r4,#0x00
      001459                       4227 00121$:
      001459 8B 01            [24] 4228 	mov	ar1,r3
      00145B 8C 02            [24] 4229 	mov	ar2,r4
      00145D C3               [12] 4230 	clr	c
      00145E 74 A8            [12] 4231 	mov	a,#0xa8
      001460 99               [12] 4232 	subb	a,r1
      001461 74 61            [12] 4233 	mov	a,#0x61
      001463 9A               [12] 4234 	subb	a,r2
      001464 40 07            [24] 4235 	jc	00106$
      001466 0B               [12] 4236 	inc	r3
      001467 BB 00 EF         [24] 4237 	cjne	r3,#0x00,00121$
      00146A 0C               [12] 4238 	inc	r4
      00146B 80 EC            [24] 4239 	sjmp	00121$
      00146D                       4240 00106$:
                                   4241 ;	dotmatrix.c:645: clear_display();
      00146D C0 07            [24] 4242 	push	ar7
      00146F C0 06            [24] 4243 	push	ar6
      001471 C0 05            [24] 4244 	push	ar5
      001473 12r11rFD         [24] 4245 	lcall	_clear_display
      001476 D0 05            [24] 4246 	pop	ar5
      001478 D0 06            [24] 4247 	pop	ar6
      00147A D0 07            [24] 4248 	pop	ar7
                                   4249 ;	dotmatrix.c:646: display_character(letter_P, 2, DISPLAY1);
      00147C 90r00r14         [24] 4250 	mov	dptr,#_display_character_PARM_2
      00147F 74 02            [12] 4251 	mov	a,#0x02
      001481 F0               [24] 4252 	movx	@dptr,a
      001482 90r00r15         [24] 4253 	mov	dptr,#_display_character_PARM_3
      001485 E4               [12] 4254 	clr	a
      001486 F0               [24] 4255 	movx	@dptr,a
      001487 90r00r39         [24] 4256 	mov	dptr,#_letter_P
      00148A 75 F0 00         [24] 4257 	mov	b,#0x00
      00148D C0 07            [24] 4258 	push	ar7
      00148F C0 06            [24] 4259 	push	ar6
      001491 C0 05            [24] 4260 	push	ar5
      001493 12r11r7E         [24] 4261 	lcall	_display_character
      001496 D0 05            [24] 4262 	pop	ar5
      001498 D0 06            [24] 4263 	pop	ar6
      00149A D0 07            [24] 4264 	pop	ar7
                                   4265 ;	dotmatrix.c:647: display_character(player_array, 3, DISPLAY1);
      00149C 90r00r14         [24] 4266 	mov	dptr,#_display_character_PARM_2
      00149F 74 03            [12] 4267 	mov	a,#0x03
      0014A1 F0               [24] 4268 	movx	@dptr,a
      0014A2 90r00r15         [24] 4269 	mov	dptr,#_display_character_PARM_3
      0014A5 E4               [12] 4270 	clr	a
      0014A6 F0               [24] 4271 	movx	@dptr,a
      0014A7 8E 82            [24] 4272 	mov	dpl,r6
      0014A9 8D 83            [24] 4273 	mov	dph,r5
      0014AB 8F F0            [24] 4274 	mov	b,r7
      0014AD 12r11r7E         [24] 4275 	lcall	_display_character
                                   4276 ;	dotmatrix.c:649: display_character(letter_W, 1, DISPLAY2);
      0014B0 90r00r14         [24] 4277 	mov	dptr,#_display_character_PARM_2
      0014B3 74 01            [12] 4278 	mov	a,#0x01
      0014B5 F0               [24] 4279 	movx	@dptr,a
      0014B6 90r00r15         [24] 4280 	mov	dptr,#_display_character_PARM_3
      0014B9 F0               [24] 4281 	movx	@dptr,a
      0014BA 90r00r51         [24] 4282 	mov	dptr,#_letter_W
      0014BD 75 F0 00         [24] 4283 	mov	b,#0x00
      0014C0 12r11r7E         [24] 4284 	lcall	_display_character
                                   4285 ;	dotmatrix.c:650: display_character(letter_O, 2, DISPLAY2);
      0014C3 90r00r14         [24] 4286 	mov	dptr,#_display_character_PARM_2
      0014C6 74 02            [12] 4287 	mov	a,#0x02
      0014C8 F0               [24] 4288 	movx	@dptr,a
      0014C9 90r00r15         [24] 4289 	mov	dptr,#_display_character_PARM_3
      0014CC 14               [12] 4290 	dec	a
      0014CD F0               [24] 4291 	movx	@dptr,a
      0014CE 90r00r21         [24] 4292 	mov	dptr,#_letter_O
      0014D1 75 F0 00         [24] 4293 	mov	b,#0x00
      0014D4 12r11r7E         [24] 4294 	lcall	_display_character
                                   4295 ;	dotmatrix.c:651: display_character(letter_N, 3, DISPLAY2);
      0014D7 90r00r14         [24] 4296 	mov	dptr,#_display_character_PARM_2
      0014DA 74 03            [12] 4297 	mov	a,#0x03
      0014DC F0               [24] 4298 	movx	@dptr,a
      0014DD 90r00r15         [24] 4299 	mov	dptr,#_display_character_PARM_3
      0014E0 74 01            [12] 4300 	mov	a,#0x01
      0014E2 F0               [24] 4301 	movx	@dptr,a
      0014E3 90r00r59         [24] 4302 	mov	dptr,#_letter_N
      0014E6 75 F0 00         [24] 4303 	mov	b,#0x00
                                   4304 ;	dotmatrix.c:654: }
      0014E9 02r11r7E         [24] 4305 	ljmp	_display_character
                                   4306 ;------------------------------------------------------------
                                   4307 ;Allocation info for local variables in function 'score_to_binary'
                                   4308 ;------------------------------------------------------------
                                   4309 ;score                     Allocated with name '_score_to_binary_score_65536_145'
                                   4310 ;binary_representation     Allocated with name '_score_to_binary_binary_representation_65536_146'
                                   4311 ;i                         Allocated with name '_score_to_binary_i_131072_147'
                                   4312 ;------------------------------------------------------------
                                   4313 ;	dotmatrix.c:656: uint8_t score_to_binary(uint8_t score) {
                                   4314 ;	-----------------------------------------
                                   4315 ;	 function score_to_binary
                                   4316 ;	-----------------------------------------
      0014EC                       4317 _score_to_binary:
      0014EC E5 82            [12] 4318 	mov	a,dpl
      0014EE 90r00r1A         [24] 4319 	mov	dptr,#_score_to_binary_score_65536_145
      0014F1 F0               [24] 4320 	movx	@dptr,a
                                   4321 ;	dotmatrix.c:657: uint8_t binary_representation = 0;
      0014F2 90r00r1B         [24] 4322 	mov	dptr,#_score_to_binary_binary_representation_65536_146
      0014F5 E4               [12] 4323 	clr	a
      0014F6 F0               [24] 4324 	movx	@dptr,a
                                   4325 ;	dotmatrix.c:659: for (int i = 0; i < score; i++) {
      0014F7 90r00r1A         [24] 4326 	mov	dptr,#_score_to_binary_score_65536_145
      0014FA E0               [24] 4327 	movx	a,@dptr
      0014FB FF               [12] 4328 	mov	r7,a
      0014FC 7D 00            [12] 4329 	mov	r5,#0x00
      0014FE 7E 00            [12] 4330 	mov	r6,#0x00
      001500                       4331 00103$:
      001500 8F 03            [24] 4332 	mov	ar3,r7
      001502 7C 00            [12] 4333 	mov	r4,#0x00
      001504 C3               [12] 4334 	clr	c
      001505 ED               [12] 4335 	mov	a,r5
      001506 9B               [12] 4336 	subb	a,r3
      001507 EE               [12] 4337 	mov	a,r6
      001508 64 80            [12] 4338 	xrl	a,#0x80
      00150A 8C F0            [24] 4339 	mov	b,r4
      00150C 63 F0 80         [24] 4340 	xrl	b,#0x80
      00150F 95 F0            [12] 4341 	subb	a,b
      001511 50 1D            [24] 4342 	jnc	00101$
                                   4343 ;	dotmatrix.c:660: binary_representation |= (1 << i);
      001513 8D 04            [24] 4344 	mov	ar4,r5
      001515 8C F0            [24] 4345 	mov	b,r4
      001517 05 F0            [12] 4346 	inc	b
      001519 74 01            [12] 4347 	mov	a,#0x01
      00151B 80 02            [24] 4348 	sjmp	00119$
      00151D                       4349 00117$:
      00151D 25 E0            [12] 4350 	add	a,acc
      00151F                       4351 00119$:
      00151F D5 F0 FB         [24] 4352 	djnz	b,00117$
      001522 FC               [12] 4353 	mov	r4,a
      001523 90r00r1B         [24] 4354 	mov	dptr,#_score_to_binary_binary_representation_65536_146
      001526 E0               [24] 4355 	movx	a,@dptr
      001527 4C               [12] 4356 	orl	a,r4
      001528 F0               [24] 4357 	movx	@dptr,a
                                   4358 ;	dotmatrix.c:659: for (int i = 0; i < score; i++) {
      001529 0D               [12] 4359 	inc	r5
      00152A BD 00 D3         [24] 4360 	cjne	r5,#0x00,00103$
      00152D 0E               [12] 4361 	inc	r6
      00152E 80 D0            [24] 4362 	sjmp	00103$
      001530                       4363 00101$:
                                   4364 ;	dotmatrix.c:663: return binary_representation;
      001530 90r00r1B         [24] 4365 	mov	dptr,#_score_to_binary_binary_representation_65536_146
      001533 E0               [24] 4366 	movx	a,@dptr
                                   4367 ;	dotmatrix.c:664: }
      001534 F5 82            [12] 4368 	mov	dpl,a
      001536 22               [24] 4369 	ret
                                   4370 ;------------------------------------------------------------
                                   4371 ;Allocation info for local variables in function 'send_score'
                                   4372 ;------------------------------------------------------------
                                   4373 ;p_player1                 Allocated with name '_send_score_p_player1_65536_149'
                                   4374 ;p_player2                 Allocated with name '_send_score_p_player2_65536_149'
                                   4375 ;data                      Allocated with name '_send_score_data_65536_149'
                                   4376 ;------------------------------------------------------------
                                   4377 ;	dotmatrix.c:666: void send_score(){
                                   4378 ;	-----------------------------------------
                                   4379 ;	 function send_score
                                   4380 ;	-----------------------------------------
      001537                       4381 _send_score:
                                   4382 ;	dotmatrix.c:667: uint8_t p_player1 = score_to_binary(player_points[PLAYER1]);
      001537 90r00r87         [24] 4383 	mov	dptr,#_player_points
      00153A E0               [24] 4384 	movx	a,@dptr
      00153B F5 82            [12] 4385 	mov	dpl,a
      00153D 12r14rEC         [24] 4386 	lcall	_score_to_binary
      001540 AF 82            [24] 4387 	mov	r7,dpl
                                   4388 ;	dotmatrix.c:668: uint8_t p_player2 = score_to_binary(player_points[PLAYER2]);
      001542 90r00r88         [24] 4389 	mov	dptr,#(_player_points + 0x0001)
      001545 E0               [24] 4390 	movx	a,@dptr
      001546 F5 82            [12] 4391 	mov	dpl,a
      001548 C0 07            [24] 4392 	push	ar7
      00154A 12r14rEC         [24] 4393 	lcall	_score_to_binary
      00154D AE 82            [24] 4394 	mov	r6,dpl
      00154F D0 07            [24] 4395 	pop	ar7
                                   4396 ;	dotmatrix.c:671: shift_data((p_player2 << 4 | p_player1));
      001551 EE               [12] 4397 	mov	a,r6
      001552 C4               [12] 4398 	swap	a
      001553 54 F0            [12] 4399 	anl	a,#0xf0
      001555 42 07            [12] 4400 	orl	ar7,a
      001557 8F 82            [24] 4401 	mov	dpl,r7
                                   4402 ;	dotmatrix.c:672: }
      001559 02r15r5C         [24] 4403 	ljmp	_shift_data
                                   4404 ;------------------------------------------------------------
                                   4405 ;Allocation info for local variables in function 'shift_data'
                                   4406 ;------------------------------------------------------------
                                   4407 ;data                      Allocated with name '_shift_data_data_65536_150'
                                   4408 ;whole_data                Allocated with name '_shift_data_whole_data_65537_152'
                                   4409 ;i                         Allocated with name '_shift_data_i_131073_153'
                                   4410 ;------------------------------------------------------------
                                   4411 ;	dotmatrix.c:675: void shift_data(uint8_t data){
                                   4412 ;	-----------------------------------------
                                   4413 ;	 function shift_data
                                   4414 ;	-----------------------------------------
      00155C                       4415 _shift_data:
      00155C E5 82            [12] 4416 	mov	a,dpl
      00155E 90r00r1C         [24] 4417 	mov	dptr,#_shift_data_data_65536_150
      001561 F0               [24] 4418 	movx	@dptr,a
                                   4419 ;	dotmatrix.c:676: SS_HIGH;
                                   4420 ;	assignBit
      001562 D2 91            [12] 4421 	setb	_P1_1
                                   4422 ;	dotmatrix.c:677: SS2_HIGH;
                                   4423 ;	assignBit
      001564 D2 90            [12] 4424 	setb	_P1_0
                                   4425 ;	dotmatrix.c:678: LATCH_LOW;
                                   4426 ;	assignBit
      001566 C2 80            [12] 4427 	clr	_P0_0
                                   4428 ;	dotmatrix.c:680: SHIFTREG_CLOCK_LOW;
                                   4429 ;	assignBit
      001568 C2 81            [12] 4430 	clr	_P0_1
                                   4431 ;	dotmatrix.c:681: MOSI_LOW;
                                   4432 ;	assignBit
      00156A C2 97            [12] 4433 	clr	_P1_7
                                   4434 ;	dotmatrix.c:683: uint8_t whole_data = data;
      00156C 90r00r1C         [24] 4435 	mov	dptr,#_shift_data_data_65536_150
      00156F E0               [24] 4436 	movx	a,@dptr
      001570 90r00r1D         [24] 4437 	mov	dptr,#_shift_data_whole_data_65537_152
      001573 F0               [24] 4438 	movx	@dptr,a
                                   4439 ;	dotmatrix.c:685: for (int i = 0; i < EIGHT; i++)
      001574 7E 00            [12] 4440 	mov	r6,#0x00
      001576 7F 00            [12] 4441 	mov	r7,#0x00
      001578                       4442 00106$:
      001578 C3               [12] 4443 	clr	c
      001579 EE               [12] 4444 	mov	a,r6
      00157A 94 08            [12] 4445 	subb	a,#0x08
      00157C EF               [12] 4446 	mov	a,r7
      00157D 64 80            [12] 4447 	xrl	a,#0x80
      00157F 94 80            [12] 4448 	subb	a,#0x80
      001581 50 1F            [24] 4449 	jnc	00104$
                                   4450 ;	dotmatrix.c:687: if (whole_data & 0x80)
      001583 90r00r1D         [24] 4451 	mov	dptr,#_shift_data_whole_data_65537_152
      001586 E0               [24] 4452 	movx	a,@dptr
      001587 30 E7 04         [24] 4453 	jnb	acc.7,00102$
                                   4454 ;	dotmatrix.c:688: MOSI_HIGH;
                                   4455 ;	assignBit
      00158A D2 97            [12] 4456 	setb	_P1_7
      00158C 80 02            [24] 4457 	sjmp	00103$
      00158E                       4458 00102$:
                                   4459 ;	dotmatrix.c:690: MOSI_LOW;
                                   4460 ;	assignBit
      00158E C2 97            [12] 4461 	clr	_P1_7
      001590                       4462 00103$:
                                   4463 ;	dotmatrix.c:692: SHIFTREG_CLOCK_HIGH;
                                   4464 ;	assignBit
      001590 D2 81            [12] 4465 	setb	_P0_1
                                   4466 ;	dotmatrix.c:693: SHIFTREG_CLOCK_LOW;
                                   4467 ;	assignBit
      001592 C2 81            [12] 4468 	clr	_P0_1
                                   4469 ;	dotmatrix.c:695: whole_data <<= 1; // shifting one bit
      001594 90r00r1D         [24] 4470 	mov	dptr,#_shift_data_whole_data_65537_152
      001597 E0               [24] 4471 	movx	a,@dptr
      001598 25 E0            [12] 4472 	add	a,acc
      00159A F0               [24] 4473 	movx	@dptr,a
                                   4474 ;	dotmatrix.c:685: for (int i = 0; i < EIGHT; i++)
      00159B 0E               [12] 4475 	inc	r6
      00159C BE 00 D9         [24] 4476 	cjne	r6,#0x00,00106$
      00159F 0F               [12] 4477 	inc	r7
      0015A0 80 D6            [24] 4478 	sjmp	00106$
      0015A2                       4479 00104$:
                                   4480 ;	dotmatrix.c:697: LATCH_LOW;
                                   4481 ;	assignBit
      0015A2 C2 80            [12] 4482 	clr	_P0_0
                                   4483 ;	dotmatrix.c:698: LATCH_HIGH;
                                   4484 ;	assignBit
      0015A4 D2 80            [12] 4485 	setb	_P0_0
                                   4486 ;	dotmatrix.c:699: SS_HIGH;
                                   4487 ;	assignBit
      0015A6 D2 91            [12] 4488 	setb	_P1_1
                                   4489 ;	dotmatrix.c:700: SS2_HIGH;
                                   4490 ;	assignBit
      0015A8 D2 90            [12] 4491 	setb	_P1_0
                                   4492 ;	dotmatrix.c:701: LATCH_LOW;
                                   4493 ;	assignBit
      0015AA C2 80            [12] 4494 	clr	_P0_0
                                   4495 ;	dotmatrix.c:702: }
      0015AC 22               [24] 4496 	ret
                                   4497 	.area CSEG    (CODE)
                                   4498 	.area CONST   (CODE)
                                   4499 	.area XINIT   (CODE)
      000000                       4500 __xinit__game_status:
      000000 02                    4501 	.db #0x02	; 2
      000001                       4502 __xinit__letter_G:
      000001 78                    4503 	.db #0x78	; 120	'x'
      000002 84                    4504 	.db #0x84	; 132
      000003 80                    4505 	.db #0x80	; 128
      000004 8E                    4506 	.db #0x8e	; 142
      000005 82                    4507 	.db #0x82	; 130
      000006 84                    4508 	.db #0x84	; 132
      000007 78                    4509 	.db #0x78	; 120	'x'
      000008 00                    4510 	.db #0x00	; 0
      000009                       4511 __xinit__letter_A:
      000009 3C                    4512 	.db #0x3c	; 60
      00000A 42                    4513 	.db #0x42	; 66	'B'
      00000B 42                    4514 	.db #0x42	; 66	'B'
      00000C 7E                    4515 	.db #0x7e	; 126
      00000D 42                    4516 	.db #0x42	; 66	'B'
      00000E 42                    4517 	.db #0x42	; 66	'B'
      00000F 42                    4518 	.db #0x42	; 66	'B'
      000010 00                    4519 	.db #0x00	; 0
      000011                       4520 __xinit__letter_M:
      000011 82                    4521 	.db #0x82	; 130
      000012 C6                    4522 	.db #0xc6	; 198
      000013 AA                    4523 	.db #0xaa	; 170
      000014 92                    4524 	.db #0x92	; 146
      000015 82                    4525 	.db #0x82	; 130
      000016 82                    4526 	.db #0x82	; 130
      000017 82                    4527 	.db #0x82	; 130
      000018 00                    4528 	.db #0x00	; 0
      000019                       4529 __xinit__letter_E:
      000019 7E                    4530 	.db #0x7e	; 126
      00001A 40                    4531 	.db #0x40	; 64
      00001B 40                    4532 	.db #0x40	; 64
      00001C 7C                    4533 	.db #0x7c	; 124
      00001D 40                    4534 	.db #0x40	; 64
      00001E 40                    4535 	.db #0x40	; 64
      00001F 7E                    4536 	.db #0x7e	; 126
      000020 00                    4537 	.db #0x00	; 0
      000021                       4538 __xinit__letter_O:
      000021 3C                    4539 	.db #0x3c	; 60
      000022 42                    4540 	.db #0x42	; 66	'B'
      000023 42                    4541 	.db #0x42	; 66	'B'
      000024 42                    4542 	.db #0x42	; 66	'B'
      000025 42                    4543 	.db #0x42	; 66	'B'
      000026 42                    4544 	.db #0x42	; 66	'B'
      000027 3C                    4545 	.db #0x3c	; 60
      000028 00                    4546 	.db #0x00	; 0
      000029                       4547 __xinit__letter_V:
      000029 82                    4548 	.db #0x82	; 130
      00002A 82                    4549 	.db #0x82	; 130
      00002B 44                    4550 	.db #0x44	; 68	'D'
      00002C 44                    4551 	.db #0x44	; 68	'D'
      00002D 28                    4552 	.db #0x28	; 40
      00002E 10                    4553 	.db #0x10	; 16
      00002F 10                    4554 	.db #0x10	; 16
      000030 00                    4555 	.db #0x00	; 0
      000031                       4556 __xinit__letter_R:
      000031 7C                    4557 	.db #0x7c	; 124
      000032 42                    4558 	.db #0x42	; 66	'B'
      000033 42                    4559 	.db #0x42	; 66	'B'
      000034 7C                    4560 	.db #0x7c	; 124
      000035 48                    4561 	.db #0x48	; 72	'H'
      000036 44                    4562 	.db #0x44	; 68	'D'
      000037 42                    4563 	.db #0x42	; 66	'B'
      000038 00                    4564 	.db #0x00	; 0
      000039                       4565 __xinit__letter_P:
      000039 78                    4566 	.db #0x78	; 120	'x'
      00003A 44                    4567 	.db #0x44	; 68	'D'
      00003B 44                    4568 	.db #0x44	; 68	'D'
      00003C 78                    4569 	.db #0x78	; 120	'x'
      00003D 40                    4570 	.db #0x40	; 64
      00003E 40                    4571 	.db #0x40	; 64
      00003F 40                    4572 	.db #0x40	; 64
      000040 00                    4573 	.db #0x00	; 0
      000041                       4574 __xinit__number_1:
      000041 30                    4575 	.db #0x30	; 48	'0'
      000042 70                    4576 	.db #0x70	; 112	'p'
      000043 30                    4577 	.db #0x30	; 48	'0'
      000044 30                    4578 	.db #0x30	; 48	'0'
      000045 30                    4579 	.db #0x30	; 48	'0'
      000046 78                    4580 	.db #0x78	; 120	'x'
      000047 00                    4581 	.db #0x00	; 0
      000048 00                    4582 	.db #0x00	; 0
      000049                       4583 __xinit__number_2:
      000049 78                    4584 	.db #0x78	; 120	'x'
      00004A 84                    4585 	.db #0x84	; 132
      00004B 04                    4586 	.db #0x04	; 4
      00004C 18                    4587 	.db #0x18	; 24
      00004D 60                    4588 	.db #0x60	; 96
      00004E 80                    4589 	.db #0x80	; 128
      00004F FC                    4590 	.db #0xfc	; 252
      000050 00                    4591 	.db #0x00	; 0
      000051                       4592 __xinit__letter_W:
      000051 82                    4593 	.db #0x82	; 130
      000052 82                    4594 	.db #0x82	; 130
      000053 82                    4595 	.db #0x82	; 130
      000054 82                    4596 	.db #0x82	; 130
      000055 82                    4597 	.db #0x82	; 130
      000056 AA                    4598 	.db #0xaa	; 170
      000057 54                    4599 	.db #0x54	; 84	'T'
      000058 00                    4600 	.db #0x00	; 0
      000059                       4601 __xinit__letter_N:
      000059 82                    4602 	.db #0x82	; 130
      00005A C2                    4603 	.db #0xc2	; 194
      00005B A2                    4604 	.db #0xa2	; 162
      00005C 92                    4605 	.db #0x92	; 146
      00005D 8A                    4606 	.db #0x8a	; 138
      00005E 86                    4607 	.db #0x86	; 134
      00005F 82                    4608 	.db #0x82	; 130
      000060 00                    4609 	.db #0x00	; 0
      000061                       4610 __xinit__explosion_small:
      000061 00                    4611 	.db #0x00	; 0
      000062 18                    4612 	.db #0x18	; 24
      000063 3C                    4613 	.db #0x3c	; 60
      000064 7E                    4614 	.db #0x7e	; 126
      000065 7E                    4615 	.db #0x7e	; 126
      000066 3C                    4616 	.db #0x3c	; 60
      000067 18                    4617 	.db #0x18	; 24
      000068 00                    4618 	.db #0x00	; 0
      000069 00                    4619 	.db #0x00	; 0
      00006A 18                    4620 	.db #0x18	; 24
      00006B 3C                    4621 	.db #0x3c	; 60
      00006C 7E                    4622 	.db #0x7e	; 126
      00006D 7E                    4623 	.db #0x7e	; 126
      00006E 3C                    4624 	.db #0x3c	; 60
      00006F 18                    4625 	.db #0x18	; 24
      000070 00                    4626 	.db #0x00	; 0
      000071                       4627 __xinit__explosion_large:
      000071 7E                    4628 	.db #0x7e	; 126
      000072 FF                    4629 	.db #0xff	; 255
      000073 FF                    4630 	.db #0xff	; 255
      000074 FF                    4631 	.db #0xff	; 255
      000075 FF                    4632 	.db #0xff	; 255
      000076 FF                    4633 	.db #0xff	; 255
      000077 FF                    4634 	.db #0xff	; 255
      000078 7E                    4635 	.db #0x7e	; 126
      000079 7E                    4636 	.db #0x7e	; 126
      00007A FF                    4637 	.db #0xff	; 255
      00007B FF                    4638 	.db #0xff	; 255
      00007C FF                    4639 	.db #0xff	; 255
      00007D FF                    4640 	.db #0xff	; 255
      00007E FF                    4641 	.db #0xff	; 255
      00007F FF                    4642 	.db #0xff	; 255
      000080 7E                    4643 	.db #0x7e	; 126
      000081                       4644 __xinit__current_row_location_of_player1:
      000081 07                    4645 	.db #0x07	; 7
      000082                       4646 __xinit__current_row_location_of_player2:
      000082 07                    4647 	.db #0x07	; 7
      000083                       4648 __xinit__b_y:
      000083 10                    4649 	.db #0x10	; 16
      000084                       4650 __xinit__b_x:
      000084 08                    4651 	.db #0x08	; 8
      000085                       4652 __xinit__direction_x:
      000085 01                    4653 	.db #0x01	; 1
      000086                       4654 __xinit__direction_y:
      000086 01                    4655 	.db #0x01	; 1
      000087                       4656 __xinit__player_points:
      000087 00                    4657 	.db #0x00	; 0
      000088 00                    4658 	.db #0x00	; 0
                                   4659 	.area CABS    (ABS,CODE)
